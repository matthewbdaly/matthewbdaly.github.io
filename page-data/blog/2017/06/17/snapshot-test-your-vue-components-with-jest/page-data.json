{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/2017/06/17/snapshot-test-your-vue-components-with-jest/","result":{"data":{"site":{"siteMetadata":{"title":"Matthew Daly","siteUrl":"https://matthewdaly.co.uk"}},"mdx":{"id":"db381f76-3d0f-5a54-8695-31a2bef7e72e","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Snapshot test your Vue components with Jest\",\n  \"date\": \"2017-06-17 14:12:02 +0100\",\n  \"layout\": \"post\",\n  \"categories\": [\"vue\", \"jest\", \"testing\", \"javascript\", \"tdd\"],\n  \"comments\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"At work I've recently started using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://vuejs.org/\"\n  }, \"Vue\"), \" as my main front-end framework instead of Angular 1. It has a relatively shallow learning curve and has enough similarities with both React and Angular 1 that if you're familiar with one or both of them it feels quite familiar. We're a Laravel shop and Laravel comes out of the box with a basic scaffolding for using Vue, so not only is it the path of least resistance, but many of my colleagues knew it already and it's used on some existing projects (one of which I've been helping out on this week), so it made sense to learn it. Add to that the fact that the main alternative is Angular 2, which I vehemently dislike, and learning Vue was a no-brainer.\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://facebook.github.io/jest/docs/snapshot-testing.html\"\n  }, \"Snapshot tests\"), \" are a really useful way of making sure your user interface doesn't change unexpectedly. Facebook introduced them to their Jest testing framework last year, and they've started to appear in other testing frameworks too. In their words...\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"A typical snapshot test case for a mobile app renders a UI component, takes a screenshot, then compares it to a reference image stored alongside the test. The test will fail if the two images do not match: either the change is unexpected, or the screenshot needs to be updated to the new version of the UI component.\")), mdx(\"p\", null, \"This makes it easy to make sure than a UI component, such as a React or Vue component, does not unexpectedly change how it is rendered. In the event that it does change, it will fail the test, and it's up to the developer to confirm whether or not that's expected - if so they can generate a new version of the snapshot and be on their way. Without it, you're stuck manually testing that the right HTML tags get generated, which is a chore.\"), mdx(\"p\", null, \"Jest's documentation is aimed pretty squarely at React, but it's not hard to adapt it to work with Vue components. Here I'll show you how I got it working with Vue.\"), mdx(\"h2\", null, \"Setting up a new project\"), mdx(\"p\", null, \"I used the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/vuejs/vue-cli\"\n  }, \"Vue CLI\"), \" boilerplate generator to set up my initial dependencies for this project. I then had to install some further packages:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ npm install --save-dev jest babel-jest jest-vue-preprocessor\\n\")), mdx(\"p\", null, \"After that, I had to configure Jest to work with Vue. The finished \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \" looked like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"{\\n  \\\"name\\\": \\\"myproject\\\",\\n  \\\"version\\\": \\\"1.0.0\\\",\\n  \\\"description\\\": \\\"A project\\\",\\n  \\\"author\\\": \\\"Matthew Daly <matthew@matthewdaly.co.uk>\\\",\\n  \\\"private\\\": true,\\n  \\\"scripts\\\": {\\n    \\\"dev\\\": \\\"node build/dev-server.js\\\",\\n    \\\"start\\\": \\\"node build/dev-server.js\\\",\\n    \\\"build\\\": \\\"node build/build.js\\\",\\n    \\\"lint\\\": \\\"eslint --ext .js,.vue src\\\",\\n    \\\"test\\\": \\\"jest __test__/ --coverage\\\"\\n  },\\n  \\\"dependencies\\\": {\\n    \\\"vue\\\": \\\"^2.3.3\\\",\\n    \\\"vue-router\\\": \\\"^2.3.1\\\"\\n  },\\n  \\\"devDependencies\\\": {\\n    \\\"autoprefixer\\\": \\\"^6.7.2\\\",\\n    \\\"babel-core\\\": \\\"^6.22.1\\\",\\n    \\\"babel-eslint\\\": \\\"^7.1.1\\\",\\n    \\\"babel-jest\\\": \\\"^20.0.3\\\",\\n    \\\"babel-loader\\\": \\\"^6.2.10\\\",\\n    \\\"babel-plugin-transform-runtime\\\": \\\"^6.22.0\\\",\\n    \\\"babel-preset-env\\\": \\\"^1.3.2\\\",\\n    \\\"babel-preset-stage-2\\\": \\\"^6.22.0\\\",\\n    \\\"babel-register\\\": \\\"^6.22.0\\\",\\n    \\\"chalk\\\": \\\"^1.1.3\\\",\\n    \\\"connect-history-api-fallback\\\": \\\"^1.3.0\\\",\\n    \\\"copy-webpack-plugin\\\": \\\"^4.0.1\\\",\\n    \\\"css-loader\\\": \\\"^0.28.0\\\",\\n    \\\"eslint\\\": \\\"^3.19.0\\\",\\n    \\\"eslint-config-standard\\\": \\\"^6.2.1\\\",\\n    \\\"eslint-friendly-formatter\\\": \\\"^2.0.7\\\",\\n    \\\"eslint-loader\\\": \\\"^1.7.1\\\",\\n    \\\"eslint-plugin-html\\\": \\\"^2.0.0\\\",\\n    \\\"eslint-plugin-promise\\\": \\\"^3.4.0\\\",\\n    \\\"eslint-plugin-standard\\\": \\\"^2.0.1\\\",\\n    \\\"eventsource-polyfill\\\": \\\"^0.9.6\\\",\\n    \\\"express\\\": \\\"^4.14.1\\\",\\n    \\\"extract-text-webpack-plugin\\\": \\\"^2.0.0\\\",\\n    \\\"file-loader\\\": \\\"^0.11.1\\\",\\n    \\\"friendly-errors-webpack-plugin\\\": \\\"^1.1.3\\\",\\n    \\\"html-webpack-plugin\\\": \\\"^2.28.0\\\",\\n    \\\"http-proxy-middleware\\\": \\\"^0.17.3\\\",\\n    \\\"jest\\\": \\\"^20.0.4\\\",\\n    \\\"jest-vue-preprocessor\\\": \\\"^1.0.1\\\",\\n    \\\"opn\\\": \\\"^4.0.2\\\",\\n    \\\"optimize-css-assets-webpack-plugin\\\": \\\"^1.3.0\\\",\\n    \\\"ora\\\": \\\"^1.2.0\\\",\\n    \\\"rimraf\\\": \\\"^2.6.0\\\",\\n    \\\"semver\\\": \\\"^5.3.0\\\",\\n    \\\"shelljs\\\": \\\"^0.7.6\\\",\\n    \\\"url-loader\\\": \\\"^0.5.8\\\",\\n    \\\"vue-loader\\\": \\\"^12.1.0\\\",\\n    \\\"vue-style-loader\\\": \\\"^3.0.1\\\",\\n    \\\"vue-template-compiler\\\": \\\"^2.3.3\\\",\\n    \\\"webpack\\\": \\\"^2.6.1\\\",\\n    \\\"webpack-bundle-analyzer\\\": \\\"^2.2.1\\\",\\n    \\\"webpack-dev-middleware\\\": \\\"^1.10.0\\\",\\n    \\\"webpack-hot-middleware\\\": \\\"^2.18.0\\\",\\n    \\\"webpack-merge\\\": \\\"^4.1.0\\\"\\n  },\\n  \\\"engines\\\": {\\n    \\\"node\\\": \\\">= 4.0.0\\\",\\n    \\\"npm\\\": \\\">= 3.0.0\\\"\\n  },\\n  \\\"browserslist\\\": [\\n    \\\"> 1%\\\",\\n    \\\"last 2 versions\\\",\\n    \\\"not ie <= 8\\\"\\n  ],\\n  \\\"jest\\\": {\\n    \\\"testRegex\\\": \\\"spec.js$\\\",\\n    \\\"moduleFileExtensions\\\": [\\n      \\\"js\\\",\\n      \\\"vue\\\"\\n    ],\\n    \\\"transform\\\": {\\n      \\\"^.+\\\\\\\\.js$\\\": \\\"<rootDir>/node_modules/babel-jest\\\",\\n      \\\".*\\\\\\\\.(vue)$\\\": \\\"<rootDir>/node_modules/jest-vue-preprocessor\\\"\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"I won't include things like the Webpack config, because that's all generated by Vue CLI. Note that we need to tell Jest what file extensions it should work with, including \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".vue\"), \", and we need to specify the appropriate transforms for different types of files. We use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jest-vue-preprocessor\"), \" for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".vue\"), \" files and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"babel-jest\"), \" for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".js\"), \" files.\"), mdx(\"p\", null, \"With that done, we can create a basic component. We'll assume we're writing a simple issue tracker here, and our first component will be at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/components/Issue.vue\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<template>\\n  <div>\\n    <h1>An Issue</h1>\\n  </div>\\n</template>\\n\\n<script>\\nexport default {\\n  data () {\\n    return {}\\n  }\\n}\\n</script>\\n\\n<style scoped>\\n</style>\\n\")), mdx(\"p\", null, \"Next, we create a simple test for this component. Save this as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__test__/components/issue.spec.js\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"import Issue from '../../src/components/Issue.vue'\\nimport Vue from 'vue'\\n\\nconst Constructor = Vue.extend(Issue)\\nconst vm = new Constructor().$mount()\\n\\ndescribe('Issue', () => {\\n  it('should render', () => {\\n    expect(vm.$el.querySelector('h1').textContent).toEqual('An Issue')\\n  });\\n\\n  it('should match the snapshot', () => {\\n    expect(vm.$el).toMatchSnapshot()\\n  });\\n});\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Constructor\"), \" is what creates our Vue component, while \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vm\"), \" is our actual newly-mounted Vue component. We can refer to the HTML inside the component through \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vm.$el\"), \", so we can then work with the virtual DOM easily.\"), mdx(\"p\", null, \"In the first test we use the more traditional method of verifying our UI component has worked as expected - we fetch an HTML tag inside it and verify that the content inside is what we expect. This is fine for a small component, but as the components get larger we'll find it more of a chore.\"), mdx(\"p\", null, \"The second test is much simpler and more concise. We simply assert that it matches the snapshot. Not only is that easier, but it can scale to components of any size because we don't have to check every little element.\"), mdx(\"p\", null, \"Let's run our tests:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ npm test\\n\\n> myproject@1.0.0 test /home/matthew/Projects/myproject\\n> jest __test__/ --coverage\\n\\n PASS  __test__/components/issue.spec.js\\n  Issue\\n    \\u2713 should render (46ms)\\n    \\u2713 should match the snapshot (14ms)\\n\\nSnapshot Summary\\n \\u203A 1 snapshot written in 1 test suite.\\n\\nTest Suites: 1 passed, 1 total\\nTests:       2 passed, 2 total\\nSnapshots:   1 added, 1 total\\nTime:        8.264s\\nRan all test suites matching \\\"__test__/\\\".\\n-----------------------------------------------------------|----------|----------|----------|----------|----------------|\\nFile                                                       |  % Stmts | % Branch |  % Funcs |  % Lines |Uncovered Lines |\\n-----------------------------------------------------------|----------|----------|----------|----------|----------------|\\nAll files                                                  |    96.15 |       50 |      100 |       96 |                |\\n root                                                      |      100 |      100 |      100 |      100 |                |\\n  unknown                                                  |      100 |      100 |      100 |      100 |                |\\n root/home/matthew/Projects/myproject/__test__/components  |      100 |      100 |      100 |      100 |                |\\n  issue.spec.js                                            |      100 |      100 |      100 |      100 |                |\\n root/home/matthew/Projects/myproject/src/components       |    94.44 |       50 |      100 |    94.12 |                |\\n  Issue.vue                                                |    94.44 |       50 |      100 |    94.12 |             39 |\\n-----------------------------------------------------------|----------|----------|----------|----------|----------------|\\n\")), mdx(\"p\", null, \"Note this section:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"Snapshot Summary\\n \\u203A 1 snapshot written in 1 test suite.\\n\")), mdx(\"p\", null, \"This tells us that the snapshot has been successfully written. If we run the tests again we should see that it checks against the existing snapshot:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ npm test\\n\\n> myproject@1.0.0 test /home/matthew/Projects/myproject\\n> jest __test__/ --coverage\\n\\n PASS  __test__/components/issue.spec.js\\n  Issue\\n    \\u2713 should render (40ms)\\n    \\u2713 should match the snapshot (12ms)\\n\\nTest Suites: 1 passed, 1 total\\nTests:       2 passed, 2 total\\nSnapshots:   1 passed, 1 total\\nTime:        3.554s\\nRan all test suites matching \\\"__test__/\\\".\\n-----------------------------------------------------------|----------|----------|----------|----------|----------------|\\nFile                                                       |  % Stmts | % Branch |  % Funcs |  % Lines |Uncovered Lines |\\n-----------------------------------------------------------|----------|----------|----------|----------|----------------|\\nAll files                                                  |    96.15 |       50 |      100 |       96 |                |\\n root                                                      |      100 |      100 |      100 |      100 |                |\\n  unknown                                                  |      100 |      100 |      100 |      100 |                |\\n root/home/matthew/Projects/myproject/__test__/components  |      100 |      100 |      100 |      100 |                |\\n  issue.spec.js                                            |      100 |      100 |      100 |      100 |                |\\n root/home/matthew/Projects/myproject/src/components       |    94.44 |       50 |      100 |    94.12 |                |\\n  Issue.vue                                                |    94.44 |       50 |      100 |    94.12 |             39 |\\n-----------------------------------------------------------|----------|----------|----------|----------|----------------|\\n\")), mdx(\"p\", null, \"Great stuff. Now, if we make a minor change to our component, such as changing the text from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"An Issue\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"My Issue\"), \", does it pick that up?\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ npm test\\n\\n> myproject@1.0.0 test /home/matthew/Projects/myproject\\n> jest __test__/ --coverage\\n\\n FAIL  __test__/components/issue.spec.js (5.252s)\\n  \\u25CF Issue \\u203A should render\\n\\n    expect(received).toEqual(expected)\\n\\n    Expected value to equal:\\n      \\\"An Issue\\\"\\n    Received:\\n      \\\"My Issue\\\"\\n      \\n      at Object.<anonymous> (__test__/components/issue.spec.js:9:52)\\n      at Promise.resolve.then.el (node_modules/p-map/index.js:42:16)\\n\\n  \\u25CF Issue \\u203A should match the snapshot\\n\\n    expect(value).toMatchSnapshot()\\n\\n    Received value does not match stored snapshot 1.\\n\\n    - Snapshot\\n    + Received\\n\\n     <div>\\n       <h1>\\n    -    An Issue\\n    +    My Issue\\n       </h1>\\n     </div>\\n      \\n      at Object.<anonymous> (__test__/components/issue.spec.js:13:20)\\n      at Promise.resolve.then.el (node_modules/p-map/index.js:42:16)\\n\\n  Issue\\n    \\u2715 should render (48ms)\\n    \\u2715 should match the snapshot (25ms)\\n\\nSnapshot Summary\\n \\u203A 1 snapshot test failed in 1 test suite. Inspect your code changes or run with `npm test -- -u` to update them.\\n\\nTest Suites: 1 failed, 1 total\\nTests:       2 failed, 2 total\\nSnapshots:   1 failed, 1 total\\nTime:        7.082s\\nRan all test suites matching \\\"__test__/\\\".\\n-----------------------------------------------------------|----------|----------|----------|----------|----------------|\\nFile                                                       |  % Stmts | % Branch |  % Funcs |  % Lines |Uncovered Lines |\\n-----------------------------------------------------------|----------|----------|----------|----------|----------------|\\nAll files                                                  |    96.15 |       50 |      100 |       96 |                |\\n root                                                      |      100 |      100 |      100 |      100 |                |\\n  unknown                                                  |      100 |      100 |      100 |      100 |                |\\n root/home/matthew/Projects/myproject/__test__/components  |      100 |      100 |      100 |      100 |                |\\n  issue.spec.js                                            |      100 |      100 |      100 |      100 |                |\\n root/home/matthew/Projects/myproject/src/components       |    94.44 |       50 |      100 |    94.12 |                |\\n  Issue.vue                                                |    94.44 |       50 |      100 |    94.12 |             39 |\\n-----------------------------------------------------------|----------|----------|----------|----------|----------------|\\n\")), mdx(\"p\", null, \"Yes, we can see that it's picked up on the change and thrown an error. Note this line:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \" \\u203A 1 snapshot test failed in 1 test suite. Inspect your code changes or run with `npm test -- -u` to update them.\\n\")), mdx(\"p\", null, \"Jest is telling us that our snapshot has changed, but if we expect that, we can just run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm test -- -u\"), \" to replace the existing one with our new one. Then, our tests will pass again.\"), mdx(\"p\", null, \"Now, this component is pretty useless. It doesn't accept any external input whatsoever, so the response is always going to be the same. How do we test a more dynamic component? Amend the component to look like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<template>\\n  <div>\\n    <h1>{{ issue.name }}</h1>\\n  </div>\\n</template>\\n\\n<script>\\nexport default {\\n  props: {\\n    issue: Object\\n  },\\n  data () {\\n    return {}\\n  }\\n}\\n</script>\\n\\n<style scoped>\\n</style>\\n\")), mdx(\"p\", null, \"We're now passing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"issue\"), \" object into our component as a prop, and getting the name from that. That will break our test, so we need to amend it to pass through the props:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"import Issue from '../../src/components/Issue.vue'\\nimport Vue from 'vue'\\n\\nconst Constructor = Vue.extend(Issue)\\nconst issue = {\\n  name: 'My Issue'\\n}\\nconst vm = new Constructor({\\n  propsData: { issue: issue }\\n}).$mount()\\n\\ndescribe('Issue', () => {\\n  it('should render', () => {\\n    expect(vm.$el.querySelector('h1').textContent).toEqual('My Issue')\\n  });\\n\\n  it('should match the snapshot', () => {\\n    expect(vm.$el).toMatchSnapshot()\\n  });\\n});\\n\")), mdx(\"p\", null, \"Here we pass our prop into the constructor for the component. Now, let's run the tests again:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ npm test\\n\\n> myproject@1.0.0 test /home/matthew/Projects/myproject\\n> jest __test__/ --coverage\\n\\n FAIL  __test__/components/issue.spec.js\\n  \\u25CF Issue \\u203A should match the snapshot\\n\\n    expect(value).toMatchSnapshot()\\n\\n    Received value does not match stored snapshot 1.\\n\\n    - Snapshot\\n    + Received\\n\\n     <div>\\n       <h1>\\n    -    An Issue\\n    +    My Issue\\n       </h1>\\n     </div>\\n      \\n      at Object.<anonymous> (__test__/components/issue.spec.js:18:20)\\n      at Promise.resolve.then.el (node_modules/p-map/index.js:42:16)\\n\\n  Issue\\n    \\u2713 should render (39ms)\\n    \\u2715 should match the snapshot (25ms)\\n\\nSnapshot Summary\\n \\u203A 1 snapshot test failed in 1 test suite. Inspect your code changes or run with `npm test -- -u` to update them.\\n\\nTest Suites: 1 failed, 1 total\\nTests:       1 failed, 1 passed, 2 total\\nSnapshots:   1 failed, 1 total\\nTime:        3.717s\\nRan all test suites matching \\\"__test__/\\\".\\n-----------------------------------------------------------|----------|----------|----------|----------|----------------|\\nFile                                                       |  % Stmts | % Branch |  % Funcs |  % Lines |Uncovered Lines |\\n-----------------------------------------------------------|----------|----------|----------|----------|----------------|\\nAll files                                                  |     96.3 |       50 |      100 |    96.15 |                |\\n root                                                      |      100 |      100 |      100 |      100 |                |\\n  unknown                                                  |      100 |      100 |      100 |      100 |                |\\n root/home/matthew/Projects/myproject/__test__/components  |      100 |      100 |      100 |      100 |                |\\n  issue.spec.js                                            |      100 |      100 |      100 |      100 |                |\\n root/home/matthew/Projects/myproject/src/components       |    94.44 |       50 |      100 |    94.12 |                |\\n  Issue.vue                                                |    94.44 |       50 |      100 |    94.12 |             39 |\\n-----------------------------------------------------------|----------|----------|----------|----------|----------------|\\n\")), mdx(\"p\", null, \"Jest has picked up on our changes and thrown an error. However, because we know the UI has changed, we're happy with this situation, so we can tell Jest to replace the prior snapshot with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm test -- -u\"), \" as mentioned earlier:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ npm test -- -u\\n\\n> myproject@1.0.0 test /home/matthew/Projects/myproject\\n> jest __test__/ --coverage \\\"-u\\\"\\n\\n PASS  __test__/components/issue.spec.js\\n  Issue\\n    \\u2713 should render (39ms)\\n    \\u2713 should match the snapshot (14ms)\\n\\nSnapshot Summary\\n \\u203A 1 snapshot updated in 1 test suite.\\n\\nTest Suites: 1 passed, 1 total\\nTests:       2 passed, 2 total\\nSnapshots:   1 updated, 1 total\\nTime:        3.668s\\nRan all test suites matching \\\"__test__/\\\".\\n-----------------------------------------------------------|----------|----------|----------|----------|----------------|\\nFile                                                       |  % Stmts | % Branch |  % Funcs |  % Lines |Uncovered Lines |\\n-----------------------------------------------------------|----------|----------|----------|----------|----------------|\\nAll files                                                  |     96.3 |       50 |      100 |    96.15 |                |\\n root                                                      |      100 |      100 |      100 |      100 |                |\\n  unknown                                                  |      100 |      100 |      100 |      100 |                |\\n root/home/matthew/Projects/myproject/__test__/components  |      100 |      100 |      100 |      100 |                |\\n  issue.spec.js                                            |      100 |      100 |      100 |      100 |                |\\n root/home/matthew/Projects/myproject/src/components       |    94.44 |       50 |      100 |    94.12 |                |\\n  Issue.vue                                                |    94.44 |       50 |      100 |    94.12 |             39 |\\n-----------------------------------------------------------|----------|----------|----------|----------|----------------|\\n\")), mdx(\"p\", null, \"Great, we now have a passing test suite again! That's all we need to make sure that any regressions in the generated HTML of a component get caught.\"), mdx(\"p\", null, \"Of course, this won't help with the actual functionality of the component. However, Jest is pretty easy to use to write tests for the actual functionality of the application. If you prefer another testing framework, it's possible to do the same with them, although I will leave setting them up as an exercise for the reader.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"At work I've recently started using  Vue  as my main front-end framework instead of Angular 1. It has a relatively shallow learning curve and has enough similarities with both…","frontmatter":{"title":"Snapshot test your Vue components with Jest","date":"17th June 2017 1:12 pm","isoDate":"2017-06-17T13:12:02+00:00","categories":["vue","jest","testing","javascript","tdd"]},"fields":{"path":"/blog/2017/06/17/snapshot-test-your-vue-components-with-jest/"}}},"pageContext":{"previous":{"fields":{"path":"/blog/2017/03/15/enforcing-a-coding-standard-with-php-codesniffer/"},"frontmatter":{"title":"Enforcing a coding standard with PHP CodeSniffer","date":"2017-03-15 21:37:11 +0000","layout":"post"}},"next":{"fields":{"path":"/blog/2017/08/14/profiling-your-laravel-application-with-clockwork/"},"frontmatter":{"title":"Profiling your Laravel application with Clockwork","date":"2017-08-14 12:40:00 +0100","layout":"post"}}}},"staticQueryHashes":["290055352","2909664151"]}