{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/2017/11/16/creating-custom-assertions-with-phpunit/","result":{"data":{"site":{"siteMetadata":{"title":"Matthew Daly","siteUrl":"https://matthewdaly.co.uk"}},"mdx":{"id":"937b6b7c-e180-55b4-83ed-6070ca583e1e","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Creating custom assertions with PHPUnit\",\n  \"date\": \"2017-11-16 15:15:50 +0000\",\n  \"layout\": \"post\",\n  \"categories\": [\"php\", \"tdd\", \"testing\", \"phpunit\"],\n  \"comments\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Today I've been working on a library I'm building for making it easier to build RESTful API's with Laravel. It uses an abstract RESTful controller, which inherits from the default Laravel controller, and I wanted to verify that the instantiated controller includes all the traits from the base controller.\"), mdx(\"p\", null, \"However, there was a problem. The only practical way to verify that a class includes a trait is with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"class_uses()\"), \" function, but this doesn't work if the class inherits from a parent that includes these traits. As the class is abstract, it can't be instantiated directly, so you must either create a dummy class just for testing that extends it, or mock the class, and that means that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"class_uses()\"), \" won't work. As a result, I needed to first get the parent class, then call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"class_uses()\"), \" on that, which is possible, but a bit verbose to do repeatedly for several tests.\"), mdx(\"p\", null, \"Fortunately it's quite easy to create your own custom assertions in PHPUnit. I started out by setting up the test with the assertion I wanted to have:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-php\"\n  }, \"<?php\\n\\nnamespace Tests\\\\Unit\\\\Http\\\\Controllers;\\n\\nuse Tests\\\\TestCase;\\nuse Mockery as m;\\n\\nclass RestfulControllerTest extends TestCase\\n{\\n    public function testTraits()\\n    {\\n        $controller = m::mock('Matthewbdaly\\\\Harmony\\\\Http\\\\Controllers\\\\RestfulController')->makePartial();\\n        $this->assertParentHasTrait('Illuminate\\\\Foundation\\\\Bus\\\\DispatchesJobs', $controller);\\n        $this->assertParentHasTrait('Illuminate\\\\Foundation\\\\Validation\\\\ValidatesRequests', $controller);\\n        $this->assertParentHasTrait('Illuminate\\\\Foundation\\\\Auth\\\\Access\\\\AuthorizesRequests', $controller);\\n    }\\n}\\n\")), mdx(\"p\", null, \"Actually implementing the assertion is fairly straightforward. You simply add the assertion as a method on the base test case you're using. and accept whatever arguments are required, plus a final argument of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$message = ''\"), \". Then you call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"self::assertThat()\"), \", as demonstrated below:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-php\"\n  }, \"    public function assertParentHasTrait($trait, $class, $message = '')\\n    {\\n        $parent = get_parent_class($class);\\n        $traits = class_uses($parent);\\n        self::assertThat(in_array($trait, $traits), self::isTrue(), $message);\\n    }\\n\")), mdx(\"p\", null, \"In this case we're asserting that the specified trait appears in the list of traits on the parent class. Note the use of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"self::isTrue()\"), \" - this just verifies that the response is truthy.\"), mdx(\"p\", null, \"Using this method it's quite easy to create custom assertions, which can help make your tests less verbose and easier to read.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Today I've been working on a library I'm building for making it easier to build RESTful API's with Laravel. It uses an abstract RESTful controller, which inherits from the defaultâ€¦","frontmatter":{"title":"Creating custom assertions with PHPUnit","date":"16th November 2017 3:15 pm","isoDate":"2017-11-16T15:15:50+00:00","categories":["php","tdd","testing","phpunit"]},"fields":{"path":"/blog/2017/11/16/creating-custom-assertions-with-phpunit/"}}},"pageContext":{"previous":{"fields":{"path":"/blog/2017/11/06/catching-debug-statements-in-php/"},"frontmatter":{"title":"Catching debug statements in PHP","date":"2017-11-06 12:00:18 +0000","layout":"post"}},"next":{"fields":{"path":"/blog/2017/11/28/building-a-postcode-lookup-client-with-httplug-and-phpspec/"},"frontmatter":{"title":"Building a postcode lookup client with HTTPlug and PHPSpec","date":"2017-11-28 11:40:39 +0000","layout":"post"}}}},"staticQueryHashes":["290055352","2909664151"]}