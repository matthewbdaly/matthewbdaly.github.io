{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/2017/02/19/my-first-laravel-package/","result":{"data":{"site":{"siteMetadata":{"title":"Matthew Daly","siteUrl":"https://matthewdaly.co.uk"}},"mdx":{"id":"788c110c-0e40-5f63-92d9-7917fbef3c3d","body":"var _excluded = [\"components\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], t.indexOf(o) >= 0 || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.indexOf(n) >= 0) continue; t[n] = r[n]; } return t; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"My first Laravel package\",\n  \"date\": \"2017-02-19 15:50:11 +0000\",\n  \"layout\": \"post\",\n  \"categories\": [\"php\", \"laravel\"],\n  \"comments\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"For some time now I've had a Laravel middleware I use extensively to add ETags to HTTP requests. I often use it for work projects, but obviously copying and pasting it all the time was a pain. I always meant to create a package for it, but I didn't want to do so until such time as I had some proper tests for it. Now I've finally figured out how to test middleware in isolation and I've got around to adding tests and creating a proper package for it.\"), mdx(\"p\", null, \"It's available on \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/matthewbdaly/laravel-etag-middleware\"\n  }, \"Github\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://packagist.org/packages/matthewbdaly/laravel-etag-middleware\"\n  }, \"Packagist\"), \" if you want to use it.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"For some time now I've had a Laravel middleware I use extensively to add ETags to HTTP requests. I often use it for work projects, but obviously copying and pasting it all the timeâ€¦","frontmatter":{"title":"My first Laravel package","date":"19th February 2017 3:50 pm","isoDate":"2017-02-19T15:50:11+00:00","categories":["php","laravel"]},"fields":{"path":"/blog/2017/02/19/my-first-laravel-package/"}}},"pageContext":{"previous":{"fields":{"path":"/blog/2017/02/18/integrating-behat-with-laravel/"},"frontmatter":{"title":"Integrating Behat with Laravel","date":"2017-02-18 21:25:57 +0000","layout":"post"}},"next":{"fields":{"path":"/blog/2017/03/01/decorating-laravel-repositories/"},"frontmatter":{"title":"Decorating Laravel repositories","date":"2017-03-01 23:16:57 +0000","layout":"post"}}}},"staticQueryHashes":["1776624730","3528622268"]}