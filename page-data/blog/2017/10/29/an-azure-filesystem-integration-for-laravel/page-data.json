{
    "componentChunkName": "component---src-templates-post-tsx",
    "path": "/blog/2017/10/29/an-azure-filesystem-integration-for-laravel/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Matthew Daly","siteUrl":"https://matthewdaly.co.uk"}},"mdx":{"id":"87022683-bdc7-5023-8234-5d5f4f64aba2","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"An Azure Filesystem integration for Laravel\",\n  \"date\": \"2017-10-29 19:31:34 +0000\",\n  \"layout\": \"post\",\n  \"categories\": [\"azure\", \"php\", \"laravel\"],\n  \"comments\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/blog/2016/10/24/creating-an-azure-storage-adapter-for-laravel/\"\n  }, \"My earlier post about integrating Laravel and Azure storage\"), \" seems to have become something of a go-to resource on this subject (I suspect this is because very few developers actually use Laravel and Azure together). Unfortunately it hasn't really aged terribly well - changes to the namespace and to Guzzle mean that it needs some work to integrate it.\"), mdx(\"p\", null, \"I've therefore \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/matthewbdaly/laravel-azure-storage\"\n  }, \"created a package for it\"), \". That way, it's easier to keep it up to date as if someone finds and fixes an issue with it, they can submit their changes back.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"My earlier post about integrating Laravel and Azure storage  seems to have become something of a go-to resource on this subject (I suspect this is because very few developersâ€¦","frontmatter":{"title":"An Azure Filesystem integration for Laravel","date":"29th October 2017 7:31 pm","isoDate":"2017-10-29T19:31:34+00:00","categories":["azure","php","laravel"]},"fields":{"path":"/blog/2017/10/29/an-azure-filesystem-integration-for-laravel/"}}},"pageContext":{"previous":{"fields":{"path":"/blog/2017/10/20/using-phpiredis-with-laravel/"},"frontmatter":{"title":"Using phpiredis with Laravel","date":"2017-10-20 22:55:26 +0100","layout":"post"}},"next":{"fields":{"path":"/blog/2017/11/06/catching-debug-statements-in-php/"},"frontmatter":{"title":"Catching debug statements in PHP","date":"2017-11-06 12:00:18 +0000","layout":"post"}}}},
    "staticQueryHashes": ["290055352","2909664151"]}