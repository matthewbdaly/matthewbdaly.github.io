{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/2017/10/29/an-azure-filesystem-integration-for-laravel/","result":{"data":{"site":{"siteMetadata":{"title":"Matthew Daly","siteUrl":"https://matthewdaly.co.uk"}},"mdx":{"id":"67fd24bd-acae-59c4-8397-1ef871470929","body":"var _excluded = [\"components\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], t.indexOf(o) >= 0 || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.indexOf(n) >= 0) continue; t[n] = r[n]; } return t; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"An Azure Filesystem integration for Laravel\",\n  \"date\": \"2017-10-29 19:31:34 +0000\",\n  \"layout\": \"post\",\n  \"categories\": [\"azure\", \"php\", \"laravel\"],\n  \"comments\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/blog/2016/10/24/creating-an-azure-storage-adapter-for-laravel/\"\n  }, \"My earlier post about integrating Laravel and Azure storage\"), \" seems to have become something of a go-to resource on this subject (I suspect this is because very few developers actually use Laravel and Azure together). Unfortunately it hasn't really aged terribly well - changes to the namespace and to Guzzle mean that it needs some work to integrate it.\"), mdx(\"p\", null, \"I've therefore \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/matthewbdaly/laravel-azure-storage\"\n  }, \"created a package for it\"), \". That way, it's easier to keep it up to date as if someone finds and fixes an issue with it, they can submit their changes back.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"My earlier post about integrating Laravel and Azure storage  seems to have become something of a go-to resource on this subject (I suspect this is because very few developersâ€¦","frontmatter":{"title":"An Azure Filesystem integration for Laravel","date":"29th October 2017 7:31 pm","isoDate":"2017-10-29T19:31:34+00:00","categories":["azure","php","laravel"]},"fields":{"path":"/blog/2017/10/29/an-azure-filesystem-integration-for-laravel/"}}},"pageContext":{"previous":{"fields":{"path":"/blog/2017/10/20/using-phpiredis-with-laravel/"},"frontmatter":{"title":"Using phpiredis with Laravel","date":"2017-10-20 22:55:26 +0100","layout":"post"}},"next":{"fields":{"path":"/blog/2017/11/06/catching-debug-statements-in-php/"},"frontmatter":{"title":"Catching debug statements in PHP","date":"2017-11-06 12:00:18 +0000","layout":"post"}}}},"staticQueryHashes":["1776624730","3528622268"]}