{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/2017/10/20/using-phpiredis-with-laravel/","result":{"data":{"site":{"siteMetadata":{"title":"Matthew Daly","siteUrl":"https://matthewdaly.co.uk"}},"mdx":{"id":"f9c87266-02a5-5c73-a115-7bae50ed1a9f","body":"var _excluded = [\"components\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], t.indexOf(o) >= 0 || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.indexOf(n) >= 0) continue; t[n] = r[n]; } return t; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Using phpiredis with Laravel\",\n  \"date\": \"2017-10-20 22:55:26 +0100\",\n  \"layout\": \"post\",\n  \"categories\": [\"php\", \"laravel\", \"redis\"],\n  \"comments\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Laravel has support out of the box for using Redis. However, by default it uses a Redis client written in PHP, which will always be a little slower than one written in C. If you're making heavy use of Redis, it may be worth using the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/nrk/phpiredis\"\n  }, \"phpiredis\"), \" extension to squeeze a little more performance out of it.\"), mdx(\"p\", null, \"I'm using PHP 7.0 on Ubuntu Zesty and I installed the dependencies with the following command:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ sudo apt-get install libhiredis-dev php-redis php7.0-dev\\n\")), mdx(\"p\", null, \"Then I installed phpiredis as follows:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"git clone https://github.com/nrk/phpiredis.git && \\\\\\n       cd phpiredis && \\\\\\n       phpize && \\\\\\n       ./configure --enable-phpiredis && \\\\\\n       make && \\\\\\n       sudo make install\\n\")), mdx(\"p\", null, \"Finally, I configured Redis to use phpiredis in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"redis\"), \" section of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"config/database.php\"), \" for a Laravel app:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-php\"\n  }, \"    'redis' => [\\n\\n        'cluster' => false,\\n\\n        'default' => [\\n            'host'     => env('REDIS_HOST', 'localhost'),\\n            'password' => env('REDIS_PASSWORD', null),\\n            'port'     => env('REDIS_PORT', 6379),\\n            'database' => 0,\\n            'options' => [\\n                'connections' => [\\n                    'tcp' => 'Predis\\\\Connection\\\\PhpiredisStreamConnection', // PHP streams\\n                    'unix' => 'Predis\\\\Connection\\\\PhpiredisSocketConnection', // ext-socket\\n                ],\\n            ]\\n        ],\\n    ],\\n\")), mdx(\"p\", null, \"Now, I'm going to be honest - in a casual comparison I couldn't see much difference in terms of speed. I would probably only bother with setting this up on a site where high Redis performance was absolutely necessary. If you just want a quicker cache response it might make more sense to put Varnish in front of the site instead. However, in cases where Redis gets used heavily, it's probably worth doing.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Laravel has support out of the box for using Redis. However, by default it uses a Redis client written in PHP, which will always be a little slower than one written in C. If you'reâ€¦","frontmatter":{"title":"Using phpiredis with Laravel","date":"20th October 2017 9:55 pm","isoDate":"2017-10-20T21:55:26+00:00","categories":["php","laravel","redis"]},"fields":{"path":"/blog/2017/10/20/using-phpiredis-with-laravel/"}}},"pageContext":{"previous":{"fields":{"path":"/blog/2017/10/03/simple-fuzzy-search-with-laravel-and-postgresql/"},"frontmatter":{"title":"Simple fuzzy search with Laravel and PostgreSQL","date":"2017-10-03 23:56:11 +0100","layout":"post"}},"next":{"fields":{"path":"/blog/2017/10/29/an-azure-filesystem-integration-for-laravel/"},"frontmatter":{"title":"An Azure Filesystem integration for Laravel","date":"2017-10-29 19:31:34 +0000","layout":"post"}}}},"staticQueryHashes":["1776624730","458490740"]}