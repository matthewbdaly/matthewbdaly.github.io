{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/2016/09/05/deploying-new-versions-of-a-laravel-app-with-fabric/","result":{"data":{"site":{"siteMetadata":{"title":"Matthew Daly","siteUrl":"https://matthewdaly.co.uk"}},"mdx":{"id":"652a5c8e-e1ed-542a-99bb-011ea9ee2793","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Deploying new versions of a Laravel app with Fabric\",\n  \"date\": \"2016-09-05 22:22:16 +0100\",\n  \"layout\": \"post\",\n  \"categories\": [\"php\", \"python\", \"fabric\", \"laravel\", \"deployment\"],\n  \"comments\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://laravel.com/docs/5.3/envoy\"\n  }, \"Envoy\"), \" is the official way to run tasks on a remote server for Laravel apps. A typical Envoy task for deploying a new version might look like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-blade\"\n  }, \"@servers(['web' => 'matthew@server1.example.com'])\\n\\n@task('deploy', ['on' => 'web'])\\n    cd /var/www\\n    sudo chown -R matthew:matthew .\\n    git pull origin master\\n    php artisan migrate\\n    php artisan view:clear\\n    composer dump-autoload\\n    sudo chown -R www-data:www-data .\\n    sudo supervisorctl restart mail-queue\\n@endtask\\n\")), mdx(\"p\", null, \"This would be defined in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Envoy.blade.php\"), \". With this in place, and Envoy set up globally, you can then run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"envoy run deploy\"), \" to run the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"deploy\"), \" command.\"), mdx(\"p\", null, \"However, Envoy requires the PHP SSH library, which I haven't been able to get working with PHP 7. Fortunately I was already familiar with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://www.fabfile.org/\"\n  }, \"Fabric\"), \", which makes an excellent alternative as long as you don't mind writing the task in Python.\"), mdx(\"p\", null, \"The same kind of task might look like this in a Fabric script, saved as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fabfile.py\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"#!/usr/bin/env python\\nfrom fabric.api import local, env, run, sudo\\nfrom fabric.context_managers import cd, prefix\\n\\nenv.hosts = ['server1.example.com']\\nenv.path = \\\"/var/www\\\"\\nenv.user = \\\"matthew\\\"\\nenv.password = \\\"password\\\"\\n# Or...\\nenv.key_filename = '/path/to/ssh/key'\\n\\ndef deploy():\\n    \\\"\\\"\\\"\\n    Deploy the latest version\\n    \\\"\\\"\\\"\\n    # Push changes to Bitbucket\\n    local(\\\"git push origin master\\\")\\n\\n    # Switch to project directory\\n    with cd(env.path):\\n        # Change owner\\n        sudo('chown -R matthew:matthew .')\\n\\n        # Pull changes to server\\n        run('git pull origin master')\\n\\n        # Run migrations\\n        run('php artisan migrate')\\n\\n        # Clear cached files\\n        run('php artisan view:clear')\\n        run('composer dump-autoload')\\n\\n        # Change owner back\\n        sudo('chown -R www-data:www-data .')\\n\\n        # restart mail queue\\n        sudo('supervisorctl restart mail-queue')\\n\")), mdx(\"p\", null, \"Then, assuming Fabric is already installed locally, you can run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fab deploy\"), \" to push up the latest revision.\"), mdx(\"p\", null, \"Either of these solutions will do a fine job of deploying your app. If you do need to store user-specific data in your Fabric script, it's probably prudent to keep it out of version control.\"), mdx(\"p\", null, \"Whichever way you choose, it's a really good idea to do what you can to automate deployment. It can be a boring, repetitive job, and both of these solutions make it much easier.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Envoy  is the official way to run tasks on a remote server for Laravel apps. A typical Envoy task for deploying a new version might look like this: This would be defined in  Envoyâ€¦","frontmatter":{"title":"Deploying new versions of a Laravel app with Fabric","date":"5th September 2016 9:22 pm","isoDate":"2016-09-05T21:22:16+00:00","categories":["php","python","fabric","laravel","deployment"]},"fields":{"path":"/blog/2016/09/05/deploying-new-versions-of-a-laravel-app-with-fabric/"}}},"pageContext":{"previous":{"fields":{"path":"/blog/2016/08/29/maintaining-your-cv-with-markdown-and-emacs/"},"frontmatter":{"title":"Maintaining your CV with Markdown and Emacs","date":"2016-08-29 16:40:08 +0100","layout":"post"}},"next":{"fields":{"path":"/blog/2016/09/11/building-a-phonegap-app-with-laravel-and-angular-part-1/"},"frontmatter":{"title":"Building a Phonegap app with Laravel and Angular - Part 1","date":"2016-09-11 19:33:41 +0100","layout":"post"}}}},"staticQueryHashes":["290055352","2909664151"]}