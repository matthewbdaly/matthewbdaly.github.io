{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/2015/06/14/setting-etags-in-laravel-5/","result":{"data":{"site":{"siteMetadata":{"title":"Matthew Daly","siteUrl":"https://matthewdaly.co.uk"}},"mdx":{"id":"b0ed977b-837b-5d98-b565-765c685e9b51","body":"var _excluded = [\"components\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], t.indexOf(o) >= 0 || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.indexOf(n) >= 0) continue; t[n] = r[n]; } return t; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Setting ETags in Laravel 5\",\n  \"date\": \"2015-06-14 21:29:52 +0100\",\n  \"layout\": \"post\",\n  \"categories\": [\"php\", \"laravel\"],\n  \"comments\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Although I'd prefer to use Python or Node.js, there are some times when circumstances dictate that I need to use PHP for a project at work. In the past, I used CodeIgniter, but that was through nothing more than inertia. For some time I'd been planning to switch to Laravel, largely because of the baked-in PHPUnit support, but events conspired against me - one big project that came along had a lot in common with an earlier one, so I forked it rather than starting over.\"), mdx(\"p\", null, \"Recently I built a REST API for a mobile app, and I decided to use that to try out Laravel (if it had been available at the time, I'd have gone for Lumen instead). I was very pleased with the results - I was able to quickly put together the back end I wanted, with good test coverage, and the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tinker\"), \" command in particular was useful in debugging. The end result is fast and efficient, with query caching in place using Memcached to improve response times.\"), mdx(\"p\", null, \"I also implemented a simple middleware to add ETags to HTTP responses and compare them on incoming requests, returning a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"304 Not Modified\"), \" status code if they are the same, which is given below:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-php\"\n  }, \"<?php namespace App\\\\Http\\\\Middleware;\\n\\nuse Closure;\\n\\nclass ETagMiddleware {\\n\\n    /**\\n     * Implement Etag support\\n     *\\n     * @param  \\\\Illuminate\\\\Http\\\\Request  $request\\n     * @param  \\\\Closure  $next\\n     * @return mixed\\n     */\\n    public function handle($request, Closure $next)\\n    {\\n        // Get response\\n        $response = $next($request);\\n\\n        // If this was a GET request...\\n        if ($request->isMethod('get')) {\\n            // Generate Etag\\n            $etag = md5($response->getContent());\\n            $requestEtag = str_replace('\\\"', '', $request->getETags());\\n\\n            // Check to see if Etag has changed\\n            if($requestEtag && $requestEtag[0] == $etag) {\\n                $response->setNotModified();\\n            }\\n\\n            // Set Etag\\n            $response->setEtag($etag);\\n        }\\n\\n        // Send response\\n        return $response;\\n    }\\n\\n}\\n\")), mdx(\"p\", null, \"This is based on \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.nickv.codes/blog/etags-in-laravel-4/\"\n  }, \"a solution for Laravel 4 by Nick Verwymeren\"), \", but implemented as Laravel 5 middleware, not a Laravel 4 filter. To use this with Laravel 5, save this as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"app/Http/Middleware/ETagMiddleware.php\"), \". Then add this to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$middleware\"), \" array in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"app/Http/Kernel.php\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-php\"\n  }, \"        'App\\\\Http\\\\Middleware\\\\ETagMiddleware',\\n\")), mdx(\"p\", null, \"It's quite simple to write this kind of middleware with Laravel, and using something like this is a no-brainer for most web apps considering the bandwidth it will likely save your users.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Although I'd prefer to use Python or Node.js, there are some times when circumstances dictate that I need to use PHP for a project at work. In the past, I used CodeIgniter, butâ€¦","frontmatter":{"title":"Setting ETags in Laravel 5","date":"14th June 2015 8:29 pm","isoDate":"2015-06-14T20:29:52+00:00","categories":["php","laravel"]},"fields":{"path":"/blog/2015/06/14/setting-etags-in-laravel-5/"}}},"pageContext":{"previous":{"fields":{"path":"/blog/2015/05/03/my-static-site-generator-post-on-sitepoint/"},"frontmatter":{"title":"My static site generator post on Sitepoint","date":"2015-05-03 19:55:30 +0100","layout":"post"}},"next":{"fields":{"path":"/blog/2015/06/17/getting-django-behave-and-celery-to-work-together/"},"frontmatter":{"title":"Getting django-behave and Celery to work together","date":"2015-06-17 20:34:08 +0100","layout":"post"}}}},"staticQueryHashes":["1776624730","458490740"]}