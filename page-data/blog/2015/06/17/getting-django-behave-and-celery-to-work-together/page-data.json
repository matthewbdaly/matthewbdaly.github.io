{
    "componentChunkName": "component---src-templates-post-tsx",
    "path": "/blog/2015/06/17/getting-django-behave-and-celery-to-work-together/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Matthew Daly","siteUrl":"https://matthewdaly.co.uk"}},"mdx":{"id":"995bea8e-bc43-5f21-a1a2-6a9f0c4dc439","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Getting django-behave and Celery to work together\",\n  \"date\": \"2015-06-17 20:34:08 +0100\",\n  \"layout\": \"post\",\n  \"categories\": [\"python\", \"django\", \"behave\", \"celery\"],\n  \"comments\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I ran into a small issue today. I'm working on a Django app which uses Celery to handle certain tasks that don't need to return a response within the context of the HTTP request. I also wanted to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"django_behave\"), \" for running BDD tests. The trouble is that both \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"django_behave\"), \" and Celery provide their own custom test runners that extend the default Django test runner, and so it looked like I might have to choose between the two.\"), mdx(\"p\", null, \"However, it turned out that the Celery one was actually very simple, with only a handful of changes needing to be made to the default test runner to make it work with Celery. I was therefore able to create my own custom test runner that inherited from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DjangoBehaveTestSuiteRunner\"), \" and applied the changes necessary to get Celery working with it. Here is the test runner I wrote, which was saved as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"myproject/runner.py\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"from django.conf import settings\\nfrom djcelery.contrib.test_runner import _set_eager\\nfrom django_behave.runner import DjangoBehaveTestSuiteRunner\\n\\nclass CeleryAndBehaveRunner(DjangoBehaveTestSuiteRunner):\\n    def setup_test_environment(self, **kwargs):\\n        _set_eager()\\n        settings.BROKER_BACKEND = 'memory'\\n        super(CeleryAndBehaveRunner, self).setup_test_environment(**kwargs)\\n\")), mdx(\"p\", null, \"To use it, you need to set the test runner in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"settings.py\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"TEST_RUNNER = 'myproject.runner.CeleryAndBehaveRunner'\\n\")), mdx(\"p\", null, \"Once that was done, my tests worked flawlessly with Celery, and the Behave tests ran as expected.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"I ran into a small issue today. I'm working on a Django app which uses Celery to handle certain tasks that don't need to return a response within the context of the HTTP request. Iâ€¦","frontmatter":{"title":"Getting django-behave and Celery to work together","date":"17th June 2015 7:34 pm","isoDate":"2015-06-17T19:34:08+00:00","categories":["python","django","behave","celery"]},"fields":{"path":"/blog/2015/06/17/getting-django-behave-and-celery-to-work-together/"}}},"pageContext":{"previous":{"fields":{"path":"/blog/2015/06/14/setting-etags-in-laravel-5/"},"frontmatter":{"title":"Setting ETags in Laravel 5","date":"2015-06-14 21:29:52 +0100","layout":"post"}},"next":{"fields":{"path":"/blog/2015/07/04/handling-images-as-base64-strings-with-django-rest-framework/"},"frontmatter":{"title":"Handling images as base64 strings with Django REST Framework","date":"2015-07-04 13:01:40 +0100","layout":"post"}}}},
    "staticQueryHashes": ["290055352","2909664151"]}