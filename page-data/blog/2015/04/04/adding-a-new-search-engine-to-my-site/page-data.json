{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/2015/04/04/adding-a-new-search-engine-to-my-site/","result":{"data":{"site":{"siteMetadata":{"title":"Matthew Daly","siteUrl":"https://matthewdaly.co.uk"}},"mdx":{"id":"d2d43eb3-6b32-5936-882d-5a00ffa8e401","body":"var _excluded = [\"components\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], t.indexOf(o) >= 0 || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.indexOf(n) >= 0) continue; t[n] = r[n]; } return t; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Adding a new search engine to my site\",\n  \"date\": \"2015-04-04 01:47:43 +0100\",\n  \"layout\": \"post\",\n  \"categories\": [\"grunt\", \"yeoman\", \"lunr\"],\n  \"comments\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I've just finished implementing a new search engine for this site. Obviously, with it using a static site generator, searching a relational database isn't an option. For a long while I'd just been getting by with Google's site-specific search, which worked, but meant leaving the site to view the search results.\"), mdx(\"p\", null, \"Now, I've implemented a client-side search system using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://lunrjs.com/\"\n  }, \"Lunr.js\"), \". It wasn't too time consuming, and as the index is generated with the rest of the site and loaded with the page, the response is almost instantaneous. I may write a future blog post on how to integrate Lunr.js with your site, as it's very handy and is an ideal solution for implementing search on a static site.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"I've just finished implementing a new search engine for this site. Obviously, with it using a static site generator, searching a relational database isn't an option. For a longâ€¦","frontmatter":{"title":"Adding a new search engine to my site","date":"4th April 2015 12:47 am","isoDate":"2015-04-04T00:47:43+00:00","categories":["grunt","yeoman","lunr"]},"fields":{"path":"/blog/2015/04/04/adding-a-new-search-engine-to-my-site/"}}},"pageContext":{"previous":{"fields":{"path":"/blog/2015/03/02/syntax-highlighting-in-fenced-code-blocks-in-vim/"},"frontmatter":{"title":"Syntax highlighting in fenced code blocks in Vim","date":"2015-03-02 23:25:43 +0000","layout":"post"}},"next":{"fields":{"path":"/blog/2015/04/18/how-i-added-search-to-my-site-with-lunr-dot-js/"},"frontmatter":{"title":"How I added search to my site with Lunr.js","date":"2015-04-18 15:05:41 +0100","layout":"post"}}}},"staticQueryHashes":["1776624730","458490740"]}