{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/2015/03/02/syntax-highlighting-in-fenced-code-blocks-in-vim/","result":{"data":{"site":{"siteMetadata":{"title":"Matthew Daly","siteUrl":"https://matthewdaly.co.uk"}},"mdx":{"id":"21abb529-e3fe-55a7-96b5-38325e489544","body":"var _excluded = [\"components\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], t.indexOf(o) >= 0 || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.indexOf(n) >= 0) continue; t[n] = r[n]; } return t; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Syntax highlighting in fenced code blocks in Vim\",\n  \"date\": \"2015-03-02 23:25:43 +0000\",\n  \"layout\": \"post\",\n  \"categories\": [\"vim\", \"markdown\"],\n  \"comments\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Just thought I'd share a little trick I picked up recently. As you may know, GitHub flavoured Markdown (which I use for this blog) supports fenced code blocks, allowing you to specify a language for a block of code in a Markdown file.\"), mdx(\"p\", null, \"If you put the following code in your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".vimrc\"), \", you can get syntax highlighting in those code blocks when you open up a Markdown file in Vim:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-vim\"\n  }, \"\\\"Syntax highlighting in Markdown\\nau BufNewFile,BufReadPost *.md set filetype=markdown\\nlet g:markdown_fenced_languages = ['bash=sh', 'css', 'django', 'handlebars', 'javascript', 'js=javascript', 'json=javascript', 'perl', 'php', 'python', 'ruby', 'sass', 'xml', 'html']\\n\")), mdx(\"p\", null, \"This does depend on having the appropriate syntax files installed. However, you can easily add in syntax files for many other languages that Vim supports, and there are third-party ones available to install - in my case, I've got the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"handlebars\"), \" one installed, which doesn't come with Vim.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Just thought I'd share a little trick I picked up recently. As you may know, GitHub flavoured Markdown (which I use for this blog) supports fenced code blocks, allowing you toâ€¦","frontmatter":{"title":"Syntax highlighting in fenced code blocks in Vim","date":"2nd March 2015 11:25 pm","isoDate":"2015-03-02T23:25:43+00:00","categories":["vim","markdown"]},"fields":{"path":"/blog/2015/03/02/syntax-highlighting-in-fenced-code-blocks-in-vim/"}}},"pageContext":{"previous":{"fields":{"path":"/blog/2015/03/02/extending-our-node-dot-js-and-redis-chat-server/"},"frontmatter":{"title":"Extending our Node.js and Redis chat server","date":"2015-03-02 23:03:48 +0000","layout":"post"}},"next":{"fields":{"path":"/blog/2015/04/04/adding-a-new-search-engine-to-my-site/"},"frontmatter":{"title":"Adding a new search engine to my site","date":"2015-04-04 01:47:43 +0100","layout":"post"}}}},"staticQueryHashes":["1776624730","3528622268"]}