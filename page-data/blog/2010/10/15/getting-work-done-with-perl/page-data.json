{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/2010/10/15/getting-work-done-with-perl/","result":{"data":{"site":{"siteMetadata":{"title":"Matthew Daly","siteUrl":"https://matthewdaly.co.uk"}},"mdx":{"id":"dfe14611-55d3-5407-a5f3-d6758ecdb43c","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"date\": \"2010-10-15 20:39:10\",\n  \"layout\": \"post\",\n  \"slug\": \"getting-work-done-with-perl\",\n  \"status\": \"publish\",\n  \"title\": \"Getting work done with Perl\",\n  \"wordpress_id\": \"545\",\n  \"categories\": [\"perl\", \"python\"],\n  \"comments\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"After my initial struggles with Perl, I now think I'm really starting to get to grips with the language. I generally find it a pain when you have to learn by building small but basically useless scripts - I always do best when building something useful.\"), mdx(\"p\", null, \"As one of the exercises for my studies I had to open a database connection to a Microsoft Access database, but I wanted to do the exercise in Ubuntu (I've always preferred using Unix-like operating systems for programming, and thanks to apt-get it's a lot less grief installing additional libraries and modules as you need them) and couldn't get Perl to connect to the database properly, so I resolved to export it to either MySQL or SQLite.\"), mdx(\"p\", null, \"I was able to export it to MySQL in the end using mdbtools, but I wasn't entirely happy with the end result. I resorted to re-exporting the data as a CSV file, then resolved to write a small Perl script to read the file, parse it using a regular expression to obtain the necessary information, then insert it into a new SQLite database.\"), mdx(\"p\", null, \"Here's what I came up with:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-perl\"\n  }, \"#!/usr/bin/perl -w\\n\\nuse strict;\\nuse DBI;\\n\\nmy $db = \\\"dbi:SQLite:backend.db\\\";\\n\\nif (!(-e \\\"backend.db\\\"))\\n{\\n   print \\\"Database does not exist. Creating it...\\\";\\n\\n   # Create the database\\n   my $dbh = DBI->connect($db) or die \\\"Error in connecting to database! $DBI::errstr\\\";\\n   my $createdb = $dbh->do(\\\"CREATE TABLE CARS( ID INTEGER PRIMARY KEY, YEAR INTEGER, MAKE VARCHAR(30), MODEL VARCHAR(30), COLOR VARCHAR(30), PRICE INTEGER);\\\");\\n   $dbh->disconnect();\\n}\\n\\nopen(READFILE, \\\"cartable.csv\\\");\\n\\nwhile()\\n{\\n   unless($_ =~ m/id,/)\\n   {\\n      m/\\\\d+\\\\,(\\\\d{4})\\\\,\\\\\\\"(\\\\w+)\\\\\\\"\\\\,\\\\\\\"(\\\\w+)\\\\\\\"\\\\,\\\\\\\"(\\\\w+)\\\\\\\"\\\\,\\\\\\\"(\\\\d+)\\\\\\\"/;\\n      my $year = $1;\\n      my $make = $2;\\n      my $model = $3;\\n      my $color = $4;\\n      my $price = $5;\\n\\n      my $dbh2 = DBI->connect($db) or die \\\"Error in connecting to database! $DBI::errstr\\\";\\n      my $insertdb = $dbh2->do(\\\"INSERT INTO CARS (YEAR, MAKE, MODEL, COLOR, PRICE) VALUES (\\\\\\\"$year\\\\\\\", \\\\\\\"$make\\\\\\\", \\\\\\\"$model\\\\\\\", \\\\\\\"$color\\\\\\\", \\\\\\\"$price\\\\\\\");\\\");\\n      $dbh2->disconnect;\\n   }\\n}\\nclose(READFILE);\\n\\nprint \\\"Write completed!\\\\n\\\";\\nprint \\\"To demonstrate it works, we'll run a SELECT query against the database...\\\\n\\\";\\n\\n# Read the database\\nmy $readdb = DBI->connect($db);\\nmy $dbselect = $readdb->prepare(\\\"SELECT * FROM CARS;\\\");\\n$dbselect->execute;\\n\\n# Print the results\\nprint \\\"ID\\\\tYear\\\\tMake\\\\tModel\\\\tColor\\\\tPrice\\\\n\\\";\\nwhile(my @row = $dbselect->fetchrow_array)\\n{\\n   print \\\"$row[0]\\\\t$row[1]\\\\t$row[2]\\\\t$row[3]\\\\t$row[4]\\\\t$row[5]\\\\n\\\";\\n}\\n\\n# Close the connection\\n$readdb->disconnect;\\n\")), mdx(\"p\", null, \"Apologies for the fact that the indentation doesn't seem to have copied across from Vim very well (can anyone recommend a good WordPress plugin for displaying code, none of the ones I've tried seem to be any good?). It works well, and it's also helped me grasp Perl's database API better.\"), mdx(\"p\", null, \"I think I've got a better idea now of what Python and Perl are best at and when to use each. Perl is a great language, but the fact that a lot of it is implicit makes it a little harder to pick up at first than Python - for instance, the default variable, which is quite a good idea, but takes a little getting used to. Its regex support is great, and I like the database API, but I would find it a lot harder to do any object-oriented programming in Perl than in Python (which I guess is why \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://www.iinteractive.com/moose/\"\n  }, \"Moose\"), \" exists). I've found Perl very useful for quick and dirty scripts and as a glue language, but for longer scripts Python seems the better choice.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"After my initial struggles with Perl, I now think I'm really starting to get to grips with the language. I generally find it a pain when you have to learn by building small butâ€¦","frontmatter":{"title":"Getting work done with Perl","date":"15th October 2010 8:39 pm","isoDate":"2010-10-15T20:39:10+00:00","categories":["perl","python"]},"fields":{"path":"/blog/2010/10/15/getting-work-done-with-perl/"}}},"pageContext":{"previous":{"fields":{"path":"/blog/2010/08/22/what-makes-a-good-programming-textbook/"},"frontmatter":{"title":"What makes a good programming textbook?","date":"2010-08-22 17:15:28","layout":"post"}},"next":{"fields":{"path":"/blog/2010/10/16/another-perl-snippet/"},"frontmatter":{"title":"Another Perl snippet...","date":"2010-10-16 21:11:10","layout":"post"}}}},"staticQueryHashes":["290055352","3373576264"]}