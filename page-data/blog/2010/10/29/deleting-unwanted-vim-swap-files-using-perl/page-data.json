{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/2010/10/29/deleting-unwanted-vim-swap-files-using-perl/","result":{"data":{"site":{"siteMetadata":{"title":"Matthew Daly","siteUrl":"https://matthewdaly.co.uk"}},"mdx":{"id":"b0693c35-190a-55e7-9810-a1c058808e03","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"date\": \"2010-10-29 20:49:49\",\n  \"layout\": \"post\",\n  \"slug\": \"deleting-unwanted-vim-swap-files-using-perl\",\n  \"status\": \"publish\",\n  \"title\": \"Deleting unwanted Vim swap files using Perl\",\n  \"wordpress_id\": \"585\",\n  \"categories\": [\"perl\"],\n  \"comments\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Yesterday I realised that I had somehow managed to scatter Vim swap files all across the Dropbox folder I use to share Perl and Python scripts I'd written between several computers, and it would be a good idea to clear them up. I didn't like the idea of using grep to search for them and manually deleting them, so I decided this was the ideal opportunity to write a Perl script to do it for me!\"), mdx(\"p\", null, \"I came up with the following:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-perl\"\n  }, \"#!/usr/bin/perl -w\\n\\nuse strict;\\nuse Cwd;\\n\\nsub searchDir\\n{\\n    # Subroutine to scan a directory looking for Vim swap files\\n    # Get directory to read and current directory\\n    my $readdir = shift;\\n    my $startdir = cwd();\\n\\n    # Change directory to the target one\\n    chdir($readdir) or die \\\"Unable to open $readdir! $!\\\\n\\\";\\n    print \\\"Scanning contents of directory $startdir\\\\n\\\";\\n\\n    # Open the directory and grab the names of all the files and folders in it\\n    opendir(DIR, \\\".\\\") or die \\\"Unable to open current directory! $!\\\\n\\\";\\n    my @entries = readdir(DIR) or die \\\"Unable to read directory! $!\\\\n\\\";\\n    closedir(DIR);\\n\\n    # Loop through the files and folders in the directory\\n    foreach my $entry (@entries)\\n    {\\n        # Skip this one and the one above it in the filesystem hierarchy\\n        next if($entry eq \\\".\\\");\\n        next if($entry eq \\\"..\\\");\\n\\n        # If a file is a directory, call the searchDir subroutine recursively in order to scan it\\n        if(-d $entry)\\n        {\\n            searchDir($entry);\\n            next;\\n        }\\n\\n        # Use a regular expression to check to see if the current file starts with a period, and ends with .swp - if it does, it's a Vim swap file\\n        if($entry =~ m/^\\\\..*\\\\.swp$/)\\n        {\\n            # Inform the user that a Vim swap file has been found and print out the path to it\\n            print \\\"Found a Vim swap file!\\\\n\\\";\\n            my $swppath = cwd();\\n            print \\\"It's the file $entry in $swppath.\\\\n\\\";\\n            my $fullpath = $swppath . \\\"/\\\" . $entry;\\n            print \\\"The full path is $fullpath.\\\\n\\\";\\n\\n            # Prompt the user to delete the file\\n            print \\\"Do you wish to delete this file? (Y/N)\\\\t\\\";\\n            chomp(my $reply = );\\n            if($reply =~ m/y/i)\\n            {\\n                print \\\"Deleting $fullpath...\\\\n\\\";\\n                unlink($fullpath);\\n            }\\n        }\\n    }\\n\\n    chdir($startdir);\\n}\\n\\n# Get directory to begin the search\\nprint \\\"Enter directory to start search: \\\";\\nchomp(my $beginSearch = );\\n\\n# call searchDir to start the search\\nsearchDir($beginSearch);\\n\")), mdx(\"p\", null, \"Thankfully, I've now discovered the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://wordpress.org/extend/plugins/preserve-code-formatting/\"\n  }, \"Preserve Code Formatting plugin\"), \" for WordPress, which seems to do a good job at making the code look presentable!\"), mdx(\"p\", null, \"This isn't perfect - it uses recursion to examine subdirectories, and when I ran it on my /home folder it somehow wound up in /sys on my Ubuntu machine and I ended up getting a deep recursion warning (a little research suggests this happens when it goes over 100 directories in). However, it seems to work fine for scanning individual folders in my /home directory, and that's all I really wanted anyway.\"), mdx(\"p\", null, \"I love how Perl makes writing this kind of simple script so easy. It's a great language for that kind of systems administration task.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Yesterday I realised that I had somehow managed to scatter Vim swap files all across the Dropbox folder I use to share Perl and Python scripts I'd written between several computersâ€¦","frontmatter":{"title":"Deleting unwanted Vim swap files using Perl","date":"29th October 2010 8:49 pm","isoDate":"2010-10-29T20:49:49+00:00","categories":["perl"]},"fields":{"path":"/blog/2010/10/29/deleting-unwanted-vim-swap-files-using-perl/"}}},"pageContext":{"previous":{"fields":{"path":"/blog/2010/10/27/a-couple-of-things-i-love-about-perl/"},"frontmatter":{"title":"A couple of things I love about Perl","date":"2010-10-27 00:15:33","layout":"post"}},"next":{"fields":{"path":"/blog/2010/11/13/a-slight-change/"},"frontmatter":{"title":"A slight change...","date":"2010-11-13 20:20:59","layout":"post"}}}},"staticQueryHashes":["290055352","2909664151"]}