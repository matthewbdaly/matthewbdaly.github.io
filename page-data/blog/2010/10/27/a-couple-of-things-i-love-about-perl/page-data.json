{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/2010/10/27/a-couple-of-things-i-love-about-perl/","result":{"data":{"site":{"siteMetadata":{"title":"Matthew Daly","siteUrl":"https://matthewdaly.co.uk"}},"mdx":{"id":"79fa89ef-9746-5ae8-946a-c6440fa7d051","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"date\": \"2010-10-27 00:15:33\",\n  \"layout\": \"post\",\n  \"slug\": \"a-couple-of-things-i-love-about-perl\",\n  \"status\": \"publish\",\n  \"title\": \"A couple of things I love about Perl\",\n  \"wordpress_id\": \"574\",\n  \"categories\": [\"perl\"],\n  \"comments\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In the time that I've been learning Perl, I've slowly grown to appreciate the strengths of the language more and more. There's two things in particular that I like about Perl. Once that I really don't think anyone is going to be surprised by is CPAN. It's a fantastic resource - there are a huge quantity of Perl modules available for virtually any task under the sun, and they're incredibly useful.\"), mdx(\"p\", null, \"The other is just how good the documentation is - I've never considered myself to be someone who learns terribly well from Unix man pages, but perldoc seems to have very good documentation indeed, including that for CPAN modules. Also, it helps that if you don't do well with the man page format, you have the option of running podwebserver and getting the documentation formatted as web pages.\"), mdx(\"p\", null, \"To give an example, I'm particularly interested in all kinds of network programming, be it web development, IRC, Jabber or whatever, and I'd heard of the Net::IRC module so I decided to start using it to create a simple IRC bot (yes, I know I should really be using POE::Component::IRC instead!). Using the information gleaned from perldoc Net::IRC it was easy to get started writing a bot, and I've now come up with the following simple bot:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-perl\"\n  }, \"#!/usr/bin/perl -w\\n\\nuse strict;\\nuse Net::IRC;\\n\\nmy $irc = new Net::IRC;\\nmy $nick = \\\"mattsbot\\\";\\nmy $server = \\\"irc.freenode.net\\\";\\nmy $channel = \\\"#botpark\\\";\\nmy $port = 6667;\\nmy $ircname = \\\"My wonderful bot\\\";\\nmy $owner = \\\"mattbd\\\"; \\n\\nsub on_connect\\n{\\n   my $self = shift;\\n\\n   print \\\"Joining $channel\\\\n\\\";\\n   $self->join($channel);\\n   $self->privmsg($channel,\\\"Ready to go!\\\");\\n}\\n\\nsub on_disconnect\\n{\\n    my $self = shift;\\n    $self->join($channel);\\n    $self->privmsg($channel, \\\"Sorry about that - dropped out for a sec.\\\");\\n} \\n\\nsub on_join\\n{\\n    # Get the connection and event objects\\n    my ($conn, $event) = @_;\\n\\n    # Get the nick that just joined\\n    my $newnick = $event->{nick};\\n\\n    # Greet the new nick\\n    $conn->privmsg($channel, \\\"Hello, $newnick! I'm a greeting bot!\\\");\\n}\\n\\nsub on_msg\\n{\\n    # Get the connection and event objects\\n    my ($conn, $event) = @_;\\n\\n    # Get nick of messaging user\\n    my $messager = $event->{nick};\\n\\n    # Respond negatively\\n    $conn->privmsg($messager, \\\"Sorry, I'm just a bot. Please don't message me!\\\");\\n}\\n\\nsub on_public\\n{\\n    # Get the connection and event objects\\n    my ($conn, $event) = @_;\\n\\n    # Get nick of messaging user\\n    my $messager = $event->{nick};\\n\\n    # Get text of message\\n    my $text = $event->{args}[0];\\n\\n    # Check to see if text contains name of bot - if so message the user negatively\\n    if($text =~ m/$nick/)\\n    {\\n        $conn->privmsg($channel, \\\"Sorry, $messager,I'm just a simple bot!\\\");\\n    }\\n}\\n\\nmy $conn = $irc->newconn(Nick =>$nick,Server=>$server,Port=>$port,Ircname=>$ircname);\\n$conn->add_global_handler('376', \\\\&on;_connect);\\n$conn->add_global_handler('disconnect', \\\\&on;_disconnect);\\n$conn->add_global_handler('msg', \\\\&on;_msg);\\n$conn->add_global_handler('join', \\\\&on;_join);\\n$conn->add_global_handler('msg', \\\\&on;_msg);\\n$conn->add_global_handler('public', \\\\&on;_public);\\n$irc->start();\\n\")), mdx(\"p\", null, \"Now, this bot isn't exactly hugely capable - all it does is greet new joiners, and tell you to leave it alone if you try to talk to it, but it was pretty easy to code it, thanks to the documentation, and it's a good base to build on. From here, it's easy to extend the on_public and on_msg subroutines to deal with other messages - for instance, I could use a regular expression to look for \\\"!respond\\\" in the text of the message and if it's found, respond with any appropriate text.\"), mdx(\"p\", null, \"I've hard-coded the appropriate details into the script in this case to make it quicker and easier to test it, but it would be trivial to change it to either accept settings passed as arguments from the command line, or have it grab these from a separate text file.\"), mdx(\"p\", null, \"My initial doubts about Perl are really wearing off. It's a powerful language and one that, now I've picked up the basic syntax, I'm having little trouble getting work done with. \"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"In the time that I've been learning Perl, I've slowly grown to appreciate the strengths of the language more and more. There's two things in particular that I like about Perl. Onceâ€¦","frontmatter":{"title":"A couple of things I love about Perl","date":"27th October 2010 12:15 am","isoDate":"2010-10-27T00:15:33+00:00","categories":["perl"]},"fields":{"path":"/blog/2010/10/27/a-couple-of-things-i-love-about-perl/"}}},"pageContext":{"previous":{"fields":{"path":"/blog/2010/10/19/i-passed/"},"frontmatter":{"title":"I passed!","date":"2010-10-19 14:52:55","layout":"post"}},"next":{"fields":{"path":"/blog/2010/10/29/deleting-unwanted-vim-swap-files-using-perl/"},"frontmatter":{"title":"Deleting unwanted Vim swap files using Perl","date":"2010-10-29 20:49:49","layout":"post"}}}},"staticQueryHashes":["290055352","2909664151"]}