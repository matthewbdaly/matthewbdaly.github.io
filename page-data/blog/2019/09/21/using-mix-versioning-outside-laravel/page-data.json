{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/2019/09/21/using-mix-versioning-outside-laravel/","result":{"data":{"site":{"siteMetadata":{"title":"Matthew Daly","siteUrl":"https://matthewdaly.co.uk"}},"mdx":{"id":"f41c599a-1565-59c1-997a-21fafb5da950","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Using Mix versioning outside Laravel\",\n  \"date\": \"2019-09-21 11:30:50 +0100\",\n  \"layout\": \"post\",\n  \"categories\": [\"php\", \"laravel\"],\n  \"comments\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Laravel Mix is a really convenient front end scaffold, and not just in the context of a Laravel application. Last year, I added it to a legacy application I maintain, with positive results, and I'm including it in a CMS I'm working on.\"), mdx(\"p\", null, \"However, I've always had issues trying to implement versioning outside a Laravel application. I've used the timestamp technique described \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://matthewdaly.co.uk/blog/2016/11/26/easy-static-asset-versioning-in-php/\"\n  }, \"here\"), \" a lot in the past, but nowadays I do most of my work in a Lando container, and I've had a lot of issues with timestamp changes not being picked up, forcing me to restart my container regularly when working on front-end assets. Switching to using Mix versioning seemed like a good way to resolve that issue, but of course the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mix()\"), \" helper isn't available elsewhere.\"), mdx(\"p\", null, \"Fortunately, its not all that hard to implement your own solution. Under the bonnet, Mix versioning works as follows:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The build generates an array of compiled static assets, with the key being the path to the asset, and the value being the path with a query string appended, and then saves it as \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"mix-manifest.json\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"mix()\"), \" helper loads the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"mix-manifest.json\"), \" file, converts it to JSON, fetches the array entry by path, and then returns the appropriate value for passing back from the helper\")), mdx(\"p\", null, \"With that in mind, I wrote the following Twig filter to handle assets versioned with Mix:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-php\"\n  }, \"<?php declare(strict_types=1);\\n\\nnamespace Project\\\\Core\\\\Views\\\\Filters;\\n\\nuse Exception;\\n\\nfinal class Mix\\n{\\n    public function __invoke(string $path): string\\n    {\\n        $manifest = json_decode(file_get_contents('mix-manifest.json'), true);\\n        if (! array_key_exists(\\\"/\\\" . $path, $manifest)) {\\n            throw new Exception(\\n                \\\"Unable to locate Mix file: {$path}\\\"\\n            );\\n        }\\n        if (!file_exists($path)) {\\n            throw new Exception('Included file does not exist');\\n        }\\n        return $manifest[\\\"/\\\" . $path];\\n    }\\n}\\n\")), mdx(\"p\", null, \"This works on the basis that the web root is set in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public/\"), \" folder, and that the compiled CSS and Javascript files are placed there - if that's not the case you may need to adapt this accordingly.\"), mdx(\"p\", null, \"You also need to add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"version()\"), \" call to your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"webpack.mix.js\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const mix = require('laravel-mix');\\n\\n/*\\n |--------------------------------------------------------------------------\\n | Mix Asset Management\\n |--------------------------------------------------------------------------\\n |\\n | Mix provides a clean, fluent API for defining some Webpack build steps\\n | for your Laravel application. By default, we are compiling the Sass\\n | file for the application as well as bundling up all the JS files.\\n |\\n */\\n\\nmix\\n  .setPublicPath('public/')\\n  .js('resources/js/app.js', 'public/js')\\n  .sass('resources/sass/app.scss', 'public/css')\\n  .version();\\n\")), mdx(\"p\", null, \"Then, when you instantiate Twig, you can add the new filter using something like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-php\"\n  }, \"$twig = new Environment($container->get('Twig\\\\Loader\\\\FilesystemLoader'), $config);\\n$mix = $container->get('Project\\\\Core\\\\Views\\\\Filters\\\\Mix');\\n$twig->addFilter(new TwigFilter('mix', $mix));\\n\")), mdx(\"p\", null, \"Now, the filter should be usable in your Twig views as shown:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-twig\"\n  }, \"<!doctype html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"utf-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1, shrink-to-fit=no\\\">\\n\\n    <link rel=\\\"stylesheet\\\" href=\\\"{{ 'css/app.css'| mix }}\\\" />\\n\\n    <title>{{ title }}</title>\\n  </head>\\n  <body>\\n    {% include 'header.html' %}\\n    {% block body %}\\n    {% endblock %}\\n\\n    <script src=\\\"{{ 'js/app.js'| mix }}\\\"></script>\\n  </body>\\n</html>\\n\")), mdx(\"p\", null, \"If you're using a different framework or templating system, there should be a way to create helpers, and it should be possible to implement this technique fairly easily. I was able to do so in the context of a legacy Zend application, so it should be possible with other legacy frameworks like CodeIgniter.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Laravel Mix is a really convenient front end scaffold, and not just in the context of a Laravel application. Last year, I added it to a legacy application I maintain, with positiveâ€¦","frontmatter":{"title":"Using Mix versioning outside Laravel","date":"21 September 2019","categories":["php","laravel"]},"fields":{"path":"/blog/2019/09/21/using-mix-versioning-outside-laravel/"}}},"pageContext":{"previous":{"fields":{"path":"/blog/2019/09/07/setting-private-properties-in-tests/"},"frontmatter":{"title":"Setting private properties in tests","date":"2019-09-07 20:16:47 +0100","layout":"post"}},"next":{"fields":{"path":"/blog/2019/09/22/storing-wordpress-configuration-in-environment-variables/"},"frontmatter":{"title":"Storing Wordpress configuration in environment variables","date":"2019-09-22 19:00:34 +0100","layout":"post"}}}},"staticQueryHashes":["290055352","2909664151"]}