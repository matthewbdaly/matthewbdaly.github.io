{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/2014/02/15/django-blog-tutorial-the-next-generation-part-4/","result":{"data":{"site":{"siteMetadata":{"title":"Matthew Daly","siteUrl":"https://matthewdaly.co.uk"}},"mdx":{"id":"01d35a6c-0df2-5d41-85a3-7731d88a03aa","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"layout\": \"post\",\n  \"title\": \"Django blog tutorial - the next generation - part 4\",\n  \"date\": \"2014-02-15 17:45:00 +0000\",\n  \"comments\": true,\n  \"categories\": [\"python\", \"django\", \"tdd\", \"django-blog-tutorial\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Hello again! As promised, in this instalment we'll implement categories and tags, as well as an RSS feed.\"), mdx(\"p\", null, \"As usual, we need to switch into our virtualenv:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ source venv/bin/activate\\n\")), mdx(\"h2\", null, \"Categories\"), mdx(\"p\", null, \"It's worth taking a little time at this point to set out what we mean by categories and tags in this case, as the two can be very similar. In this case, we'll use the following criteria:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A post can have only one category, or none, but a category can be applied to any number of posts\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A post can have any number of tags, and a tag can be applied to any number of posts\")), mdx(\"p\", null, \"If you're not too familiar with relational database theory, the significance of this may not be apparent, so here's a quick explanation. Because the categories are limited to one per post, the relationship between a post and a category is known as \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"one-to-many\"), \". In other words, one post can only have one category, but one category can have many posts. You can therefore define the categories in one table in your database, and refer to them by their ID (the reference to the category in the post table is referred to as a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"foreign key\"), \").\"), mdx(\"p\", null, \"As usual, we will write a test first. Open up \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"blogengine/tests.py\"), \" and edit the line importing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Post\"), \" model as follows:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"from blogengine.models import Post, Category\\n\")), mdx(\"p\", null, \"Also, add the following method before \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"test_create_post\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"    def test_create_category(self):\\n        #\\xA0Create the category\\n        category = Category()\\n\\n        #\\xA0Add attributes\\n        category.name = 'python'\\n        category.description = 'The Python programming language'\\n\\n        #\\xA0Save it\\n        category.save()\\n\\n        #\\xA0Check we can find it\\n        all_categories = Category.objects.all()\\n        self.assertEquals(len(all_categories), 1)\\n        only_category = all_categories[0]\\n        self.assertEquals(only_category, category)\\n\\n        #\\xA0Check attributes\\n        self.assertEquals(only_category.name, 'python')\\n        self.assertEquals(only_category.description, 'The Python programming language')\\n\")), mdx(\"p\", null, \"This test checks that we can create categories. But categories aren't much use unless we can actually apply them to our posts. So we need to edit our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Post\"), \" model as well, and to do so we need to have a test in place first. Edit the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"test_create_post\"), \" method as follows:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"    def test_create_post(self):\\n        #\\xA0Create the category\\n        category = Category()\\n        category.name = 'python'\\n        category.description = 'The Python programming language'\\n        category.save()\\n\\n        # Create the author\\n        author = User.objects.create_user('testuser', 'user@example.com', 'password')\\n        author.save()\\n\\n        # Create the site\\n        site = Site()\\n        site.name = 'example.com'\\n        site.domain = 'example.com'\\n        site.save()\\n        \\n        # Create the post\\n        post = Post()\\n\\n        # Set the attributes\\n        post.title = 'My first post'\\n        post.text = 'This is my first blog post'\\n        post.slug = 'my-first-post'\\n        post.pub_date = timezone.now()\\n        post.author = author\\n        post.site = site\\n        post.category = category\\n\\n        # Save it\\n        post.save()\\n\\n        # Check we can find it\\n        all_posts = Post.objects.all()\\n        self.assertEquals(len(all_posts), 1)\\n        only_post = all_posts[0]\\n        self.assertEquals(only_post, post)\\n\\n        # Check attributes\\n        self.assertEquals(only_post.title, 'My first post')\\n        self.assertEquals(only_post.text, 'This is my first blog post')\\n        self.assertEquals(only_post.slug, 'my-first-post')\\n        self.assertEquals(only_post.site.name, 'example.com')\\n        self.assertEquals(only_post.site.domain, 'example.com')\\n        self.assertEquals(only_post.pub_date.day, post.pub_date.day)\\n        self.assertEquals(only_post.pub_date.month, post.pub_date.month)\\n        self.assertEquals(only_post.pub_date.year, post.pub_date.year)\\n        self.assertEquals(only_post.pub_date.hour, post.pub_date.hour)\\n        self.assertEquals(only_post.pub_date.minute, post.pub_date.minute)\\n        self.assertEquals(only_post.pub_date.second, post.pub_date.second)\\n        self.assertEquals(only_post.author.username, 'testuser')\\n        self.assertEquals(only_post.author.email, 'user@example.com')\\n        self.assertEquals(only_post.category.name, 'python')\\n        self.assertEquals(only_post.category.description, 'The Python programming language')\\n\")), mdx(\"p\", null, \"What we're doing here is adding a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"category\"), \" attribute to the posts. This attribute contains a reference to a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Category\"), \" object.\"), mdx(\"p\", null, \"Now, we also want to test adding, editing, and deleting a category from the admin interface. Add this code to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AdminTest\"), \" class:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"    def test_create_category(self):\\n        # Log in\\n        self.client.login(username='bobsmith', password=\\\"password\\\")\\n\\n        # Check response code\\n        response = self.client.get('/admin/blogengine/category/add/')\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Create the new category\\n        response = self.client.post('/admin/blogengine/category/add/', {\\n            'name': 'python',\\n            'description': 'The Python programming language'\\n            },\\n            follow=True\\n        )\\n        self.assertEquals(response.status_code, 200)\\n\\n        #\\xA0Check added successfully\\n        self.assertTrue('added successfully' in response.content)\\n\\n        # Check new category now in database\\n        all_categories = Category.objects.all()\\n        self.assertEquals(len(all_categories), 1)\\n\\n    def test_edit_category(self):\\n        # Create the category\\n        category = Category()\\n        category.name = 'python'\\n        category.description = 'The Python programming language'\\n        category.save()\\n\\n        #\\xA0Log in\\n        self.client.login(username='bobsmith', password=\\\"password\\\")\\n\\n        # Edit the category\\n        response = self.client.post('/admin/blogengine/category/1/', {\\n            'name': 'perl',\\n            'description': 'The Perl programming language'\\n            }, follow=True)\\n        self.assertEquals(response.status_code, 200)\\n\\n        #\\xA0Check changed successfully\\n        self.assertTrue('changed successfully' in response.content)\\n\\n        # Check category amended\\n        all_categories = Category.objects.all()\\n        self.assertEquals(len(all_categories), 1)\\n        only_category = all_categories[0]\\n        self.assertEquals(only_category.name, 'perl')\\n        self.assertEquals(only_category.description, 'The Perl programming language')\\n\\n    def test_delete_category(self):\\n        # Create the category\\n        category = Category()\\n        category.name = 'python'\\n        category.description = 'The Python programming language'\\n        category.save()\\n\\n        #\\xA0Log in\\n        self.client.login(username='bobsmith', password=\\\"password\\\")\\n\\n        # Delete the category\\n        response = self.client.post('/admin/blogengine/category/1/delete/', {\\n            'post': 'yes'\\n        }, follow=True)\\n        self.assertEquals(response.status_code, 200)\\n\\n        #\\xA0Check deleted successfully\\n        self.assertTrue('deleted successfully' in response.content)\\n\\n        #\\xA0Check category deleted\\n        all_categories = Category.objects.all()\\n        self.assertEquals(len(all_categories), 0) \\n\")), mdx(\"p\", null, \"This is very similar to the prior code for the posts, and just checks we can create categories via the admin. We also need to check we can apply these categories to posts, and that they don't break the existing tests:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"    def test_create_post(self):\\n        # Create the category\\n        category = Category()\\n        category.name = 'python'\\n        category.description = 'The Python programming language'\\n        category.save()\\n\\n        # Log in\\n        self.client.login(username='bobsmith', password=\\\"password\\\")\\n\\n        # Check response code\\n        response = self.client.get('/admin/blogengine/post/add/')\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Create the new post\\n        response = self.client.post('/admin/blogengine/post/add/', {\\n            'title': 'My first post',\\n            'text': 'This is my first post',\\n            'pub_date_0': '2013-12-28',\\n            'pub_date_1': '22:00:04',\\n            'slug': 'my-first-post',\\n            'site': '1',\\n            'category': '1'\\n        },\\n        follow=True\\n        )\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check added successfully\\n        self.assertTrue('added successfully' in response.content)\\n\\n        # Check new post now in database\\n        all_posts = Post.objects.all()\\n        self.assertEquals(len(all_posts), 1)\\n\\n    def test_edit_post(self):\\n        # Create the category\\n        category = Category()\\n        category.name = 'python'\\n        category.description = 'The Python programming language'\\n        category.save()\\n\\n        # Create the author\\n        author = User.objects.create_user('testuser', 'user@example.com', 'password')\\n        author.save()\\n\\n        # Create the site\\n        site = Site()\\n        site.name = 'example.com'\\n        site.domain = 'example.com'\\n        site.save()\\n        \\n        # Create the post\\n        post = Post()\\n        post.title = 'My first post'\\n        post.text = 'This is my first blog post'\\n        post.slug = 'my-first-post'\\n        post.pub_date = timezone.now()\\n        post.author = author\\n        post.site = site\\n        post.save()\\n\\n        # Log in\\n        self.client.login(username='bobsmith', password=\\\"password\\\")\\n\\n        # Edit the post\\n        response = self.client.post('/admin/blogengine/post/1/', {\\n            'title': 'My second post',\\n            'text': 'This is my second blog post',\\n            'pub_date_0': '2013-12-28',\\n            'pub_date_1': '22:00:04',\\n            'slug': 'my-second-post',\\n            'site': '1',\\n            'category': '1'\\n        },\\n        follow=True\\n        )\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check changed successfully\\n        self.assertTrue('changed successfully' in response.content)\\n\\n        # Check post amended\\n        all_posts = Post.objects.all()\\n        self.assertEquals(len(all_posts), 1)\\n        only_post = all_posts[0]\\n        self.assertEquals(only_post.title, 'My second post')\\n        self.assertEquals(only_post.text, 'This is my second blog post')\\n\\n    def test_delete_post(self):\\n        # Create the category\\n        category = Category()\\n        category.name = 'python'\\n        category.description = 'The Python programming language'\\n        category.save()\\n\\n        # Create the author\\n        author = User.objects.create_user('testuser', 'user@example.com', 'password')\\n        author.save()\\n\\n        # Create the site\\n        site = Site()\\n        site.name = 'example.com'\\n        site.domain = 'example.com'\\n        site.save()\\n        \\n        # Create the post\\n        post = Post()\\n        post.title = 'My first post'\\n        post.text = 'This is my first blog post'\\n        post.slug = 'my-first-post'\\n        post.pub_date = timezone.now()\\n        post.site = site\\n        post.author = author\\n        post.category = category\\n        post.save()\\n\\n        # Check new post saved\\n        all_posts = Post.objects.all()\\n        self.assertEquals(len(all_posts), 1)\\n\\n        # Log in\\n        self.client.login(username='bobsmith', password=\\\"password\\\")\\n\\n        # Delete the post\\n        response = self.client.post('/admin/blogengine/post/1/delete/', {\\n            'post': 'yes'\\n        }, follow=True)\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check deleted successfully\\n        self.assertTrue('deleted successfully' in response.content)\\n\\n        # Check post deleted\\n        all_posts = Post.objects.all()\\n        self.assertEquals(len(all_posts), 0)\\n\")), mdx(\"p\", null, \"Here we basically take our existing post tests in the admin interface and add the category to them. Finally, we edit the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PostViewTest\"), \" class to include categories:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"class PostViewTest(BaseAcceptanceTest):\\n    def test_index(self):\\n        # Create the category\\n        category = Category()\\n        category.name = 'python'\\n        category.description = 'The Python programming language'\\n        category.save()\\n\\n        # Create the author\\n        author = User.objects.create_user('testuser', 'user@example.com', 'password')\\n        author.save()\\n\\n        # Create the site\\n        site = Site()\\n        site.name = 'example.com'\\n        site.domain = 'example.com'\\n        site.save()\\n\\n        # Create the post\\n        post = Post()\\n        post.title = 'My first post'\\n        post.text = 'This is [my first blog post](http://127.0.0.1:8000/)'\\n        post.slug = 'my-first-post'\\n        post.pub_date = timezone.now()\\n        post.author = author\\n        post.site = site\\n        post.category = category\\n        post.save()\\n\\n        # Check new post saved\\n        all_posts = Post.objects.all()\\n        self.assertEquals(len(all_posts), 1)\\n\\n        # Fetch the index\\n        response = self.client.get('/')\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check the post title is in the response\\n        self.assertTrue(post.title in response.content)\\n\\n        # Check the post text is in the response\\n        self.assertTrue(markdown.markdown(post.text) in response.content)\\n\\n        # Check the post date is in the response\\n        self.assertTrue(str(post.pub_date.year) in response.content)\\n        self.assertTrue(post.pub_date.strftime('%b') in response.content)\\n        self.assertTrue(str(post.pub_date.day) in response.content)\\n\\n        # Check the link is marked up properly\\n        self.assertTrue('<a href=\\\"http://127.0.0.1:8000/\\\">my first blog post</a>' in response.content)\\n\\n    def test_post_page(self):\\n        # Create the category\\n        category = Category()\\n        category.name = 'python'\\n        category.description = 'The Python programming language'\\n        category.save()\\n\\n        # Create the author\\n        author = User.objects.create_user('testuser', 'user@example.com', 'password')\\n        author.save()\\n\\n        # Create the site\\n        site = Site()\\n        site.name = 'example.com'\\n        site.domain = 'example.com'\\n        site.save()\\n\\n        # Create the post\\n        post = Post()\\n        post.title = 'My first post'\\n        post.text = 'This is [my first blog post](http://127.0.0.1:8000/)'\\n        post.slug = 'my-first-post'\\n        post.pub_date = timezone.now()\\n        post.author = author\\n        post.site = site\\n        post.category = category\\n        post.save()\\n\\n        # Check new post saved\\n        all_posts = Post.objects.all()\\n        self.assertEquals(len(all_posts), 1)\\n        only_post = all_posts[0]\\n        self.assertEquals(only_post, post)\\n\\n        # Get the post URL\\n        post_url = only_post.get_absolute_url()\\n\\n        # Fetch the post\\n        response = self.client.get(post_url)\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check the post title is in the response\\n        self.assertTrue(post.title in response.content)\\n\\n        # Check the post text is in the response\\n        self.assertTrue(markdown.markdown(post.text) in response.content)\\n\\n        # Check the post date is in the response\\n        self.assertTrue(str(post.pub_date.year) in response.content)\\n        self.assertTrue(post.pub_date.strftime('%b') in response.content)\\n        self.assertTrue(str(post.pub_date.day) in response.content)\\n\\n        # Check the link is marked up properly\\n        self.assertTrue('<a href=\\\"http://127.0.0.1:8000/\\\">my first blog post</a>' in response.content)\\n\")), mdx(\"p\", null, \"Now it's time to run our tests:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py test blogengine\\nCreating test database for alias 'default'...\\nE\\n======================================================================\\nERROR: blogengine.tests (unittest.loader.ModuleImportFailure)\\n----------------------------------------------------------------------\\nImportError: Failed to import test module: blogengine.tests\\nTraceback (most recent call last):\\n  File \\\"/usr/local/Cellar/python/2.7.6/Frameworks/Python.framework/Versions/2.7/lib/python2.7/unittest/loader.py\\\", line 254, in _find_tests\\n    module = self._get_module_from_name(name)\\n  File \\\"/usr/local/Cellar/python/2.7.6/Frameworks/Python.framework/Versions/2.7/lib/python2.7/unittest/loader.py\\\", line 232, in _get_module_from_name\\n    __import__(name)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 3, in <module>\\n    from blogengine.models import Post, Category\\nImportError: cannot import name Category\\n\\n\\n----------------------------------------------------------------------\\nRan 1 test in 0.000s\\n\\nFAILED (errors=1)\\nDestroying test database for alias 'default'...\\n\")), mdx(\"p\", null, \"This is the expected result. We need to create our Category model. So let's do that:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"from django.db import models\\nfrom django.contrib.auth.models import User\\nfrom django.contrib.sites.models import Site\\n\\n# Create your models here.\\nclass Category(models.Model):\\n    name = models.CharField(max_length=200)\\n    description = models.TextField()\\n\\n\\nclass Post(models.Model):\\n    title = models.CharField(max_length=200)\\n    pub_date = models.DateTimeField()\\n    text = models.TextField()\\n    slug = models.SlugField(max_length=40, unique=True)\\n    author = models.ForeignKey(User)\\n    site = models.ForeignKey(Site)\\n    category = models.ForeignKey(Category, blank=True, null=True)\\n\\n    def get_absolute_url(self):\\n        return \\\"/%s/%s/%s/\\\" % (self.pub_date.year, self.pub_date.month, self.slug)\\n\\n    def __unicode__(self):\\n        return self.title\\n\\n    class Meta:\\n        ordering = [\\\"-pub_date\\\"]\\n\")), mdx(\"p\", null, \"Note that we add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Category\"), \" before \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Post\"), \" - this is because \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Category\"), \" is a foreign key in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Post\"), \", and must be defined in order to be used. Also, note that we add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"category\"), \" attribute as a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ForeignKey\"), \" field, like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"User\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Site\"), \", indicating that it is an item in another table being references.\"), mdx(\"p\", null, \"We also allow for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"category\"), \" to be blank or null, so the user does not have to apply a category if they don't wish to.\"), mdx(\"p\", null, \"If we run our tests, they should still fail:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py test blogengine\\nCreating test database for alias 'default'...\\nEEFEEEEE...EE\\n======================================================================\\nERROR: test_create_category (blogengine.tests.PostTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 20, in test_create_category\\n    category.save()\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 545, in save\\n    force_update=force_update, update_fields=update_fields)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 573, in save_base\\n    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 654, in _save_table\\n    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 687, in _do_insert\\n    using=using, raw=raw)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py\\\", line 232, in _insert\\n    return insert_query(self.model, objs, fields, **kwargs)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py\\\", line 1511, in insert_query\\n    return query.get_compiler(using=using).execute_sql(return_id)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py\\\", line 898, in execute_sql\\n    cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py\\\", line 53, in execute\\n    return self.cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py\\\", line 99, in __exit__\\n    six.reraise(dj_exc_type, dj_exc_value, traceback)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py\\\", line 53, in execute\\n    return self.cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py\\\", line 450, in execute\\n    return Database.Cursor.execute(self, query, params)\\nOperationalError: no such table: blogengine_category\\n\\n======================================================================\\nERROR: test_create_post (blogengine.tests.PostTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 37, in test_create_post\\n    category.save()\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 545, in save\\n    force_update=force_update, update_fields=update_fields)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 573, in save_base\\n    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 654, in _save_table\\n    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 687, in _do_insert\\n    using=using, raw=raw)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py\\\", line 232, in _insert\\n    return insert_query(self.model, objs, fields, **kwargs)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py\\\", line 1511, in insert_query\\n    return query.get_compiler(using=using).execute_sql(return_id)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py\\\", line 898, in execute_sql\\n    cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py\\\", line 53, in execute\\n    return self.cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py\\\", line 99, in __exit__\\n    six.reraise(dj_exc_type, dj_exc_value, traceback)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py\\\", line 53, in execute\\n    return self.cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py\\\", line 450, in execute\\n    return Database.Cursor.execute(self, query, params)\\nOperationalError: no such table: blogengine_category\\n\\n======================================================================\\nERROR: test_create_post (blogengine.tests.AdminTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 215, in test_create_post\\n    category.save()\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 545, in save\\n    force_update=force_update, update_fields=update_fields)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 573, in save_base\\n    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 654, in _save_table\\n    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 687, in _do_insert\\n    using=using, raw=raw)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py\\\", line 232, in _insert\\n    return insert_query(self.model, objs, fields, **kwargs)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py\\\", line 1511, in insert_query\\n    return query.get_compiler(using=using).execute_sql(return_id)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py\\\", line 898, in execute_sql\\n    cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py\\\", line 53, in execute\\n    return self.cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py\\\", line 99, in __exit__\\n    six.reraise(dj_exc_type, dj_exc_value, traceback)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py\\\", line 53, in execute\\n    return self.cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py\\\", line 450, in execute\\n    return Database.Cursor.execute(self, query, params)\\nOperationalError: no such table: blogengine_category\\n\\n======================================================================\\nERROR: test_delete_category (blogengine.tests.AdminTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 192, in test_delete_category\\n    category.save()\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 545, in save\\n    force_update=force_update, update_fields=update_fields)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 573, in save_base\\n    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 654, in _save_table\\n    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 687, in _do_insert\\n    using=using, raw=raw)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py\\\", line 232, in _insert\\n    return insert_query(self.model, objs, fields, **kwargs)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py\\\", line 1511, in insert_query\\n    return query.get_compiler(using=using).execute_sql(return_id)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py\\\", line 898, in execute_sql\\n    cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py\\\", line 53, in execute\\n    return self.cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py\\\", line 99, in __exit__\\n    six.reraise(dj_exc_type, dj_exc_value, traceback)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py\\\", line 53, in execute\\n    return self.cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py\\\", line 450, in execute\\n    return Database.Cursor.execute(self, query, params)\\nOperationalError: no such table: blogengine_category\\n\\n======================================================================\\nERROR: test_delete_post (blogengine.tests.AdminTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 304, in test_delete_post\\n    category.save()\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 545, in save\\n    force_update=force_update, update_fields=update_fields)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 573, in save_base\\n    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 654, in _save_table\\n    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 687, in _do_insert\\n    using=using, raw=raw)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py\\\", line 232, in _insert\\n    return insert_query(self.model, objs, fields, **kwargs)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py\\\", line 1511, in insert_query\\n    return query.get_compiler(using=using).execute_sql(return_id)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py\\\", line 898, in execute_sql\\n    cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py\\\", line 53, in execute\\n    return self.cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py\\\", line 99, in __exit__\\n    six.reraise(dj_exc_type, dj_exc_value, traceback)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py\\\", line 53, in execute\\n    return self.cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py\\\", line 450, in execute\\n    return Database.Cursor.execute(self, query, params)\\nOperationalError: no such table: blogengine_category\\n\\n======================================================================\\nERROR: test_edit_category (blogengine.tests.AdminTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 165, in test_edit_category\\n    category.save()\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 545, in save\\n    force_update=force_update, update_fields=update_fields)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 573, in save_base\\n    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 654, in _save_table\\n    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 687, in _do_insert\\n    using=using, raw=raw)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py\\\", line 232, in _insert\\n    return insert_query(self.model, objs, fields, **kwargs)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py\\\", line 1511, in insert_query\\n    return query.get_compiler(using=using).execute_sql(return_id)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py\\\", line 898, in execute_sql\\n    cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py\\\", line 53, in execute\\n    return self.cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py\\\", line 99, in __exit__\\n    six.reraise(dj_exc_type, dj_exc_value, traceback)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py\\\", line 53, in execute\\n    return self.cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py\\\", line 450, in execute\\n    return Database.Cursor.execute(self, query, params)\\nOperationalError: no such table: blogengine_category\\n\\n======================================================================\\nERROR: test_edit_post (blogengine.tests.AdminTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 250, in test_edit_post\\n    category.save()\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 545, in save\\n    force_update=force_update, update_fields=update_fields)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 573, in save_base\\n    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 654, in _save_table\\n    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 687, in _do_insert\\n    using=using, raw=raw)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py\\\", line 232, in _insert\\n    return insert_query(self.model, objs, fields, **kwargs)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py\\\", line 1511, in insert_query\\n    return query.get_compiler(using=using).execute_sql(return_id)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py\\\", line 898, in execute_sql\\n    cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py\\\", line 53, in execute\\n    return self.cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py\\\", line 99, in __exit__\\n    six.reraise(dj_exc_type, dj_exc_value, traceback)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py\\\", line 53, in execute\\n    return self.cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py\\\", line 450, in execute\\n    return Database.Cursor.execute(self, query, params)\\nOperationalError: no such table: blogengine_category\\n\\n======================================================================\\nERROR: test_index (blogengine.tests.PostViewTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 353, in test_index\\n    category.save()\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 545, in save\\n    force_update=force_update, update_fields=update_fields)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 573, in save_base\\n    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 654, in _save_table\\n    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 687, in _do_insert\\n    using=using, raw=raw)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py\\\", line 232, in _insert\\n    return insert_query(self.model, objs, fields, **kwargs)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py\\\", line 1511, in insert_query\\n    return query.get_compiler(using=using).execute_sql(return_id)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py\\\", line 898, in execute_sql\\n    cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py\\\", line 53, in execute\\n    return self.cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py\\\", line 99, in __exit__\\n    six.reraise(dj_exc_type, dj_exc_value, traceback)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py\\\", line 53, in execute\\n    return self.cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py\\\", line 450, in execute\\n    return Database.Cursor.execute(self, query, params)\\nOperationalError: no such table: blogengine_category\\n\\n======================================================================\\nERROR: test_post_page (blogengine.tests.PostViewTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 403, in test_post_page\\n    category.save()\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 545, in save\\n    force_update=force_update, update_fields=update_fields)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 573, in save_base\\n    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 654, in _save_table\\n    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 687, in _do_insert\\n    using=using, raw=raw)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py\\\", line 232, in _insert\\n    return insert_query(self.model, objs, fields, **kwargs)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py\\\", line 1511, in insert_query\\n    return query.get_compiler(using=using).execute_sql(return_id)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py\\\", line 898, in execute_sql\\n    cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py\\\", line 53, in execute\\n    return self.cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py\\\", line 99, in __exit__\\n    six.reraise(dj_exc_type, dj_exc_value, traceback)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py\\\", line 53, in execute\\n    return self.cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py\\\", line 450, in execute\\n    return Database.Cursor.execute(self, query, params)\\nOperationalError: no such table: blogengine_category\\n\\n======================================================================\\nFAIL: test_create_category (blogengine.tests.AdminTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 142, in test_create_category\\n    self.assertEquals(response.status_code, 200)\\nAssertionError: 404 != 200\\n\\n----------------------------------------------------------------------\\nRan 13 tests in 3.393s\\n\\nFAILED (failures=1, errors=9)\\nDestroying test database for alias 'default'...\\n\")), mdx(\"p\", null, \"The category table hasn't yet been created, so we need to use South to create and run the migrations:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ python manage.py schemamigration --auto blogengine\\n$ python manage.py migrate\\n\")), mdx(\"p\", null, \"If we then run our tests again, some of them will still fail:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"Creating test database for alias 'default'...\\n..F.F.F......\\n======================================================================\\nFAIL: test_create_category (blogengine.tests.AdminTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 142, in test_create_category\\n    self.assertEquals(response.status_code, 200)\\nAssertionError: 404 != 200\\n\\n======================================================================\\nFAIL: test_delete_category (blogengine.tests.AdminTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 201, in test_delete_category\\n    self.assertEquals(response.status_code, 200)\\nAssertionError: 404 != 200\\n\\n======================================================================\\nFAIL: test_edit_category (blogengine.tests.AdminTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 175, in test_edit_category\\n    self.assertEquals(response.status_code, 200)\\nAssertionError: 404 != 200\\n\\n----------------------------------------------------------------------\\nRan 13 tests in 4.047s\\n\\nFAILED (failures=3)\\nDestroying test database for alias 'default'...\\n\")), mdx(\"p\", null, \"That's because we haven't registered the categories in the admin. So, that's our next job:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"import models\\nfrom django.contrib import admin\\nfrom django.contrib.auth.models import User\\n\\nclass PostAdmin(admin.ModelAdmin):\\n    prepopulated_fields = {\\\"slug\\\": (\\\"title\\\",)}\\n    exclude = ('author',)\\n\\n    def save_model(self, request, obj, form, change):\\n        obj.author = request.user\\n        obj.save()\\n\\nadmin.site.register(models.Category)\\nadmin.site.register(models.Post, PostAdmin)\\n\")), mdx(\"p\", null, \"Now we try again:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py test blogengine\\nCreating test database for alias 'default'...\\n.............\\n----------------------------------------------------------------------\\nRan 13 tests in 4.092s\\n\\nOK\\nDestroying test database for alias 'default'...\\n\")), mdx(\"p\", null, \"It passes! Let's do a quick sense check before committing. Run the server:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ python manage.py runserver\\n\")), mdx(\"p\", null, \"If you visit the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://127.0.0.1:8000/admin/\"\n  }, \"admin\"), \", you'll see the text for category is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Categorys\"), \", which is incorrect. We also don't have a good representation of the category in the admin. Let's fix that:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"from django.db import models\\nfrom django.contrib.auth.models import User\\nfrom django.contrib.sites.models import Site\\n\\n# Create your models here.\\nclass Category(models.Model):\\n    name = models.CharField(max_length=200)\\n    description = models.TextField()\\n\\n    def __unicode__(self):\\n        return self.name\\n\\n    class Meta:\\n        verbose_name_plural = 'categories'\\n\\n\\nclass Post(models.Model):\\n    title = models.CharField(max_length=200)\\n    pub_date = models.DateTimeField()\\n    text = models.TextField()\\n    slug = models.SlugField(max_length=40, unique=True)\\n    author = models.ForeignKey(User)\\n    site = models.ForeignKey(Site)\\n    category = models.ForeignKey(Category, blank=True, null=True)\\n\\n    def get_absolute_url(self):\\n        return \\\"/%s/%s/%s/\\\" % (self.pub_date.year, self.pub_date.month, self.slug)\\n\\n    def __unicode__(self):\\n        return self.title\\n\\n    class Meta:\\n        ordering = [\\\"-pub_date\\\"]\\n\")), mdx(\"p\", null, \"Let's commit our changes:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ git add blogengine/\\n$ git commit -m 'Implemented categories'\\n\")), mdx(\"p\", null, \"Now, as yet our categories don't actually do all that much. We would like to be able to:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"List all posts under a category\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Show the post category at the base of the post\")), mdx(\"p\", null, \"So, let's implement that. First, as usual, we implement tests first:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"class PostViewTest(BaseAcceptanceTest):\\n    def test_index(self):\\n        # Create the category\\n        category = Category()\\n        category.name = 'python'\\n        category.description = 'The Python programming language'\\n        category.save()\\n\\n        # Create the author\\n        author = User.objects.create_user('testuser', 'user@example.com', 'password')\\n        author.save()\\n\\n        # Create the site\\n        site = Site()\\n        site.name = 'example.com'\\n        site.domain = 'example.com'\\n        site.save()\\n\\n        # Create the post\\n        post = Post()\\n        post.title = 'My first post'\\n        post.text = 'This is [my first blog post](http://127.0.0.1:8000/)'\\n        post.slug = 'my-first-post'\\n        post.pub_date = timezone.now()\\n        post.author = author\\n        post.site = site\\n        post.category = category\\n        post.save()\\n\\n        # Check new post saved\\n        all_posts = Post.objects.all()\\n        self.assertEquals(len(all_posts), 1)\\n\\n        # Fetch the index\\n        response = self.client.get('/')\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check the post title is in the response\\n        self.assertTrue(post.title in response.content)\\n\\n        # Check the post text is in the response\\n        self.assertTrue(markdown.markdown(post.text) in response.content)\\n\\n        #\\xA0Check the post category is in the response\\n        self.assertTrue(post.category.name in response.content)\\n\\n        # Check the post date is in the response\\n        self.assertTrue(str(post.pub_date.year) in response.content)\\n        self.assertTrue(post.pub_date.strftime('%b') in response.content)\\n        self.assertTrue(str(post.pub_date.day) in response.content)\\n\\n        # Check the link is marked up properly\\n        self.assertTrue('<a href=\\\"http://127.0.0.1:8000/\\\">my first blog post</a>' in response.content)\\n\\n    def test_post_page(self):\\n        # Create the category\\n        category = Category()\\n        category.name = 'python'\\n        category.description = 'The Python programming language'\\n        category.save()\\n\\n        # Create the author\\n        author = User.objects.create_user('testuser', 'user@example.com', 'password')\\n        author.save()\\n\\n        # Create the site\\n        site = Site()\\n        site.name = 'example.com'\\n        site.domain = 'example.com'\\n        site.save()\\n\\n        # Create the post\\n        post = Post()\\n        post.title = 'My first post'\\n        post.text = 'This is [my first blog post](http://127.0.0.1:8000/)'\\n        post.slug = 'my-first-post'\\n        post.pub_date = timezone.now()\\n        post.author = author\\n        post.site = site\\n        post.category = category\\n        post.save()\\n\\n        # Check new post saved\\n        all_posts = Post.objects.all()\\n        self.assertEquals(len(all_posts), 1)\\n        only_post = all_posts[0]\\n        self.assertEquals(only_post, post)\\n\\n        # Get the post URL\\n        post_url = only_post.get_absolute_url()\\n\\n        # Fetch the post\\n        response = self.client.get(post_url)\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check the post title is in the response\\n        self.assertTrue(post.title in response.content)\\n\\n        #\\xA0Check the post category is in the response\\n        self.assertTrue(post.category.name in response.content)\\n\\n        # Check the post text is in the response\\n        self.assertTrue(markdown.markdown(post.text) in response.content)\\n\\n        # Check the post date is in the response\\n        self.assertTrue(str(post.pub_date.year) in response.content)\\n        self.assertTrue(post.pub_date.strftime('%b') in response.content)\\n        self.assertTrue(str(post.pub_date.day) in response.content)\\n\\n        # Check the link is marked up properly\\n        self.assertTrue('<a href=\\\"http://127.0.0.1:8000/\\\">my first blog post</a>' in response.content)\\n\")), mdx(\"p\", null, \"All we do here is assert that for both the post pages and the index, the text from the category name is shown in the response. We also need to check the category-specific route works. Add this method to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PostViewTest\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"    def test_category_page(self):\\n        # Create the category\\n        category = Category()\\n        category.name = 'python'\\n        category.description = 'The Python programming language'\\n        category.save()\\n\\n        # Create the author\\n        author = User.objects.create_user('testuser', 'user@example.com', 'password')\\n        author.save()\\n\\n        # Create the site\\n        site = Site()\\n        site.name = 'example.com'\\n        site.domain = 'example.com'\\n        site.save()\\n\\n        # Create the post\\n        post = Post()\\n        post.title = 'My first post'\\n        post.text = 'This is [my first blog post](http://127.0.0.1:8000/)'\\n        post.slug = 'my-first-post'\\n        post.pub_date = timezone.now()\\n        post.author = author\\n        post.site = site\\n        post.category = category\\n        post.save()\\n\\n        # Check new post saved\\n        all_posts = Post.objects.all()\\n        self.assertEquals(len(all_posts), 1)\\n        only_post = all_posts[0]\\n        self.assertEquals(only_post, post)\\n\\n        #\\xA0Get the category URL\\n        category_url = post.category.get_absolute_url()\\n\\n        # Fetch the category\\n        response = self.client.get(category_url)\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check the category name is in the response\\n        self.assertTrue(post.category.name in response.content)\\n\\n        # Check the post text is in the response\\n        self.assertTrue(markdown.markdown(post.text) in response.content)\\n\\n        # Check the post date is in the response\\n        self.assertTrue(str(post.pub_date.year) in response.content)\\n        self.assertTrue(post.pub_date.strftime('%b') in response.content)\\n        self.assertTrue(str(post.pub_date.day) in response.content)\\n\\n        # Check the link is marked up properly\\n        self.assertTrue('<a href=\\\"http://127.0.0.1:8000/\\\">my first blog post</a>' in response.content)\\n\")), mdx(\"p\", null, \"This is very similar to the previous tests, but fetches the absolute URL for the category, and ensures the category name and post content are shown. Now, let's run our new tests:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py test blogengine\\nCreating test database for alias 'default'...\\n...........EFF\\n======================================================================\\nERROR: test_category_page (blogengine.tests.PostViewTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 494, in test_category_page\\n    category_url = post.category.get_absolute_url()\\nAttributeError: 'Category' object has no attribute 'get_absolute_url'\\n\\n======================================================================\\nFAIL: test_index (blogengine.tests.PostViewTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 391, in test_index\\n    self.assertTrue(post.category.name in response.content)\\nAssertionError: False is not true\\n\\n======================================================================\\nFAIL: test_post_page (blogengine.tests.PostViewTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 446, in test_post_page\\n    self.assertTrue(post.category.name in response.content)\\nAssertionError: False is not true\\n\\n----------------------------------------------------------------------\\nRan 14 tests in 5.017s\\n\\nFAILED (failures=2, errors=1)\\nDestroying test database for alias 'default'...\\n\")), mdx(\"p\", null, \"Let's take a look at why they failed. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"test_category_page\"), \" failed because the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Category\"), \" object had no method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"get_absolute_url\"), \". So we need to implement one. To do so, we really need to add a slug field, like the posts already have. Ideally, we want this to be populated automatically, but with the option to create one manually. So, edit the models as follows:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"from django.db import models\\nfrom django.contrib.auth.models import User\\nfrom django.contrib.sites.models import Site\\nfrom django.utils.text import slugify\\n\\n# Create your models here.\\nclass Category(models.Model):\\n    name = models.CharField(max_length=200)\\n    description = models.TextField()\\n    slug = models.SlugField(max_length=40, unique=True, blank=True, null=True)\\n\\n    def save(self):\\n        if not self.slug:\\n            self.slug = slugify(unicode(self.name))\\n        super(Category, self).save()\\n\\n    def get_absolute_url(self):\\n        return \\\"/category/%s/\\\" % (self.slug)\\n\\n    def __unicode__(self):\\n        return self.name\\n\\n    class Meta:\\n        verbose_name_plural = 'categories'\\n    \\n\\nclass Post(models.Model):\\n    title = models.CharField(max_length=200)\\n    pub_date = models.DateTimeField()\\n    text = models.TextField()\\n    slug = models.SlugField(max_length=40, unique=True)\\n    author = models.ForeignKey(User)\\n    site = models.ForeignKey(Site)\\n    category = models.ForeignKey(Category, blank=True, null=True)\\n\\n    def get_absolute_url(self):\\n        return \\\"/%s/%s/%s/\\\" % (self.pub_date.year, self.pub_date.month, self.slug)\\n\\n    def __unicode__(self):\\n        return self.title\\n\\n    class Meta:\\n        ordering = [\\\"-pub_date\\\"]\\n\")), mdx(\"p\", null, \"We're adding the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"slug\"), \" attribute to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Category\"), \" model here. However, we're also overriding the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"save\"), \" method to detect if the slug is set, and if not, to create a slug using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"slugify\"), \" function, and set it as the category's slug. We also define an absolute URL for the category.\"), mdx(\"p\", null, \"Now, if you run the tests, they will fail because we haven't made the changes to the database. So, we use South again:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ python manage.py schemamigration --auto blogengine\\n\")), mdx(\"p\", null, \"Then run the migration:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ python manage.py migrate\\n\")), mdx(\"p\", null, \"Now, running our tests will show that the tables are in place, but we still have some work to do. The index and post pages don't show our categories, so we'll fix that. First, we'll fix our post list:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-django\"\n  }, \"{% extends \\\"blogengine/includes/base.html\\\" %}\\n\\n    {% load custom_markdown %}\\n\\n    {% block content %}\\n        {% for post in object_list %}\\n        <div class=\\\"post\\\">\\n        <h1><a href=\\\"{{ post.get_absolute_url }}\\\">{{ post.title }}</a></h1>\\n        <h3>{{ post.pub_date }}</h3>\\n        {{ post.text|custom_markdown }}\\n        </div>\\n        <a href=\\\"{{ post.category.get_absolute_url }}\\\">{{ post.category.name }}</a>\\n        {% endfor %}\\n\\n        {% if page_obj.has_previous %}\\n        <a href=\\\"/{{ page_obj.previous_page_number }}/\\\">Previous Page</a>\\n        {% endif %}\\n        {% if page_obj.has_next %}\\n        <a href=\\\"/{{ page_obj.next_page_number }}/\\\">Next Page</a>\\n        {% endif %}\\n\\n    {% endblock %}\\n\")), mdx(\"p\", null, \"Next, we'll take care of our post detail page:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-django\"\n  }, \"{% extends \\\"blogengine/includes/base.html\\\" %}\\n\\n    {% load custom_markdown %}\\n\\n    {% block content %}\\n        <div class=\\\"post\\\">\\n        <h1>{{ object.title }}</h1>\\n        <h3>{{ object.pub_date }}</h3>\\n        {{ object.text|custom_markdown }}\\n        <a href=\\\"{{ object.category.get_absolute_url }}\\\">{{ object.category.name }}</a>\\n\\n        <h4>Comments</h4>\\n        <div class=\\\"fb-comments\\\" data-href=\\\"http://{{ post.site }}{{ post.get_absolute_url }}\\\" data-width=\\\"470\\\" data-num-posts=\\\"10\\\"></div>\\n\\n        </div>\\n\\n    {% endblock %}\\n\")), mdx(\"p\", null, \"Note that in both cases we include a link to the category URL.\"), mdx(\"p\", null, \"Now, we should only have one failing test outstanding - the category page. For this, generic views aren't sufficient as we need to limit the queryset to only show those posts with a specific category. Fortunately, we can extend Django's generic views to add this functionality. First, we edit our URLconfs:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"from django.conf.urls import patterns, url\\nfrom django.views.generic import ListView, DetailView\\nfrom blogengine.models import Post, Category\\nfrom blogengine.views import CategoryListView\\n\\nurlpatterns = patterns('',\\n    # Index\\n    url(r'^(?P<page>\\\\d+)?/?$', ListView.as_view(\\n        model=Post,\\n        paginate_by=5,\\n        )),\\n\\n    # Individual posts\\n    url(r'^(?P<pub_date__year>\\\\d{4})/(?P<pub_date__month>\\\\d{1,2})/(?P<slug>[a-zA-Z0-9-]+)/?$', DetailView.as_view(\\n        model=Post,\\n        )),\\n\\n    # Categories\\n    url(r'^category/(?P<slug>[a-zA-Z0-9-]+)/?$', CategoryListView.as_view(\\n        paginate_by=5,\\n        model=Category,\\n        )),\\n)\\n\")), mdx(\"p\", null, \"Note we import a new view from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"blogengine.views\"), \" called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CategoryListView\"), \". Next, we create that listview:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"from django.shortcuts import render\\nfrom django.views.generic import ListView\\nfrom blogengine.models import Category, Post\\n\\n# Create your views here.\\nclass CategoryListView(ListView):\\n    def get_queryset(self):\\n        slug = self.kwargs['slug']\\n        try:\\n            category = Category.objects.get(slug=slug)\\n            return Post.objects.filter(category=category)\\n        except Category.DoesNotExist:\\n            return Post.objects.none()\\n\")), mdx(\"p\", null, \"This is quite simple. We import the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ListView\"), \", as well as our models. Then we extend \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ListView\"), \" by getting the slug from the request, fetching the appropriate category, and returning only those posts that have that category. If the category does not exist, we return the empty \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Post\"), \" object list. We haven't had to set the template manually as it is inherited from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ListView\"), \".\"), mdx(\"p\", null, \"If you run the tests, they should now pass:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"Creating test database for alias 'default'...\\n..............\\n----------------------------------------------------------------------\\nRan 14 tests in 5.083s\\n\\nOK\\nDestroying test database for alias 'default'...\\n\")), mdx(\"p\", null, \"So let's commit our changes:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ git add blogengine/ templates/\\n$ git commit -m 'Categories are now shown'\\n\")), mdx(\"h2\", null, \"Tags\"), mdx(\"p\", null, \"Tags are fairly similar to categories, but more complex. The relationship they have is called \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"many-to-many\"), \" - in other words, a tag can be applied to many posts, and one post can have many tags. This is more difficult to model with a relational database. The usual way to do so is to create an intermediate table between the posts and tags, to identify mappings between the two. Fortunately, Django makes this quite easy.\"), mdx(\"p\", null, \"Let's write the tests for our tagging system. As with the categories, we'll write the tests for creating and editing them first, and add in tests for them being visible later. First we'll create a test for creating a new tag object:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"    def test_create_tag(self):\\n        # Create the tag\\n        tag = Tag()\\n\\n        #\\xA0Add attributes\\n        tag.name = 'python'\\n        tag.description = 'The Python programming language'\\n\\n        # Save it\\n        tag.save()\\n\\n        # Check we can find it\\n        all_tags = Tag.objects.all()\\n        self.assertEquals(len(all_tags), 1)\\n        only_tag = all_tags[0]\\n        self.assertEquals(only_tag, tag)\\n\\n        # Check attributes\\n        self.assertEquals(only_tag.name, 'python')\\n        self.assertEquals(only_tag.description, 'The Python programming language')\\n\")), mdx(\"p\", null, \"Next, we'll amend the test for creating a post to include tags:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"    def test_create_post(self):\\n        # Create the category\\n        category = Category()\\n        category.name = 'python'\\n        category.description = 'The Python programming language'\\n        category.save()\\n\\n        # Create the tag\\n        tag = Tag()\\n        tag.name = 'python'\\n        tag.description = 'The Python programming language'\\n        tag.save()\\n\\n        # Create the author\\n        author = User.objects.create_user('testuser', 'user@example.com', 'password')\\n        author.save()\\n\\n        # Create the site\\n        site = Site()\\n        site.name = 'example.com'\\n        site.domain = 'example.com'\\n        site.save()\\n\\n        # Create the post\\n        post = Post()\\n\\n        # Set the attributes\\n        post.title = 'My first post'\\n        post.text = 'This is my first blog post'\\n        post.slug = 'my-first-post'\\n        post.pub_date = timezone.now()\\n        post.author = author\\n        post.site = site\\n        post.category = category\\n\\n        # Save it\\n        post.save()\\n\\n        # Add the tag\\n        post.tags.add(tag)\\n        post.save()\\n\\n        # Check we can find it\\n        all_posts = Post.objects.all()\\n        self.assertEquals(len(all_posts), 1)\\n        only_post = all_posts[0]\\n        self.assertEquals(only_post, post)\\n\\n        # Check attributes\\n        self.assertEquals(only_post.title, 'My first post')\\n        self.assertEquals(only_post.text, 'This is my first blog post')\\n        self.assertEquals(only_post.slug, 'my-first-post')\\n        self.assertEquals(only_post.site.name, 'example.com')\\n        self.assertEquals(only_post.site.domain, 'example.com')\\n        self.assertEquals(only_post.pub_date.day, post.pub_date.day)\\n        self.assertEquals(only_post.pub_date.month, post.pub_date.month)\\n        self.assertEquals(only_post.pub_date.year, post.pub_date.year)\\n        self.assertEquals(only_post.pub_date.hour, post.pub_date.hour)\\n        self.assertEquals(only_post.pub_date.minute, post.pub_date.minute)\\n        self.assertEquals(only_post.pub_date.second, post.pub_date.second)\\n        self.assertEquals(only_post.author.username, 'testuser')\\n        self.assertEquals(only_post.author.email, 'user@example.com')\\n        self.assertEquals(only_post.category.name, 'python')\\n        self.assertEquals(only_post.category.description, 'The Python programming language')\\n\\n        #\\xA0Check tags\\n        post_tags = only_post.tags.all()\\n        self.assertEquals(len(post_tags), 1)\\n        only_post_tag = post_tags[0]\\n        self.assertEquals(only_post_tag, tag)\\n        self.assertEquals(only_post_tag.name, 'python')\\n        self.assertEquals(only_post_tag.description, 'The Python programming language')\\n\")), mdx(\"p\", null, \"Note the difference in how we apply the tags. Because a post can have more than one tag, we can't just define \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"post.tag\"), \" in the same way. Instead, we have \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"post.tags\"), \", which you can think of as a list, and we use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"add\"), \" method to add a new tag. Note also that the post must already exist before we can add a tag.\"), mdx(\"p\", null, \"We also need to create acceptance tests for creating, editing and deleting tags:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"    def test_create_tag(self):\\n        # Log in\\n        self.client.login(username='bobsmith', password=\\\"password\\\")\\n\\n        # Check response code\\n        response = self.client.get('/admin/blogengine/tag/add/')\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Create the new tag\\n        response = self.client.post('/admin/blogengine/tag/add/', {\\n            'name': 'python',\\n            'description': 'The Python programming language'\\n            },\\n            follow=True\\n        )\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check added successfully\\n        self.assertTrue('added successfully' in response.content)\\n\\n        # Check new tag now in database\\n        all_tags = Tag.objects.all()\\n        self.assertEquals(len(all_tags), 1)\\n\\n    def test_edit_tag(self):\\n        # Create the tag\\n        tag = Tag()\\n        tag.name = 'python'\\n        tag.description = 'The Python programming language'\\n        tag.save()\\n\\n        # Log in\\n        self.client.login(username='bobsmith', password=\\\"password\\\")\\n\\n        # Edit the tag\\n        response = self.client.post('/admin/blogengine/tag/1/', {\\n            'name': 'perl',\\n            'description': 'The Perl programming language'\\n            }, follow=True)\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check changed successfully\\n        self.assertTrue('changed successfully' in response.content)\\n\\n        # Check tag amended\\n        all_tags = Tag.objects.all()\\n        self.assertEquals(len(all_tags), 1)\\n        only_tag = all_tags[0]\\n        self.assertEquals(only_tag.name, 'perl')\\n        self.assertEquals(only_tag.description, 'The Perl programming language')\\n\\n    def test_delete_tag(self):\\n        # Create the tag\\n        tag = Tag()\\n        tag.name = 'python'\\n        tag.description = 'The Python programming language'\\n        tag.save()\\n\\n        # Log in\\n        self.client.login(username='bobsmith', password=\\\"password\\\")\\n\\n        # Delete the tag\\n        response = self.client.post('/admin/blogengine/tag/1/delete/', {\\n            'post': 'yes'\\n        }, follow=True)\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check deleted successfully\\n        self.assertTrue('deleted successfully' in response.content)\\n\\n        # Check tag deleted\\n        all_tags = Tag.objects.all()\\n        self.assertEquals(len(all_tags), 0)\\n\")), mdx(\"p\", null, \"These tests are virtually identical to those for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Category\"), \" objects, as we plan for our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tag\"), \" objects to be very similar. Finally, we need to amend the acceptance tests for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Post\"), \" objects to include a tag:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"    def test_create_post(self):\\n        # Create the category\\n        category = Category()\\n        category.name = 'python'\\n        category.description = 'The Python programming language'\\n        category.save()\\n\\n        # Create the tag\\n        tag = Tag()\\n        tag.name = 'python'\\n        tag.description = 'The Python programming language'\\n        tag.save()\\n\\n        # Log in\\n        self.client.login(username='bobsmith', password=\\\"password\\\")\\n\\n        # Check response code\\n        response = self.client.get('/admin/blogengine/post/add/')\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Create the new post\\n        response = self.client.post('/admin/blogengine/post/add/', {\\n            'title': 'My first post',\\n            'text': 'This is my first post',\\n            'pub_date_0': '2013-12-28',\\n            'pub_date_1': '22:00:04',\\n            'slug': 'my-first-post',\\n            'site': '1',\\n            'category': '1',\\n            'tags': '1'\\n        },\\n        follow=True\\n        )\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check added successfully\\n        self.assertTrue('added successfully' in response.content)\\n\\n        # Check new post now in database\\n        all_posts = Post.objects.all()\\n        self.assertEquals(len(all_posts), 1)\\n\\n    def test_edit_post(self):\\n        # Create the category\\n        category = Category()\\n        category.name = 'python'\\n        category.description = 'The Python programming language'\\n        category.save()\\n\\n        # Create the tag\\n        tag = Tag()\\n        tag.name = 'python'\\n        tag.description = 'The Python programming language'\\n        tag.save()\\n\\n        # Create the author\\n        author = User.objects.create_user('testuser', 'user@example.com', 'password')\\n        author.save()\\n\\n        # Create the site\\n        site = Site()\\n        site.name = 'example.com'\\n        site.domain = 'example.com'\\n        site.save()\\n        \\n        # Create the post\\n        post = Post()\\n        post.title = 'My first post'\\n        post.text = 'This is my first blog post'\\n        post.slug = 'my-first-post'\\n        post.pub_date = timezone.now()\\n        post.author = author\\n        post.site = site\\n        post.save()\\n        post.tags.add(tag)\\n        post.save()\\n\\n        # Log in\\n        self.client.login(username='bobsmith', password=\\\"password\\\")\\n\\n        # Edit the post\\n        response = self.client.post('/admin/blogengine/post/1/', {\\n            'title': 'My second post',\\n            'text': 'This is my second blog post',\\n            'pub_date_0': '2013-12-28',\\n            'pub_date_1': '22:00:04',\\n            'slug': 'my-second-post',\\n            'site': '1',\\n            'category': '1',\\n            'tags': '1'\\n        },\\n        follow=True\\n        )\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check changed successfully\\n        self.assertTrue('changed successfully' in response.content)\\n\\n        # Check post amended\\n        all_posts = Post.objects.all()\\n        self.assertEquals(len(all_posts), 1)\\n        only_post = all_posts[0]\\n        self.assertEquals(only_post.title, 'My second post')\\n        self.assertEquals(only_post.text, 'This is my second blog post')\\n\\n    def test_delete_post(self):\\n        # Create the category\\n        category = Category()\\n        category.name = 'python'\\n        category.description = 'The Python programming language'\\n        category.save()\\n\\n        # Create the tag\\n        tag = Tag()\\n        tag.name = 'python'\\n        tag.description = 'The Python programming language'\\n        tag.save()\\n\\n        # Create the author\\n        author = User.objects.create_user('testuser', 'user@example.com', 'password')\\n        author.save()\\n\\n        # Create the site\\n        site = Site()\\n        site.name = 'example.com'\\n        site.domain = 'example.com'\\n        site.save()\\n        \\n        # Create the post\\n        post = Post()\\n        post.title = 'My first post'\\n        post.text = 'This is my first blog post'\\n        post.slug = 'my-first-post'\\n        post.pub_date = timezone.now()\\n        post.site = site\\n        post.author = author\\n        post.category = category\\n        post.save()\\n        post.tags.add(tag)\\n        post.save()\\n\\n        # Check new post saved\\n        all_posts = Post.objects.all()\\n        self.assertEquals(len(all_posts), 1)\\n\\n        # Log in\\n        self.client.login(username='bobsmith', password=\\\"password\\\")\\n\\n        # Delete the post\\n        response = self.client.post('/admin/blogengine/post/1/delete/', {\\n            'post': 'yes'\\n        }, follow=True)\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check deleted successfully\\n        self.assertTrue('deleted successfully' in response.content)\\n\\n        # Check post deleted\\n        all_posts = Post.objects.all()\\n        self.assertEquals(len(all_posts), 0)\\n\")), mdx(\"p\", null, \"Here we're just adding tags to our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Post\"), \" objects.\"), mdx(\"p\", null, \"Now it's time to run our tests to make sure they fail as expected:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py test blogengine\\nCreating test database for alias 'default'...\\nE\\n======================================================================\\nERROR: blogengine.tests (unittest.loader.ModuleImportFailure)\\n----------------------------------------------------------------------\\nImportError: Failed to import test module: blogengine.tests\\nTraceback (most recent call last):\\n  File \\\"/usr/local/Cellar/python/2.7.6/Frameworks/Python.framework/Versions/2.7/lib/python2.7/unittest/loader.py\\\", line 254, in _find_tests\\n    module = self._get_module_from_name(name)\\n  File \\\"/usr/local/Cellar/python/2.7.6/Frameworks/Python.framework/Versions/2.7/lib/python2.7/unittest/loader.py\\\", line 232, in _get_module_from_name\\n    __import__(name)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 3, in <module>\\n    from blogengine.models import Post, Category, Tag\\nImportError: cannot import name Tag\\n\\n\\n----------------------------------------------------------------------\\nRan 1 test in 0.000s\\n\\nFAILED (errors=1)\\nDestroying test database for alias 'default'...\\n\")), mdx(\"p\", null, \"So here we can't import our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tag\"), \" model, because we haven't created it. So, we'll do that:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"class Tag(models.Model):\\n    name = models.CharField(max_length=200)\\n    description = models.TextField()\\n    slug = models.SlugField(max_length=40, unique=True, blank=True, null=True)\\n\\n    def save(self):\\n        if not self.slug:\\n            self.slug = slugify(unicode(self.name))\\n        super(Tag, self).save()\\n\\n    def get_absolute_url(self):\\n        return \\\"/tag/%s/\\\" % (self.slug)\\n\\n    def __unicode__(self):\\n        return self.name\\n\")), mdx(\"p\", null, \"Our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tag\"), \" model is very much like our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Category\"), \" model, but we don't need to change the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"verbose_name_plural\"), \" value, and we amend the absolute URL to show it as a tag rather than a category.\"), mdx(\"p\", null, \"We also need to amend our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Post\"), \" model to include a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tags\"), \" field:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"class Post(models.Model):\\n    title = models.CharField(max_length=200)\\n    pub_date = models.DateTimeField()\\n    text = models.TextField()\\n    slug = models.SlugField(max_length=40, unique=True)\\n    author = models.ForeignKey(User)\\n    site = models.ForeignKey(Site)\\n    category = models.ForeignKey(Category, blank=True, null=True)\\n    tags = models.ManyToManyField(Tag)\\n\\n    def get_absolute_url(self):\\n        return \\\"/%s/%s/%s/\\\" % (self.pub_date.year, self.pub_date.month, self.slug)\\n\\n    def __unicode__(self):\\n        return self.title\\n\\n    class Meta:\\n        ordering = [\\\"-pub_date\\\"]\\n\")), mdx(\"p\", null, \"Note that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tags\"), \" is a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ManyToManyField\"), \", and we pass through the model we wish to use, much like we did with the categories. The difference is that one tag can be applied to many posts and a post can have many tags, so we need an intermediate database table to handle the relationship between the two. With Django's ORM we can handle this quickly and easily.\"), mdx(\"p\", null, \"Run our tests and they should still fail:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py test blogengine\\nCreating test database for alias 'default'...\\n.EE.EF.EE.EE......\\n======================================================================\\nERROR: test_create_post (blogengine.tests.PostTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 64, in test_create_post\\n    tag.save()\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/models.py\\\", line 34, in save\\n    super(Tag, self).save()\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 545, in save\\n    force_update=force_update, update_fields=update_fields)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 573, in save_base\\n    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 654, in _save_table\\n    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 687, in _do_insert\\n    using=using, raw=raw)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py\\\", line 232, in _insert\\n    return insert_query(self.model, objs, fields, **kwargs)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py\\\", line 1511, in insert_query\\n    return query.get_compiler(using=using).execute_sql(return_id)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py\\\", line 898, in execute_sql\\n    cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py\\\", line 53, in execute\\n    return self.cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py\\\", line 99, in __exit__\\n    six.reraise(dj_exc_type, dj_exc_value, traceback)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py\\\", line 53, in execute\\n    return self.cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py\\\", line 450, in execute\\n    return Database.Cursor.execute(self, query, params)\\nOperationalError: no such table: blogengine_tag\\n\\n======================================================================\\nERROR: test_create_tag (blogengine.tests.PostTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 41, in test_create_tag\\n    tag.save()\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/models.py\\\", line 34, in save\\n    super(Tag, self).save()\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 545, in save\\n    force_update=force_update, update_fields=update_fields)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 573, in save_base\\n    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 654, in _save_table\\n    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 687, in _do_insert\\n    using=using, raw=raw)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py\\\", line 232, in _insert\\n    return insert_query(self.model, objs, fields, **kwargs)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py\\\", line 1511, in insert_query\\n    return query.get_compiler(using=using).execute_sql(return_id)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py\\\", line 898, in execute_sql\\n    cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py\\\", line 53, in execute\\n    return self.cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py\\\", line 99, in __exit__\\n    six.reraise(dj_exc_type, dj_exc_value, traceback)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py\\\", line 53, in execute\\n    return self.cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py\\\", line 450, in execute\\n    return Database.Cursor.execute(self, query, params)\\nOperationalError: no such table: blogengine_tag\\n\\n======================================================================\\nERROR: test_create_post (blogengine.tests.AdminTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 335, in test_create_post\\n    tag.save()\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/models.py\\\", line 34, in save\\n    super(Tag, self).save()\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 545, in save\\n    force_update=force_update, update_fields=update_fields)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 573, in save_base\\n    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 654, in _save_table\\n    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 687, in _do_insert\\n    using=using, raw=raw)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py\\\", line 232, in _insert\\n    return insert_query(self.model, objs, fields, **kwargs)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py\\\", line 1511, in insert_query\\n    return query.get_compiler(using=using).execute_sql(return_id)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py\\\", line 898, in execute_sql\\n    cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py\\\", line 53, in execute\\n    return self.cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py\\\", line 99, in __exit__\\n    six.reraise(dj_exc_type, dj_exc_value, traceback)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py\\\", line 53, in execute\\n    return self.cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py\\\", line 450, in execute\\n    return Database.Cursor.execute(self, query, params)\\nOperationalError: no such table: blogengine_tag\\n\\n======================================================================\\nERROR: test_delete_post (blogengine.tests.AdminTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 440, in test_delete_post\\n    tag.save()\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/models.py\\\", line 34, in save\\n    super(Tag, self).save()\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 545, in save\\n    force_update=force_update, update_fields=update_fields)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 573, in save_base\\n    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 654, in _save_table\\n    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 687, in _do_insert\\n    using=using, raw=raw)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py\\\", line 232, in _insert\\n    return insert_query(self.model, objs, fields, **kwargs)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py\\\", line 1511, in insert_query\\n    return query.get_compiler(using=using).execute_sql(return_id)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py\\\", line 898, in execute_sql\\n    cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py\\\", line 53, in execute\\n    return self.cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py\\\", line 99, in __exit__\\n    six.reraise(dj_exc_type, dj_exc_value, traceback)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py\\\", line 53, in execute\\n    return self.cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py\\\", line 450, in execute\\n    return Database.Cursor.execute(self, query, params)\\nOperationalError: no such table: blogengine_tag\\n\\n======================================================================\\nERROR: test_delete_tag (blogengine.tests.AdminTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 306, in test_delete_tag\\n    tag.save()\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/models.py\\\", line 34, in save\\n    super(Tag, self).save()\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 545, in save\\n    force_update=force_update, update_fields=update_fields)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 573, in save_base\\n    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 654, in _save_table\\n    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 687, in _do_insert\\n    using=using, raw=raw)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py\\\", line 232, in _insert\\n    return insert_query(self.model, objs, fields, **kwargs)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py\\\", line 1511, in insert_query\\n    return query.get_compiler(using=using).execute_sql(return_id)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py\\\", line 898, in execute_sql\\n    cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py\\\", line 53, in execute\\n    return self.cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py\\\", line 99, in __exit__\\n    six.reraise(dj_exc_type, dj_exc_value, traceback)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py\\\", line 53, in execute\\n    return self.cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py\\\", line 450, in execute\\n    return Database.Cursor.execute(self, query, params)\\nOperationalError: no such table: blogengine_tag\\n\\n======================================================================\\nERROR: test_edit_post (blogengine.tests.AdminTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 377, in test_edit_post\\n    tag.save()\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/models.py\\\", line 34, in save\\n    super(Tag, self).save()\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 545, in save\\n    force_update=force_update, update_fields=update_fields)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 573, in save_base\\n    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 654, in _save_table\\n    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 687, in _do_insert\\n    using=using, raw=raw)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py\\\", line 232, in _insert\\n    return insert_query(self.model, objs, fields, **kwargs)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py\\\", line 1511, in insert_query\\n    return query.get_compiler(using=using).execute_sql(return_id)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py\\\", line 898, in execute_sql\\n    cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py\\\", line 53, in execute\\n    return self.cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py\\\", line 99, in __exit__\\n    six.reraise(dj_exc_type, dj_exc_value, traceback)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py\\\", line 53, in execute\\n    return self.cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py\\\", line 450, in execute\\n    return Database.Cursor.execute(self, query, params)\\nOperationalError: no such table: blogengine_tag\\n\\n======================================================================\\nERROR: test_edit_tag (blogengine.tests.AdminTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 279, in test_edit_tag\\n    tag.save()\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/models.py\\\", line 34, in save\\n    super(Tag, self).save()\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 545, in save\\n    force_update=force_update, update_fields=update_fields)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 573, in save_base\\n    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 654, in _save_table\\n    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py\\\", line 687, in _do_insert\\n    using=using, raw=raw)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py\\\", line 232, in _insert\\n    return insert_query(self.model, objs, fields, **kwargs)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py\\\", line 1511, in insert_query\\n    return query.get_compiler(using=using).execute_sql(return_id)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py\\\", line 898, in execute_sql\\n    cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py\\\", line 53, in execute\\n    return self.cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py\\\", line 99, in __exit__\\n    six.reraise(dj_exc_type, dj_exc_value, traceback)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py\\\", line 53, in execute\\n    return self.cursor.execute(sql, params)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py\\\", line 450, in execute\\n    return Database.Cursor.execute(self, query, params)\\nOperationalError: no such table: blogengine_tag\\n\\n======================================================================\\nFAIL: test_create_tag (blogengine.tests.AdminTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 256, in test_create_tag\\n    self.assertEquals(response.status_code, 200)\\nAssertionError: 404 != 200\\n\\n----------------------------------------------------------------------\\nRan 18 tests in 3.981s\\n\\nFAILED (failures=1, errors=7)\\nDestroying test database for alias 'default'...\\n\")), mdx(\"p\", null, \"Again, we can easily see why they failed - the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"blogengine_tag\"), \" table is not in place. So let's create and run our migrations to fix that:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ python manage.py schemamigration --auto blogengine\\n$ python manage.py migrate\\n\")), mdx(\"p\", null, \"Now, we run our tests again:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py test blogengine\\nCreating test database for alias 'default'...\\n.....F..F..F......\\n======================================================================\\nFAIL: test_create_tag (blogengine.tests.AdminTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 256, in test_create_tag\\n    self.assertEquals(response.status_code, 200)\\nAssertionError: 404 != 200\\n\\n======================================================================\\nFAIL: test_delete_tag (blogengine.tests.AdminTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 315, in test_delete_tag\\n    self.assertEquals(response.status_code, 200)\\nAssertionError: 404 != 200\\n\\n======================================================================\\nFAIL: test_edit_tag (blogengine.tests.AdminTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 289, in test_edit_tag\\n    self.assertEquals(response.status_code, 200)\\nAssertionError: 404 != 200\\n\\n----------------------------------------------------------------------\\nRan 18 tests in 5.124s\\n\\nFAILED (failures=3)\\nDestroying test database for alias 'default'...\\n\")), mdx(\"p\", null, \"We can't yet amend our tags in the admin, because we haven't registered them. So we do that next:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"import models\\nfrom django.contrib import admin\\nfrom django.contrib.auth.models import User\\n\\nclass PostAdmin(admin.ModelAdmin):\\n    prepopulated_fields = {\\\"slug\\\": (\\\"title\\\",)}\\n    exclude = ('author',)\\n\\n    def save_model(self, request, obj, form, change):\\n        obj.author = request.user\\n        obj.save()\\n\\nadmin.site.register(models.Category)\\nadmin.site.register(models.Tag)\\nadmin.site.register(models.Post, PostAdmin)\\n\")), mdx(\"p\", null, \"Now, if we run our tests, they should pass:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py test blogengine\\nCreating test database for alias 'default'...\\n..................\\n----------------------------------------------------------------------\\nRan 18 tests in 5.444s\\n\\nOK\\nDestroying test database for alias 'default'...\\n\")), mdx(\"p\", null, \"Time to commit our changes:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ git add blogengine/\\n$ git commit -m 'Implemented tags'\\n\")), mdx(\"p\", null, \"Now, like with the categories beforehand, we want to be able to show the tags applied to a post at the base of it, and list all posts for a specific tag. So, first of all, we'll amend our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PostViewTest\"), \" class to check for the tags:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"class PostViewTest(BaseAcceptanceTest):\\n    def test_index(self):\\n        # Create the category\\n        category = Category()\\n        category.name = 'python'\\n        category.description = 'The Python programming language'\\n        category.save()\\n\\n        # Create the tag\\n        tag = Tag()\\n        tag.name = 'perl'\\n        tag.description = 'The Perl programming language'\\n        tag.save()\\n\\n        # Create the author\\n        author = User.objects.create_user('testuser', 'user@example.com', 'password')\\n        author.save()\\n\\n        # Create the site\\n        site = Site()\\n        site.name = 'example.com'\\n        site.domain = 'example.com'\\n        site.save()\\n\\n        # Create the post\\n        post = Post()\\n        post.title = 'My first post'\\n        post.text = 'This is [my first blog post](http://127.0.0.1:8000/)'\\n        post.slug = 'my-first-post'\\n        post.pub_date = timezone.now()\\n        post.author = author\\n        post.site = site\\n        post.category = category\\n        post.save()\\n        post.tags.add(tag)\\n\\n        # Check new post saved\\n        all_posts = Post.objects.all()\\n        self.assertEquals(len(all_posts), 1)\\n\\n        # Fetch the index\\n        response = self.client.get('/')\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check the post title is in the response\\n        self.assertTrue(post.title in response.content)\\n\\n        # Check the post text is in the response\\n        self.assertTrue(markdown.markdown(post.text) in response.content)\\n\\n        # Check the post category is in the response\\n        self.assertTrue(post.category.name in response.content)\\n\\n        # Check the post tag is in the response\\n        post_tag = all_posts[0].tags.all()[0]\\n        self.assertTrue(post_tag.name in response.content)\\n\\n        # Check the post date is in the response\\n        self.assertTrue(str(post.pub_date.year) in response.content)\\n        self.assertTrue(post.pub_date.strftime('%b') in response.content)\\n        self.assertTrue(str(post.pub_date.day) in response.content)\\n\\n        # Check the link is marked up properly\\n        self.assertTrue('<a href=\\\"http://127.0.0.1:8000/\\\">my first blog post</a>' in response.content)\\n\\n    def test_post_page(self):\\n        # Create the category\\n        category = Category()\\n        category.name = 'python'\\n        category.description = 'The Python programming language'\\n        category.save()\\n\\n        # Create the tag\\n        tag = Tag()\\n        tag.name = 'perl'\\n        tag.description = 'The Perl programming language'\\n        tag.save()\\n\\n        # Create the author\\n        author = User.objects.create_user('testuser', 'user@example.com', 'password')\\n        author.save()\\n\\n        # Create the site\\n        site = Site()\\n        site.name = 'example.com'\\n        site.domain = 'example.com'\\n        site.save()\\n\\n        # Create the post\\n        post = Post()\\n        post.title = 'My first post'\\n        post.text = 'This is [my first blog post](http://127.0.0.1:8000/)'\\n        post.slug = 'my-first-post'\\n        post.pub_date = timezone.now()\\n        post.author = author\\n        post.site = site\\n        post.category = category\\n        post.save()\\n        post.tags.add(tag)\\n        post.save()\\n\\n        # Check new post saved\\n        all_posts = Post.objects.all()\\n        self.assertEquals(len(all_posts), 1)\\n        only_post = all_posts[0]\\n        self.assertEquals(only_post, post)\\n\\n        # Get the post URL\\n        post_url = only_post.get_absolute_url()\\n\\n        # Fetch the post\\n        response = self.client.get(post_url)\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check the post title is in the response\\n        self.assertTrue(post.title in response.content)\\n\\n        # Check the post category is in the response\\n        self.assertTrue(post.category.name in response.content)\\n\\n        # Check the post tag is in the response\\n        post_tag = all_posts[0].tags.all()[0]\\n        self.assertTrue(post_tag.name in response.content)\\n\\n        # Check the post text is in the response\\n        self.assertTrue(markdown.markdown(post.text) in response.content)\\n\\n        # Check the post date is in the response\\n        self.assertTrue(str(post.pub_date.year) in response.content)\\n        self.assertTrue(post.pub_date.strftime('%b') in response.content)\\n        self.assertTrue(str(post.pub_date.day) in response.content)\\n\\n        # Check the link is marked up properly\\n        self.assertTrue('<a href=\\\"http://127.0.0.1:8000/\\\">my first blog post</a>' in response.content)\\n\")), mdx(\"p\", null, \"We create a tag near the top, and check for the text in the page (note that to avoid false positives from the categories, we set the name of the tags to something different). We do this on both the index and post pages.\"), mdx(\"p\", null, \"We also need to put a test in place for the tag-specific page:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"    def test_tag_page(self):\\n        # Create the tag\\n        tag = Tag()\\n        tag.name = 'python'\\n        tag.description = 'The Python programming language'\\n        tag.save()\\n\\n        # Create the author\\n        author = User.objects.create_user('testuser', 'user@example.com', 'password')\\n        author.save()\\n\\n        # Create the site\\n        site = Site()\\n        site.name = 'example.com'\\n        site.domain = 'example.com'\\n        site.save()\\n\\n        # Create the post\\n        post = Post()\\n        post.title = 'My first post'\\n        post.text = 'This is [my first blog post](http://127.0.0.1:8000/)'\\n        post.slug = 'my-first-post'\\n        post.pub_date = timezone.now()\\n        post.author = author\\n        post.site = site\\n        post.save()\\n        post.tags.add(tag)\\n\\n        # Check new post saved\\n        all_posts = Post.objects.all()\\n        self.assertEquals(len(all_posts), 1)\\n        only_post = all_posts[0]\\n        self.assertEquals(only_post, post)\\n\\n        # Get the tag URL\\n        tag_url = post.tags.all()[0].get_absolute_url()\\n\\n        # Fetch the tag\\n        response = self.client.get(tag_url)\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check the tag name is in the response\\n        self.assertTrue(post.tags.all()[0].name in response.content)\\n\\n        # Check the post text is in the response\\n        self.assertTrue(markdown.markdown(post.text) in response.content)\\n\\n        # Check the post date is in the response\\n        self.assertTrue(str(post.pub_date.year) in response.content)\\n        self.assertTrue(post.pub_date.strftime('%b') in response.content)\\n        self.assertTrue(str(post.pub_date.day) in response.content)\\n\\n        # Check the link is marked up properly\\n        self.assertTrue('<a href=\\\"http://127.0.0.1:8000/\\\">my first blog post</a>' in response.content)\\n\")), mdx(\"p\", null, \"Again, this is virtually identical to the category page, adjusted to allow for the fact that we need to get a specific tag. If we now run our tests, they should fail as expected:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py test blogengine\\nCreating test database for alias 'default'...\\n................FFF\\n======================================================================\\nFAIL: test_index (blogengine.tests.PostViewTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 540, in test_index\\n    self.assertTrue(post_tag.name in response.content)\\nAssertionError: False is not true\\n\\n======================================================================\\nFAIL: test_post_page (blogengine.tests.PostViewTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 607, in test_post_page\\n    self.assertTrue(post_tag.name in response.content)\\nAssertionError: False is not true\\n\\n======================================================================\\nFAIL: test_tag_page (blogengine.tests.PostViewTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 714, in test_tag_page\\n    self.assertEquals(response.status_code, 200)\\nAssertionError: 404 != 200\\n\\n----------------------------------------------------------------------\\nRan 19 tests in 5.375s\\n\\nFAILED (failures=3)\\nDestroying test database for alias 'default'...\\n\")), mdx(\"p\", null, \"So, we need to implement the following things:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Show tags on the index page\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Show tags on the post pages\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create a page listing the posts with a specific tag\")), mdx(\"p\", null, \"As we have seen already with the categories, this is actually quite simple. First, we'll sort out the tags on the index page:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-django\"\n  }, \"{% extends \\\"blogengine/includes/base.html\\\" %}\\n\\n    {% load custom_markdown %}\\n\\n    {% block content %}\\n        {% for post in object_list %}\\n        <div class=\\\"post\\\">\\n        <h1><a href=\\\"{{ post.get_absolute_url }}\\\">{{ post.title }}</a></h1>\\n        <h3>{{ post.pub_date }}</h3>\\n        {{ post.text|custom_markdown }}\\n        </div>\\n        <a href=\\\"{{ post.category.get_absolute_url }}\\\">{{ post.category.name }}</a>\\n        {% for tag in post.tags.all %}\\n        <a href=\\\"{{ tag.get_absolute_url }}\\\">{{ tag.name }}</a>\\n        {% endfor %}\\n        {% endfor %}\\n\\n        {% if page_obj.has_previous %}\\n        <a href=\\\"/{{ page_obj.previous_page_number }}/\\\">Previous Page</a>\\n        {% endif %}\\n        {% if page_obj.has_next %}\\n        <a href=\\\"/{{ page_obj.next_page_number }}/\\\">Next Page</a>\\n        {% endif %}\\n\\n    {% endblock %}\\n\")), mdx(\"p\", null, \"This is quite simple. We retrieve all the tags with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"post.tags.all\"), \" and loop through them. We then do basically the same for the individual post pages:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-django\"\n  }, \"{% extends \\\"blogengine/includes/base.html\\\" %}\\n\\n    {% load custom_markdown %}\\n\\n    {% block content %}\\n        <div class=\\\"post\\\">\\n        <h1>{{ object.title }}</h1>\\n        <h3>{{ object.pub_date }}</h3>\\n        {{ object.text|custom_markdown }}\\n        <a href=\\\"{{ object.category.get_absolute_url }}\\\">{{ object.category.name }}</a>\\n        {% for tag in post.tags.all %}\\n        <a href=\\\"{{ tag.get_absolute_url }}\\\">{{ tag.name }}</a>\\n        {% endfor %}\\n\\n        <h4>Comments</h4>\\n        <div class=\\\"fb-comments\\\" data-href=\\\"http://{{ post.site }}{{ post.get_absolute_url }}\\\" data-width=\\\"470\\\" data-num-posts=\\\"10\\\"></div>\\n\\n        </div>\\n\\n    {% endblock %}\\n\\n\")), mdx(\"p\", null, \"This should resolve two of our outstanding tests:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py test blogengine\\nCreating test database for alias 'default'...\\n..................F\\n======================================================================\\nFAIL: test_tag_page (blogengine.tests.PostViewTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 714, in test_tag_page\\n    self.assertEquals(response.status_code, 200)\\nAssertionError: 404 != 200\\n\\n----------------------------------------------------------------------\\nRan 19 tests in 5.440s\\n\\nFAILED (failures=1)\\nDestroying test database for alias 'default'...\\n\")), mdx(\"p\", null, \"The final test is for the tag pages. As we saw with the categories, we can limit our querysets on specific pages. So we'll extend the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ListView\"), \" generic view again to handle tags:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"from django.shortcuts import render\\nfrom django.views.generic import ListView\\nfrom blogengine.models import Category, Post, Tag\\n\\n# Create your views here.\\nclass CategoryListView(ListView):\\n    def get_queryset(self):\\n        slug = self.kwargs['slug']\\n        try:\\n            category = Category.objects.get(slug=slug)\\n            return Post.objects.filter(category=category)\\n        except Category.DoesNotExist:\\n            return Post.objects.none()\\n\\n\\nclass TagListView(ListView):\\n    def get_queryset(self):\\n        slug = self.kwargs['slug']\\n        try:\\n            tag = Tag.objects.get(slug=slug)\\n            return tag.post_set.all()\\n        except Tag.DoesNotExist:\\n            return Post.objects.none()\\n\")), mdx(\"p\", null, \"Note that here, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tag\"), \" objects have access to their assigned \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Post\"), \" objects - we just use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"post_set\"), \" to refer to them and get all of the posts associated with that tag. Next we'll add the URLconfs:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"from django.conf.urls import patterns, url\\nfrom django.views.generic import ListView, DetailView\\nfrom blogengine.models import Post, Category, Tag\\nfrom blogengine.views import CategoryListView, TagListView\\n\\nurlpatterns = patterns('',\\n    # Index\\n    url(r'^(?P<page>\\\\d+)?/?$', ListView.as_view(\\n        model=Post,\\n        paginate_by=5,\\n        )),\\n\\n    # Individual posts\\n    url(r'^(?P<pub_date__year>\\\\d{4})/(?P<pub_date__month>\\\\d{1,2})/(?P<slug>[a-zA-Z0-9-]+)/?$', DetailView.as_view(\\n        model=Post,\\n        )),\\n\\n    # Categories\\n    url(r'^category/(?P<slug>[a-zA-Z0-9-]+)/?$', CategoryListView.as_view(\\n        paginate_by=5,\\n        model=Category,\\n        )),\\n\\n    # Tags\\n    url(r'^tag/(?P<slug>[a-zA-Z0-9-]+)/?$', TagListView.as_view(\\n        paginate_by=5,\\n        model=Tag,\\n        )),\\n)\\n\")), mdx(\"p\", null, \"We import the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tag\"), \" model and the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TagListView\"), \" view, and use them to set up the tag page.\"), mdx(\"p\", null, \"If we now run our tests again, they should pass:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py test blogengine\\nCreating test database for alias 'default'...\\n...................\\n----------------------------------------------------------------------\\nRan 19 tests in 5.473s\\n\\nOK\\nDestroying test database for alias 'default'...\\n\")), mdx(\"p\", null, \"Well done! Time to commit:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ git add templates/ blogengine/\\n$ git commit -m 'Tags are now shown'\\n\")), mdx(\"h2\", null, \"RSS Feed\"), mdx(\"p\", null, \"For the final task today, we'll implement an RSS feed for our posts. Django ships with a handy syndication framework that makes it easy to implement this kind of functionality.\"), mdx(\"p\", null, \"As usual, we'll create some tests first. In this case, we won't be adding any new models, so we don't need to test them. Instead we can jump straight into creating acceptance tests for our feed. For now we'll just create one type of feed: a feed of all the blog posts. In a later instalment we'll add feeds for categories and tags.\"), mdx(\"p\", null, \"First of all, we'll implement our test. Now, in order to test our feed, we need to have a solution in place for parsing an RSS feed. Django won't do this natively, so we'll install the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"feedparser\"), \" Python module. Run the following commands:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ pip install feedparser\\n$ pip freeze > requirements.txt\\n\")), mdx(\"p\", null, \"Once that's done, feedparser should be available. You may wish to refer to the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://pythonhosted.org/feedparser/\"\n  }, \"documentation\"), \" as we go to help.\"), mdx(\"p\", null, \"Let's write our test for the RSS feed. First, we import feedparser near the top of the file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"import feedparser\\n\")), mdx(\"p\", null, \"Then we define a new class for our feed tests. Put this towards the end of the file - I put it just before the flat page tests:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"class FeedTest(BaseAcceptanceTest):\\n    def test_all_post_feed(self):\\n        # Create the category\\n        category = Category()\\n        category.name = 'python'\\n        category.description = 'The Python programming language'\\n        category.save()\\n\\n        # Create the tag\\n        tag = Tag()\\n        tag.name = 'python'\\n        tag.description = 'The Python programming language'\\n        tag.save()\\n\\n        # Create the author\\n        author = User.objects.create_user('testuser', 'user@example.com', 'password')\\n        author.save()\\n\\n        # Create the site\\n        site = Site()\\n        site.name = 'example.com'\\n        site.domain = 'example.com'\\n        site.save()\\n \\n        # Create a post\\n        post = Post()\\n        post.title = 'My first post'\\n        post.text = 'This is my first blog post'\\n        post.slug = 'my-first-post'\\n        post.pub_date = timezone.now()\\n        post.author = author\\n        post.site = site\\n        post.category = category\\n\\n        # Save it\\n        post.save()\\n\\n        # Add the tag\\n        post.tags.add(tag)\\n        post.save()\\n\\n        # Check we can find it\\n        all_posts = Post.objects.all()\\n        self.assertEquals(len(all_posts), 1)\\n        only_post = all_posts[0]\\n        self.assertEquals(only_post, post)\\n\\n        # Fetch the feed\\n        response = self.client.get('/feeds/posts/')\\n        self.assertEquals(response.status_code, 200)\\n\\n        #\\xA0Parse the feed\\n        feed = feedparser.parse(response.content)\\n\\n        # Check length\\n        self.assertEquals(len(feed.entries), 1)\\n\\n        # Check post retrieved is the correct one\\n        feed_post = feed.entries[0]\\n        self.assertEquals(feed_post.title, post.title)\\n        self.assertEquals(feed_post.description, post.text)\\n\")), mdx(\"p\", null, \"Run the tests and you'll see something like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py test blogengine\\nCreating test database for alias 'default'...\\n..............F.....\\n======================================================================\\nFAIL: test_all_post_feed (blogengine.tests.FeedTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 781, in test_all_post_feed\\n    self.assertEquals(response.status_code, 200)\\nAssertionError: 404 != 200\\n\\n----------------------------------------------------------------------\\nRan 20 tests in 6.743s\\n\\nFAILED (failures=1)\\nDestroying test database for alias 'default'...\\n\")), mdx(\"p\", null, \"We're getting a 404 error because the post feed isn't implemented. So let's implement it. We're going to use Django's syndication framework, which will make it easy, but we need to enable it. Open up \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"django_tutorial_blog_ng/settings/py\"), \" and add the following under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"INSTALLED_APPS\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"    'django.contrib.syndication',\\n\")), mdx(\"p\", null, \"Next, we need to enable the URLconf for this RSS feed. Open up \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"blogengine/urls.py and amend the import from \"), \"blogengine.views` near the top:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"from blogengine.views import CategoryListView, TagListView, PostsFeed\\n\")), mdx(\"p\", null, \"Further down, add in the following code to define the URL for the feed:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"    #\\xA0Post RSS feed\\n    url(r'^feeds/posts/$', PostsFeed()),\\n\")), mdx(\"p\", null, \"Note that we imported the PostsFeed class, but that hasn't yet been defined. So we need to do that. First of all, add this line near the top:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"from django.contrib.syndication.views import Feed\\n\")), mdx(\"p\", null, \"This imports the syndication views - yes, they're another generic view! Our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PostsFeed\"), \" class is going to inherit from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Feed\"), \". Next, we define the class:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"class PostsFeed(Feed):\\n    title = \\\"RSS feed - posts\\\"\\n    link = \\\"feeds/posts/\\\"\\n    description = \\\"RSS feed - blog posts\\\"\\n\\n    def items(self):\\n        return Post.objects.order_by('-pub_date')\\n\\n    def item_title(self, item):\\n        return item.title\\n\\n    def item_description(self, item):\\n        return item.text\\n\")), mdx(\"p\", null, \"This is fairly straightforward. We define our title, link, and description for the feed inside the class definition. We define the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"items\"), \" method which sets what items are returned by the RSS feed. We also define the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"item_title\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"item_description\"), \" methods.\"), mdx(\"p\", null, \"Now, if we run our tests, they should pass:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py test blogengine\\nCreating test database for alias 'default'...\\n....................\\n----------------------------------------------------------------------\\nRan 20 tests in 5.933s\\n\\nOK\\nDestroying test database for alias 'default'...\\n\")), mdx(\"p\", null, \"Let's commit our changes:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ git add blogengine/ django_tutorial_blog_ng/ requirements.txt\\n$ git commit -m 'RSS feed implemented'\\n\")), mdx(\"p\", null, \"And that's enough for now. Don't forget, you can get the code for this lesson by cloning the repository from \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/matthewbdaly/django_tutorial_blog_ng\"\n  }, \"Github\"), \" and running \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git checkout lesson-4\"), \" to switch to this lesson.\"), mdx(\"p\", null, \"Next time we'll:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Implement a search system\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Add feeds for categories and posts\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Tidy up the user interface\")), mdx(\"p\", null, \"Hope to see you then!\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Hello again! As promised, in this instalment we'll implement categories and tags, as well as an RSS feed. As usual, we need to switch into our virtualenv: Categories It's worth…","frontmatter":{"title":"Django blog tutorial - the next generation - part 4","date":"15th February 2014 5:45 pm","isoDate":"2014-02-15T17:45:00+00:00","categories":["python","django","tdd","django-blog-tutorial"]},"fields":{"path":"/blog/2014/02/15/django-blog-tutorial-the-next-generation-part-4/"}}},"pageContext":{"previous":{"fields":{"path":"/blog/2014/01/25/my-first-yeoman-generator/"},"frontmatter":{"title":"My first Yeoman generator","date":"2014-01-25 11:38:40 +0000","layout":"post"}},"next":{"fields":{"path":"/blog/2014/05/24/django-blog-tutorial-the-next-generation-part-5/"},"frontmatter":{"title":"Django blog tutorial - the next generation - part 5","date":"2014-05-24 19:15:54 +0000","layout":"post"}}}},"staticQueryHashes":["290055352","2909664151"]}