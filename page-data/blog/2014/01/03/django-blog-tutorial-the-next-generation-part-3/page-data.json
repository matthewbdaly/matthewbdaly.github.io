{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/2014/01/03/django-blog-tutorial-the-next-generation-part-3/","result":{"data":{"site":{"siteMetadata":{"title":"Matthew Daly","siteUrl":"https://matthewdaly.co.uk"}},"mdx":{"id":"0f321fe9-f414-5f02-b3d9-3c37371b5b10","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"layout\": \"post\",\n  \"title\": \"Django Blog Tutorial - the Next Generation - Part 3\",\n  \"date\": \"2014-01-03 12:57:30 +0000\",\n  \"comments\": true,\n  \"categories\": [\"python\", \"django\", \"tdd\", \"django-blog-tutorial\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Hello again! In this instalment, we're going to do the following:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Add support for flat pages\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Add support for multiple authors\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Add a third-party comment system\")), mdx(\"h2\", null, \"Flat pages\"), mdx(\"p\", null, \"Django ships with a number of useful apps - we've already used the admin interface. The flat pages app is another very handy app that comes with Django, and we'll use it to allow the blog author to create a handful of flat pages.\"), mdx(\"p\", null, \"First of all, you'll need to install the flatpages app. Edit the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"INSTALLED_APPS\"), \" setting as follows:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"INSTALLED_APPS = (\\n    'django.contrib.admin',\\n    'django.contrib.auth',\\n    'django.contrib.contenttypes',\\n    'django.contrib.sessions',\\n    'django.contrib.messages',\\n    'django.contrib.staticfiles',\\n    'south',\\n    'blogengine',\\n    'django.contrib.sites',\\n    'django.contrib.flatpages',\\n)\\n\")), mdx(\"p\", null, \"Note that we needed to enable the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sites\"), \" framework as well. You'll also need to set the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SITE_ID\"), \" setting:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"SITE_ID = 1\\n\")), mdx(\"p\", null, \"With that done, run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"python manage.py syncdb\"), \" to create the required database tables. Now, let's use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sqlall\"), \" command to take a look at the database structure generated for the flat pages:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sql\"\n  }, \"BEGIN;\\nCREATE TABLE \\\"django_flatpage_sites\\\" (\\n    \\\"id\\\" integer NOT NULL PRIMARY KEY,\\n    \\\"flatpage_id\\\" integer NOT NULL,\\n    \\\"site_id\\\" integer NOT NULL REFERENCES \\\"django_site\\\" (\\\"id\\\"),\\n    UNIQUE (\\\"flatpage_id\\\", \\\"site_id\\\")\\n)\\n;\\nCREATE TABLE \\\"django_flatpage\\\" (\\n    \\\"id\\\" integer NOT NULL PRIMARY KEY,\\n    \\\"url\\\" varchar(100) NOT NULL,\\n    \\\"title\\\" varchar(200) NOT NULL,\\n    \\\"content\\\" text NOT NULL,\\n    \\\"enable_comments\\\" bool NOT NULL,\\n    \\\"template_name\\\" varchar(70) NOT NULL,\\n    \\\"registration_required\\\" bool NOT NULL\\n)\\n;\\nCREATE INDEX \\\"django_flatpage_sites_872c4601\\\" ON \\\"django_flatpage_sites\\\" (\\\"flatpage_id\\\");\\nCREATE INDEX \\\"django_flatpage_sites_99732b5c\\\" ON \\\"django_flatpage_sites\\\" (\\\"site_id\\\");\\nCREATE INDEX \\\"django_flatpage_c379dc61\\\" ON \\\"django_flatpage\\\" (\\\"url\\\");\\n\\nCOMMIT;\\n\")), mdx(\"p\", null, \"As mentioned previously, all models in Django have an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" attribute by default. Each flat page also has a URL, title, and content. \"), mdx(\"p\", null, \"Also note the separate \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"django_flatpage_sites\"), \" table, which maps sites to flat pages. Django can run multiple sites from the same web app, and so flat pages must be allocated to a specific site. This relationship is a many-to-many relationship, so one flat page can appear on more than one site.\"), mdx(\"p\", null, \"The other fields \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://127.0.0.1:8000/admin/flatpages/flatpage/add/\"\n  }, \"are hidden by default in the admin\"), \" and can be ignored. Let's have a go with Django's handy shell to explore the flatpage. Run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"python manage.py shell\"), \" and you'll be able to interact with your Django application interactively:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py shell\\nPython 2.7.6 (default, Nov 23 2013, 13:53:45)\\n[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin\\nType \\\"help\\\", \\\"copyright\\\", \\\"credits\\\" or \\\"license\\\" for more information.\\n(InteractiveConsole)\\n>>> from django.contrib.flatpages.models import *\\n>>> FlatPage\\n<class 'django.contrib.flatpages.models.FlatPage'>\\n>>> from django.contrib.sites.models import Site\\n>>> Site.objects.all()\\n[<Site: example.com>]\\n\")), mdx(\"p\", null, \"As you can see, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"flatpages\"), \" is a Django app similar to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"blogengine\"), \" one, with its own models, as is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sites\"), \". You can see that the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FlatPage\"), \" class is a model. We can create an instance of it and save it interactively:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \">>> f = FlatPage()\\n>>> f.url = '/about/'\\n>>> f.title = 'About me'\\n>>> f.content = 'All about me'\\n>>> f.save()\\n>>> f.sites.add(Site.objects.all()[0])\\n>>> f.save()\\n\")), mdx(\"p\", null, \"Note that because the relationship between the site and the flat page is a many-to-many relationship, we need to save it first, then use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"add\"), \" method to add the site to the list of sites.\"), mdx(\"p\", null, \"We can retrieve it:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \">>> FlatPage.objects.all()\\n[<FlatPage: /about/ -- About me>]\\n>>> FlatPage.objects.all()[0]\\n<FlatPage: /about/ -- About me>\\n>>> FlatPage.objects.all()[0].title\\nu'About me'\\n\")), mdx(\"p\", null, \"This command is often handy for debugging problems with your models interactively. If you now run the server and visit the admin, you should notice that the Flatpages app is now visible there, and the 'About me' flat page is now shown in there.\"), mdx(\"p\", null, \"Let's also take a look at the SQL required for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Site\"), \" model. Run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"python manage.py sqlall sites\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sql\"\n  }, \"BEGIN;\\nCREATE TABLE \\\"django_site\\\" (\\n    \\\"id\\\" integer NOT NULL PRIMARY KEY,\\n    \\\"domain\\\" varchar(100) NOT NULL,\\n    \\\"name\\\" varchar(50) NOT NULL\\n)\\n;\\n\\nCOMMIT;\\n\")), mdx(\"p\", null, \"Again, very simple - just a domain and a name.\"), mdx(\"p\", null, \"So, now that we have a good idea of how the flat page system works, we can write a test for it. We don't need to write unit tests for the model because Django already does that, but we do need to write an acceptance test to ensure we can create flat pages and they will be where we expect them to be. Add the following to the top of the test file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"from django.contrib.flatpages.models import FlatPage\\nfrom django.contrib.sites.models import Site\\n\")), mdx(\"p\", null, \"Now, before we write this test, there's some duplication to resolve. We have two tests that subclass \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"LiveServerTestCase\"), \", and both have the same method, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setUp\"), \". We can save ourselves some hassle by creating a new class containing this method and having both these tests inherit from it. We'll do that now because the flat page test can also be based on it. Create the following class just after \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PostTest\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"class BaseAcceptanceTest(LiveServerTestCase):\\n    def setUp(self):\\n        self.client = Client()\\n\")), mdx(\"p\", null, \"Then remove the setUp method from each of the two tests based on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"LiveServerTestCase\"), \", and change their parent class to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"BaseAcceptanceTest\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"class AdminTest(BaseAcceptanceTest):\\n\\nclass PostViewTest(BaseAcceptanceTest):\\n\")), mdx(\"p\", null, \"With that done, run the tests and they should pass. Commit your changes:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ git add blogengine/tests.py django_tutorial_blog_ng/settings.py\\n$ git commit -m 'Added flatpages to installed apps'\\n\")), mdx(\"p\", null, \"Now we can get started in earnest on our test for the flat pages:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"class FlatPageViewTest(BaseAcceptanceTest):\\n    def test_create_flat_page(self):\\n        # Create flat page\\n        page = FlatPage()\\n        page.url = '/about/'\\n        page.title = 'About me'\\n        page.content = 'All about me'\\n        page.save()\\n\\n        # Add the site\\n        page.sites.add(Site.objects.all()[0])\\n        page.save()\\n\\n        # Check new page saved\\n        all_pages = FlatPage.objects.all()\\n        self.assertEquals(len(all_pages), 1)\\n        only_page = all_pages[0]\\n        self.assertEquals(only_page, page)\\n\\n        # Check data correct\\n        self.assertEquals(only_page.url, '/about/')\\n        self.assertEquals(only_page.title, 'About me')\\n        self.assertEquals(only_page.content, 'All about me')\\n\\n        # Get URL\\n        page_url = only_page.get_absolute_url()\\n\\n        # Get the page\\n        response = self.client.get(page_url)\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check title and content in response\\n        self.assertTrue('About me' in response.content)\\n        self.assertTrue('All about me' in response.content)\\n\")), mdx(\"p\", null, \"Let's run our tests:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py test\\nCreating test database for alias 'default'...\\n......F..\\n======================================================================\\nFAIL: test_create_flat_page (blogengine.tests.FlatPageViewTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 272, in test_create_flat_page\\n    self.assertEquals(response.status_code, 200)\\nAssertionError: 404 != 200\\n\\n----------------------------------------------------------------------\\nRan 9 tests in 2.760s\\n\\nFAILED (failures=1)\\n\")), mdx(\"p\", null, \"We can see why it's failed - in our flat page test, the status code is 404, indicating the page was not found. This just means we haven't put flat page support into our URLconf. So let's fix that:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"from django.conf.urls import patterns, include, url\\n\\nfrom django.contrib import admin\\nadmin.autodiscover()\\n\\nurlpatterns = patterns('',\\n    # Examples:\\n    # url(r'^$', 'django_tutorial_blog_ng.views.home', name='home'),\\n    # url(r'^blog/', include('blog.urls')),\\n\\n    url(r'^admin/', include(admin.site.urls)),\\n\\n    # Blog URLs\\n    url(r'', include('blogengine.urls')),\\n\\n    # Flat pages\\n    url(r'', include('django.contrib.flatpages.urls')),\\n)\\n\")), mdx(\"p\", null, \"Let's run our tests again:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py test\\nCreating test database for alias 'default'...\\n......E..\\n======================================================================\\nERROR: test_create_flat_page (blogengine.tests.FlatPageViewTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 276, in test_create_flat_page\\n    response = self.client.get(page_url)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/test/client.py\\\", line 473, in get\\n    response = super(Client, self).get(path, data=data, **extra)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/test/client.py\\\", line 280, in get\\n    return self.request(**r)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/test/client.py\\\", line 444, in request\\n    six.reraise(*exc_info)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/core/handlers/base.py\\\", line 114, in get_response\\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/contrib/flatpages/views.py\\\", line 45, in flatpage\\n    return render_flatpage(request, f)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/utils/decorators.py\\\", line 99, in _wrapped_view\\n    response = view_func(request, *args, **kwargs)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/contrib/flatpages/views.py\\\", line 60, in render_flatpage\\n    t = loader.get_template(DEFAULT_TEMPLATE)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/template/loader.py\\\", line 138, in get_template\\n    template, origin = find_template(template_name)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/template/loader.py\\\", line 131, in find_template\\n    raise TemplateDoesNotExist(name)\\nTemplateDoesNotExist: flatpages/default.html\\n\\n----------------------------------------------------------------------\\nRan 9 tests in 3.557s\\n\\nFAILED (errors=1)\\nDestroying test database for alias 'default'...\\n\")), mdx(\"p\", null, \"Our test still fails, but we can easily see  why - the template \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"flatpages/default.html\"), \" doesn't exist. So we create it:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-django\"\n  }, \"{% extends \\\"blogengine/includes/base.html\\\" %}\\n\\n    {% load custom_markdown %}\\n\\n    {% block content %}\\n        <div class=\\\"post\\\">\\n        <h1>{{ flatpage.title }}</h1>\\n        {{ flatpage.content|custom_markdown }}\\n        </div>\\n\\n    {% endblock %}\\n\")), mdx(\"p\", null, \"This template is based on the blog post one, and just changes a handful of variable names. Note that it can still inherit from the blogengine base template, and in this case we're using that for the sake of consistency.\"), mdx(\"p\", null, \"If you run your tests, you should now see that they pass, so we'll commit our changes:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ git add templates/ django_tutorial_blog_ng/ blogengine/\\n$ git commit -m 'Implemented flat page support'\\n\")), mdx(\"h2\", null, \"Multiple authors\"), mdx(\"p\", null, \"Next we'll add support for multiple authors. Now, Django already has a User model, and we'll leverage that to represent the authors. But first we'll write our test:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"from django.test import TestCase, LiveServerTestCase, Client\\nfrom django.utils import timezone\\nfrom blogengine.models import Post\\nfrom django.contrib.flatpages.models import FlatPage\\nfrom django.contrib.sites.models import Site\\nfrom django.contrib.auth.models import User\\nimport markdown\\n\\n# Create your tests here.\\nclass PostTest(TestCase):\\n    def test_create_post(self):\\n        # Create the author\\n        author = User.objects.create_user('testuser', 'user@example.com', 'password')\\n        author.save()\\n        \\n        # Create the post\\n        post = Post()\\n\\n        # Set the attributes\\n        post.title = 'My first post'\\n        post.text = 'This is my first blog post'\\n        post.slug = 'my-first-post'\\n        post.pub_date = timezone.now()\\n        post.author = author\\n\\n        # Save it\\n        post.save()\\n\\n        # Check we can find it\\n        all_posts = Post.objects.all()\\n        self.assertEquals(len(all_posts), 1)\\n        only_post = all_posts[0]\\n        self.assertEquals(only_post, post)\\n\\n        # Check attributes\\n        self.assertEquals(only_post.title, 'My first post')\\n        self.assertEquals(only_post.text, 'This is my first blog post')\\n        self.assertEquals(only_post.slug, 'my-first-post')\\n        self.assertEquals(only_post.pub_date.day, post.pub_date.day)\\n        self.assertEquals(only_post.pub_date.month, post.pub_date.month)\\n        self.assertEquals(only_post.pub_date.year, post.pub_date.year)\\n        self.assertEquals(only_post.pub_date.hour, post.pub_date.hour)\\n        self.assertEquals(only_post.pub_date.minute, post.pub_date.minute)\\n        self.assertEquals(only_post.pub_date.second, post.pub_date.second)\\n        self.assertEquals(only_post.author.username, 'testuser')\\n        self.assertEquals(only_post.author.email, 'user@example.com')\\n\\nclass BaseAcceptanceTest(LiveServerTestCase):\\n    def setUp(self):\\n        self.client = Client()\\n\\n\\nclass AdminTest(BaseAcceptanceTest):\\n    fixtures = ['users.json']\\n\\n    def test_login(self):\\n        # Get login page\\n        response = self.client.get('/admin/')\\n\\n        # Check response code\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check 'Log in' in response\\n        self.assertTrue('Log in' in response.content)\\n\\n        # Log the user in\\n        self.client.login(username='bobsmith', password=\\\"password\\\")\\n\\n        # Check response code\\n        response = self.client.get('/admin/')\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check 'Log out' in response\\n        self.assertTrue('Log out' in response.content)\\n\\n    def test_logout(self):\\n        # Log in\\n        self.client.login(username='bobsmith', password=\\\"password\\\")\\n\\n        # Check response code\\n        response = self.client.get('/admin/')\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check 'Log out' in response\\n        self.assertTrue('Log out' in response.content)\\n\\n        # Log out\\n        self.client.logout()\\n\\n        # Check response code\\n        response = self.client.get('/admin/')\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check 'Log in' in response\\n        self.assertTrue('Log in' in response.content)\\n\\n    def test_create_post(self):\\n        # Log in\\n        self.client.login(username='bobsmith', password=\\\"password\\\")\\n\\n        # Check response code\\n        response = self.client.get('/admin/blogengine/post/add/')\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Create the new post\\n        response = self.client.post('/admin/blogengine/post/add/', {\\n            'title': 'My first post',\\n            'text': 'This is my first post',\\n            'pub_date_0': '2013-12-28',\\n            'pub_date_1': '22:00:04',\\n            'slug': 'my-first-post'\\n        },\\n        follow=True\\n        )\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check added successfully\\n        self.assertTrue('added successfully' in response.content)\\n\\n        # Check new post now in database\\n        all_posts = Post.objects.all()\\n        self.assertEquals(len(all_posts), 1)\\n\\n    def test_edit_post(self):\\n        # Create the author\\n        author = User.objects.create_user('testuser', 'user@example.com', 'password')\\n        author.save()\\n        \\n        # Create the post\\n        post = Post()\\n        post.title = 'My first post'\\n        post.text = 'This is my first blog post'\\n        post.slug = 'my-first-post'\\n        post.pub_date = timezone.now()\\n        post.author = author\\n        post.save()\\n\\n        # Log in\\n        self.client.login(username='bobsmith', password=\\\"password\\\")\\n\\n        # Edit the post\\n        response = self.client.post('/admin/blogengine/post/1/', {\\n            'title': 'My second post',\\n            'text': 'This is my second blog post',\\n            'pub_date_0': '2013-12-28',\\n            'pub_date_1': '22:00:04',\\n            'slug': 'my-second-post'\\n        },\\n        follow=True\\n        )\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check changed successfully\\n        self.assertTrue('changed successfully' in response.content)\\n\\n        # Check post amended\\n        all_posts = Post.objects.all()\\n        self.assertEquals(len(all_posts), 1)\\n        only_post = all_posts[0]\\n        self.assertEquals(only_post.title, 'My second post')\\n        self.assertEquals(only_post.text, 'This is my second blog post')\\n\\n    def test_delete_post(self):\\n        # Create the author\\n        author = User.objects.create_user('testuser', 'user@example.com', 'password')\\n        author.save()\\n        \\n        # Create the post\\n        post = Post()\\n        post.title = 'My first post'\\n        post.text = 'This is my first blog post'\\n        post.slug = 'my-first-post'\\n        post.pub_date = timezone.now()\\n        post.author = author\\n        post.save()\\n\\n        # Check new post saved\\n        all_posts = Post.objects.all()\\n        self.assertEquals(len(all_posts), 1)\\n\\n        # Log in\\n        self.client.login(username='bobsmith', password=\\\"password\\\")\\n\\n        # Delete the post\\n        response = self.client.post('/admin/blogengine/post/1/delete/', {\\n            'post': 'yes'\\n        }, follow=True)\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check deleted successfully\\n        self.assertTrue('deleted successfully' in response.content)\\n\\n        # Check post amended\\n        all_posts = Post.objects.all()\\n        self.assertEquals(len(all_posts), 0)\\n\\nclass PostViewTest(BaseAcceptanceTest):\\n    def test_index(self):\\n        # Create the author\\n        author = User.objects.create_user('testuser', 'user@example.com', 'password')\\n        author.save()\\n        \\n        # Create the post\\n        post = Post()\\n        post.title = 'My first post'\\n        post.text = 'This is [my first blog post](http://127.0.0.1:8000/)'\\n        post.slug = 'my-first-post'\\n        post.pub_date = timezone.now()\\n        post.author = author\\n        post.save()\\n\\n        # Check new post saved\\n        all_posts = Post.objects.all()\\n        self.assertEquals(len(all_posts), 1)\\n\\n        # Fetch the index\\n        response = self.client.get('/')\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check the post title is in the response\\n        self.assertTrue(post.title in response.content)\\n\\n        # Check the post text is in the response\\n        self.assertTrue(markdown.markdown(post.text) in response.content)\\n\\n        # Check the post date is in the response\\n        self.assertTrue(str(post.pub_date.year) in response.content)\\n        self.assertTrue(post.pub_date.strftime('%b') in response.content)\\n        self.assertTrue(str(post.pub_date.day) in response.content)\\n\\n        # Check the link is marked up properly\\n        self.assertTrue('<a href=\\\"http://127.0.0.1:8000/\\\">my first blog post</a>' in response.content)\\n\\n    def test_post_page(self):\\n        # Create the author\\n        author = User.objects.create_user('testuser', 'user@example.com', 'password')\\n        author.save()\\n        \\n        # Create the post\\n        post = Post()\\n        post.title = 'My first post'\\n        post.text = 'This is [my first blog post](http://127.0.0.1:8000/)'\\n        post.slug = 'my-first-post'\\n        post.pub_date = timezone.now()\\n        post.author = author\\n        post.save()\\n\\n        # Check new post saved\\n        all_posts = Post.objects.all()\\n        self.assertEquals(len(all_posts), 1)\\n        only_post = all_posts[0]\\n        self.assertEquals(only_post, post)\\n\\n        # Get the post URL\\n        post_url = only_post.get_absolute_url()\\n\\n        # Fetch the post\\n        response = self.client.get(post_url)\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check the post title is in the response\\n        self.assertTrue(post.title in response.content)\\n\\n        # Check the post text is in the response\\n        self.assertTrue(markdown.markdown(post.text) in response.content)\\n\\n        # Check the post date is in the response\\n        self.assertTrue(str(post.pub_date.year) in response.content)\\n        self.assertTrue(post.pub_date.strftime('%b') in response.content)\\n        self.assertTrue(str(post.pub_date.day) in response.content)\\n\\n        # Check the link is marked up properly\\n        self.assertTrue('<a href=\\\"http://127.0.0.1:8000/\\\">my first blog post</a>' in response.content)\\n\\n\\nclass FlatPageViewTest(BaseAcceptanceTest):\\n    def test_create_flat_page(self):\\n        # Create flat page\\n        page = FlatPage()\\n        page.url = '/about/'\\n        page.title = 'About me'\\n        page.content = 'All about me'\\n        page.save()\\n\\n        # Add the site\\n        page.sites.add(Site.objects.all()[0])\\n        page.save()\\n\\n        # Check new page saved\\n        all_pages = FlatPage.objects.all()\\n        self.assertEquals(len(all_pages), 1)\\n        only_page = all_pages[0]\\n        self.assertEquals(only_page, page)\\n\\n        # Check data correct\\n        self.assertEquals(only_page.url, '/about/')\\n        self.assertEquals(only_page.title, 'About me')\\n        self.assertEquals(only_page.content, 'All about me')\\n\\n        # Get URL\\n        page_url = str(only_page.get_absolute_url())\\n\\n        # Get the page\\n        response = self.client.get(page_url)\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check title and content in response\\n        self.assertTrue('About me' in response.content)\\n        self.assertTrue('All about me' in response.content)\\n\")), mdx(\"p\", null, \"Here we create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"User\"), \" object to represent the author. Note the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"create_user\"), \" convenience method for creating new users quickly and easily.\"), mdx(\"p\", null, \"We're going to exclude the author field from the admin - instead it's going to be automatically populated based on the session data, so that when a user creates a post they are automatically set as the author. We therefore don't need to make any changes for the acceptance tests for posts - our changes to the unit tests for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Post\"), \" model are sufficient.\"), mdx(\"p\", null, \"Run the tests, and they should fail:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py test\\nCreating test database for alias 'default'...\\nE........\\n======================================================================\\nERROR: test_create_post (blogengine.tests.PostTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 45, in test_create_post\\n    self.assertEquals(only_post.author.username, 'testuser')\\nAttributeError: 'Post' object has no attribute 'author'\\n\\n----------------------------------------------------------------------\\nRan 9 tests in 3.620s\\n\\nFAILED (errors=1)\\nDestroying test database for alias 'default'...\\n\")), mdx(\"p\", null, \"Let's add the missing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"author\"), \" attribute:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"from django.db import models\\nfrom django.contrib.auth.models import User\\n\\n# Create your models here.\\nclass Post(models.Model):\\n    title = models.CharField(max_length=200)\\n    pub_date = models.DateTimeField()\\n    text = models.TextField()\\n    slug = models.SlugField(max_length=40, unique=True)\\n    author = models.ForeignKey(User)\\n\\n    def get_absolute_url(self):\\n        return \\\"/%s/%s/%s/\\\" % (self.pub_date.year, self.pub_date.month, self.slug)\\n\\n    def __unicode__(self):\\n        return self.title\\n\\n    class Meta:\\n        ordering = [\\\"-pub_date\\\"]\\n\")), mdx(\"p\", null, \"Next, create the migrations:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ python manage.py schemamigration --auto blogengine\\n\")), mdx(\"p\", null, \"You'll be prompted to either quit or provide a default author ID - select option 2 to provide the ID, then enter 1, which should be your own user account ID. Then run the migrations:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ python manage.py migrate\\n\")), mdx(\"p\", null, \"Let's run our tests again:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py test\\nCreating test database for alias 'default'...\\n.F.F.....\\n======================================================================\\nFAIL: test_create_post (blogengine.tests.AdminTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 118, in test_create_post\\n    self.assertTrue('added successfully' in response.content)\\nAssertionError: False is not true\\n\\n======================================================================\\nFAIL: test_edit_post (blogengine.tests.AdminTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 154, in test_edit_post\\n    self.assertTrue('changed successfully' in response.content)\\nAssertionError: False is not true\\n\\n----------------------------------------------------------------------\\nRan 9 tests in 3.390s\\n\\nFAILED (failures=2)\\nDestroying test database for alias 'default'...\\n\")), mdx(\"p\", null, \"Our test still fails because the author field isn't set automatically. So we'll amend the admin to automatically set the author when the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Post\"), \" object is saved:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"import models\\nfrom django.contrib import admin\\nfrom django.contrib.auth.models import User\\n\\nclass PostAdmin(admin.ModelAdmin):\\n    prepopulated_fields = {\\\"slug\\\": (\\\"title\\\",)}\\n    exclude = ('author',)\\n\\n    def save_model(self, request, obj, form, change):\\n        obj.author = request.user\\n        obj.save()\\n\\nadmin.site.register(models.Post, PostAdmin)\\n\")), mdx(\"p\", null, \"This tells the admin to exclude the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"author\"), \" field from any form for a post, and when the model is saved, to set the author to the user making the HTTP request. Now run the tests, and they should pass:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py test\\nCreating test database for alias 'default'...\\n.........\\n----------------------------------------------------------------------\\nRan 9 tests in 4.086s\\n\\nOK\\nDestroying test database for alias 'default'...\\n\")), mdx(\"p\", null, \"Time to commit again:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ git add blogengine/\\n$ git commit -m 'Added author field'\\n\")), mdx(\"h2\", null, \"Comments\"), mdx(\"p\", null, \"The \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://matthewdaly.co.uk/blog/2012/03/29/yet-another-tutorial-for-building-a-blog-using-python-and-django-part-4/\"\n  }, \"previous version of this tutorial\"), \" implemented comments using Django's own comment system. However, this has since been deprecated from Django and turned into \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/django/django-contrib-comments\"\n  }, \"a separate project\"), \". So we have two options for how to implement comments:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We can use \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://django-contrib-comments.readthedocs.org/en/latest/\"\n  }, \"the comments system\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We can use a third-party comments system\")), mdx(\"p\", null, \"Now, if you want to use the Django comment system, you can do so, and it shouldn't be too hard to puzzle out how to implement it using the documentation and my prior post. However, in my humble opinion, using a third-party comment system is the way to go for blog comments - they make it extremely easy for people to log in with multiple services without you having to write lots of additional code. They also make it significantly easier to moderate comments, and they're generally pretty good at handling comment spam.\"), mdx(\"p\", null, \"Some of the available providers include:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://disqus.com/\"\n  }, \"Disqus\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://intensedebate.com/\"\n  }, \"IntenseDebate\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://developers.facebook.com/docs/plugins/comments/\"\n  }, \"Facebook\"))), mdx(\"p\", null, \"For demonstration purposes, we'll use Facebook comments, but this shouldn't require much work to adapt it to the other providers.\"), mdx(\"p\", null, \"First of all, we need to include the Facebook JavaScript SDK:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-django\"\n  }, \"        <!-- Add your site or application content here -->\\n\\n        <div id=\\\"fb-root\\\"></div>\\n        <script>(function(d, s, id) {\\n            var js, fjs = d.getElementsByTagName(s)[0];\\n            if (d.getElementById(id)) return;\\n                js = d.createElement(s); js.id = id;\\n                js.src = \\\"//connect.facebook.net/en_GB/all.js#xfbml=1\\\";\\n                fjs.parentNode.insertBefore(js, fjs);\\n            }(document, 'script', 'facebook-jssdk'));</script>\\n\\n        <div class=\\\"navbar navbar-static-top navbar-inverse\\\">\\n            <div class=\\\"navbar-inner\\\">\\n                <div class=\\\"container\\\">\\n                    <a class=\\\"btn btn-navbar\\\" data-toggle=\\\"collapse\\\" data-target=\\\".nav-collapse\\\">\\n                        <span class=\\\"icon-bar\\\"></span>\\n                        <span class=\\\"icon-bar\\\"></span>\\n                        <span class=\\\"icon-bar\\\"></span>\\n                    </a>\\n                    <a class=\\\"brand\\\" href=\\\"/\\\">My Django Blog</a>\\n                    <div class=\\\"nav-collapse collapse\\\">\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n\")), mdx(\"p\", null, \"Now, the Facebook comment system requires that you pass through the absolute page URL when initialising the comments. At present we can't do that without hard-coding the domain name in our template, which we want to avoid. So, we need to add a site field to each post to identify the site it's associated with.\"), mdx(\"p\", null, \"As usual, we update our tests first:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"from django.test import TestCase, LiveServerTestCase, Client\\nfrom django.utils import timezone\\nfrom blogengine.models import Post\\nfrom django.contrib.flatpages.models import FlatPage\\nfrom django.contrib.sites.models import Site\\nfrom django.contrib.auth.models import User\\nimport markdown\\n\\n# Create your tests here.\\nclass PostTest(TestCase):\\n    def test_create_post(self):\\n        # Create the author\\n        author = User.objects.create_user('testuser', 'user@example.com', 'password')\\n        author.save()\\n\\n        # Create the site\\n        site = Site()\\n        site.name = 'example.com'\\n        site.domain = 'example.com'\\n        site.save()\\n        \\n        # Create the post\\n        post = Post()\\n\\n        # Set the attributes\\n        post.title = 'My first post'\\n        post.text = 'This is my first blog post'\\n        post.slug = 'my-first-post'\\n        post.pub_date = timezone.now()\\n        post.author = author\\n        post.site = site\\n\\n        # Save it\\n        post.save()\\n\\n        # Check we can find it\\n        all_posts = Post.objects.all()\\n        self.assertEquals(len(all_posts), 1)\\n        only_post = all_posts[0]\\n        self.assertEquals(only_post, post)\\n\\n        # Check attributes\\n        self.assertEquals(only_post.title, 'My first post')\\n        self.assertEquals(only_post.text, 'This is my first blog post')\\n        self.assertEquals(only_post.slug, 'my-first-post')\\n        self.assertEquals(only_post.site.name, 'example.com')\\n        self.assertEquals(only_post.site.domain, 'example.com')\\n        self.assertEquals(only_post.pub_date.day, post.pub_date.day)\\n        self.assertEquals(only_post.pub_date.month, post.pub_date.month)\\n        self.assertEquals(only_post.pub_date.year, post.pub_date.year)\\n        self.assertEquals(only_post.pub_date.hour, post.pub_date.hour)\\n        self.assertEquals(only_post.pub_date.minute, post.pub_date.minute)\\n        self.assertEquals(only_post.pub_date.second, post.pub_date.second)\\n        self.assertEquals(only_post.author.username, 'testuser')\\n        self.assertEquals(only_post.author.email, 'user@example.com')\\n\\nclass BaseAcceptanceTest(LiveServerTestCase):\\n    def setUp(self):\\n        self.client = Client()\\n\\n\\nclass AdminTest(BaseAcceptanceTest):\\n    fixtures = ['users.json']\\n\\n    def test_login(self):\\n        # Get login page\\n        response = self.client.get('/admin/')\\n\\n        # Check response code\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check 'Log in' in response\\n        self.assertTrue('Log in' in response.content)\\n\\n        # Log the user in\\n        self.client.login(username='bobsmith', password=\\\"password\\\")\\n\\n        # Check response code\\n        response = self.client.get('/admin/')\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check 'Log out' in response\\n        self.assertTrue('Log out' in response.content)\\n\\n    def test_logout(self):\\n        # Log in\\n        self.client.login(username='bobsmith', password=\\\"password\\\")\\n\\n        # Check response code\\n        response = self.client.get('/admin/')\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check 'Log out' in response\\n        self.assertTrue('Log out' in response.content)\\n\\n        # Log out\\n        self.client.logout()\\n\\n        # Check response code\\n        response = self.client.get('/admin/')\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check 'Log in' in response\\n        self.assertTrue('Log in' in response.content)\\n\\n    def test_create_post(self):\\n        # Log in\\n        self.client.login(username='bobsmith', password=\\\"password\\\")\\n\\n        # Check response code\\n        response = self.client.get('/admin/blogengine/post/add/')\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Create the new post\\n        response = self.client.post('/admin/blogengine/post/add/', {\\n            'title': 'My first post',\\n            'text': 'This is my first post',\\n            'pub_date_0': '2013-12-28',\\n            'pub_date_1': '22:00:04',\\n            'slug': 'my-first-post',\\n            'site': '1'\\n        },\\n        follow=True\\n        )\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check added successfully\\n        self.assertTrue('added successfully' in response.content)\\n\\n        # Check new post now in database\\n        all_posts = Post.objects.all()\\n        self.assertEquals(len(all_posts), 1)\\n\\n    def test_edit_post(self):\\n        # Create the author\\n        author = User.objects.create_user('testuser', 'user@example.com', 'password')\\n        author.save()\\n\\n        # Create the site\\n        site = Site()\\n        site.name = 'example.com'\\n        site.domain = 'example.com'\\n        site.save()\\n        \\n        # Create the post\\n        post = Post()\\n        post.title = 'My first post'\\n        post.text = 'This is my first blog post'\\n        post.slug = 'my-first-post'\\n        post.pub_date = timezone.now()\\n        post.author = author\\n        post.site = site\\n        post.save()\\n\\n        # Log in\\n        self.client.login(username='bobsmith', password=\\\"password\\\")\\n\\n        # Edit the post\\n        response = self.client.post('/admin/blogengine/post/1/', {\\n            'title': 'My second post',\\n            'text': 'This is my second blog post',\\n            'pub_date_0': '2013-12-28',\\n            'pub_date_1': '22:00:04',\\n            'slug': 'my-second-post',\\n            'site': '1'\\n        },\\n        follow=True\\n        )\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check changed successfully\\n        self.assertTrue('changed successfully' in response.content)\\n\\n        # Check post amended\\n        all_posts = Post.objects.all()\\n        self.assertEquals(len(all_posts), 1)\\n        only_post = all_posts[0]\\n        self.assertEquals(only_post.title, 'My second post')\\n        self.assertEquals(only_post.text, 'This is my second blog post')\\n\\n    def test_delete_post(self):\\n        # Create the author\\n        author = User.objects.create_user('testuser', 'user@example.com', 'password')\\n        author.save()\\n\\n        # Create the site\\n        site = Site()\\n        site.name = 'example.com'\\n        site.domain = 'example.com'\\n        site.save()\\n        \\n        # Create the post\\n        post = Post()\\n        post.title = 'My first post'\\n        post.text = 'This is my first blog post'\\n        post.slug = 'my-first-post'\\n        post.pub_date = timezone.now()\\n        post.site = site\\n        post.author = author\\n        post.save()\\n\\n        # Check new post saved\\n        all_posts = Post.objects.all()\\n        self.assertEquals(len(all_posts), 1)\\n\\n        # Log in\\n        self.client.login(username='bobsmith', password=\\\"password\\\")\\n\\n        # Delete the post\\n        response = self.client.post('/admin/blogengine/post/1/delete/', {\\n            'post': 'yes'\\n        }, follow=True)\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check deleted successfully\\n        self.assertTrue('deleted successfully' in response.content)\\n\\n        # Check post amended\\n        all_posts = Post.objects.all()\\n        self.assertEquals(len(all_posts), 0)\\n\\nclass PostViewTest(BaseAcceptanceTest):\\n    def test_index(self):\\n        # Create the author\\n        author = User.objects.create_user('testuser', 'user@example.com', 'password')\\n        author.save()\\n\\n        # Create the site\\n        site = Site()\\n        site.name = 'example.com'\\n        site.domain = 'example.com'\\n        site.save()\\n\\n        # Create the post\\n        post = Post()\\n        post.title = 'My first post'\\n        post.text = 'This is [my first blog post](http://127.0.0.1:8000/)'\\n        post.slug = 'my-first-post'\\n        post.pub_date = timezone.now()\\n        post.author = author\\n        post.site = site\\n        post.save()\\n\\n        # Check new post saved\\n        all_posts = Post.objects.all()\\n        self.assertEquals(len(all_posts), 1)\\n\\n        # Fetch the index\\n        response = self.client.get('/')\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check the post title is in the response\\n        self.assertTrue(post.title in response.content)\\n\\n        # Check the post text is in the response\\n        self.assertTrue(markdown.markdown(post.text) in response.content)\\n\\n        # Check the post date is in the response\\n        self.assertTrue(str(post.pub_date.year) in response.content)\\n        self.assertTrue(post.pub_date.strftime('%b') in response.content)\\n        self.assertTrue(str(post.pub_date.day) in response.content)\\n\\n        # Check the link is marked up properly\\n        self.assertTrue('<a href=\\\"http://127.0.0.1:8000/\\\">my first blog post</a>' in response.content)\\n\\n    def test_post_page(self):\\n        # Create the author\\n        author = User.objects.create_user('testuser', 'user@example.com', 'password')\\n        author.save()\\n\\n        # Create the site\\n        site = Site()\\n        site.name = 'example.com'\\n        site.domain = 'example.com'\\n        site.save()\\n\\n        # Create the post\\n        post = Post()\\n        post.title = 'My first post'\\n        post.text = 'This is [my first blog post](http://127.0.0.1:8000/)'\\n        post.slug = 'my-first-post'\\n        post.pub_date = timezone.now()\\n        post.author = author\\n        post.site = site\\n        post.save()\\n\\n        # Check new post saved\\n        all_posts = Post.objects.all()\\n        self.assertEquals(len(all_posts), 1)\\n        only_post = all_posts[0]\\n        self.assertEquals(only_post, post)\\n\\n        # Get the post URL\\n        post_url = only_post.get_absolute_url()\\n\\n        # Fetch the post\\n        response = self.client.get(post_url)\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check the post title is in the response\\n        self.assertTrue(post.title in response.content)\\n\\n        # Check the post text is in the response\\n        self.assertTrue(markdown.markdown(post.text) in response.content)\\n\\n        # Check the post date is in the response\\n        self.assertTrue(str(post.pub_date.year) in response.content)\\n        self.assertTrue(post.pub_date.strftime('%b') in response.content)\\n        self.assertTrue(str(post.pub_date.day) in response.content)\\n\\n        # Check the link is marked up properly\\n        self.assertTrue('<a href=\\\"http://127.0.0.1:8000/\\\">my first blog post</a>' in response.content)\\n\\n\\nclass FlatPageViewTest(BaseAcceptanceTest):\\n    def test_create_flat_page(self):\\n        # Create flat page\\n        page = FlatPage()\\n        page.url = '/about/'\\n        page.title = 'About me'\\n        page.content = 'All about me'\\n        page.save()\\n\\n        # Add the site\\n        page.sites.add(Site.objects.all()[0])\\n        page.save()\\n\\n        # Check new page saved\\n        all_pages = FlatPage.objects.all()\\n        self.assertEquals(len(all_pages), 1)\\n        only_page = all_pages[0]\\n        self.assertEquals(only_page, page)\\n\\n        # Check data correct\\n        self.assertEquals(only_page.url, '/about/')\\n        self.assertEquals(only_page.title, 'About me')\\n        self.assertEquals(only_page.content, 'All about me')\\n\\n        # Get URL\\n        page_url = str(only_page.get_absolute_url())\\n\\n        # Get the page\\n        response = self.client.get(page_url)\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check title and content in response\\n        self.assertTrue('About me' in response.content)\\n        self.assertTrue('All about me' in response.content)\\n\")), mdx(\"p\", null, \"All we've done here is to add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"site\"), \" attribute when creating a new post using the Django database API, and when we create one via the admin, we add an additional \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"site\"), \" parameter to the HTTP POST request with a value of 1. Run the tests and they should fail:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"Creating test database for alias 'default'...\\nE........\\n======================================================================\\nERROR: test_create_post (blogengine.tests.PostTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 46, in test_create_post\\n    self.assertEquals(only_post.site.name, 'example.com')\\nAttributeError: 'Post' object has no attribute 'site'\\n\\n----------------------------------------------------------------------\\nRan 9 tests in 4.313s\\n\\nFAILED (errors=1)\\nDestroying test database for alias 'default'...\\n\")), mdx(\"p\", null, \"So we need to add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"site\"), \" attribute to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Post\"), \" model. Let's do that:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"from django.db import models\\nfrom django.contrib.auth.models import User\\nfrom django.contrib.sites.models import Site\\n\\n# Create your models here.\\nclass Post(models.Model):\\n    title = models.CharField(max_length=200)\\n    pub_date = models.DateTimeField()\\n    text = models.TextField()\\n    slug = models.SlugField(max_length=40, unique=True)\\n    author = models.ForeignKey(User)\\n    site = models.ForeignKey(Site)\\n\\n    def get_absolute_url(self):\\n        return \\\"/%s/%s/%s/\\\" % (self.pub_date.year, self.pub_date.month, self.slug)\\n\\n    def __unicode__(self):\\n        return self.title\\n\\n    class Meta:\\n        ordering = [\\\"-pub_date\\\"]\\n\")), mdx(\"p\", null, \"Now create and run the migrations - you'll be prompted to create a default value for the site attribute as well:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py schemamigration --auto blogengine\\n ? The field 'Post.site' does not have a default specified, yet is NOT NULL.\\n ? Since you are adding this field, you MUST specify a default\\n ? value to use for existing rows. Would you like to:\\n ?  1. Quit now, and add a default to the field in models.py\\n ?  2. Specify a one-off value to use for existing columns now\\n ? Please select a choice: 2\\n ? Please enter Python code for your one-off default value.\\n ? The datetime module is available, so you can do e.g. datetime.date.today()\\n >>> 1\\n + Added field site on blogengine.Post\\nCreated 0005_auto__add_field_post_site.py. You can now apply this migration with: ./manage.py migrate blogengine\\n(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py migrate\\nRunning migrations for blogengine:\\n - Migrating forwards to 0005_auto__add_field_post_site.\\n > blogengine:0005_auto__add_field_post_site\\n - Loading initial data for blogengine.\\nInstalled 0 object(s) from 0 fixture(s)\\n\")), mdx(\"p\", null, \"Our tests should then pass:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py test\\nCreating test database for alias 'default'...\\n.........\\n----------------------------------------------------------------------\\nRan 9 tests in 4.261s\\n\\nOK\\nDestroying test database for alias 'default'...\\n\")), mdx(\"p\", null, \"Now we can include our full page URL on the post detail page:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-django\"\n  }, \"{% extends \\\"blogengine/includes/base.html\\\" %}\\n\\n    {% load custom_markdown %}\\n\\n    {% block content %}\\n        <div class=\\\"post\\\">\\n        <h1>{{ object.title }}</h1>\\n        <h3>{{ object.pub_date }}</h3>\\n        {{ object.text|custom_markdown }}\\n\\n        <h4>Comments</h4>\\n        <div class=\\\"fb-comments\\\" data-href=\\\"http://{{ post.site }}{{ post.get_absolute_url }}\\\" data-width=\\\"470\\\" data-num-posts=\\\"10\\\"></div>\\n\\n        </div>\\n\\n    {% endblock %}\\n\")), mdx(\"p\", null, \"If you want to customise the comments, take a look at \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developers.facebook.com/docs/plugins/comments/\"\n  }, \"the documentation for Facebook Comments\"), \".\"), mdx(\"p\", null, \"With that done, we can commit our changes:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ git add blogengine/ templates/\\n$ git commit -m 'Implemented Facebook comments'\\n\")), mdx(\"p\", null, \"And that wraps up this lesson. As usual, you can easily switch to today's lesson with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git checkout lesson-3\"), \". Next time we'll implement categories and tags, and create an RSS feed for our blog posts.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Hello again! In this instalment, we're going to do the following: Add support for flat pages Add support for multiple authors Add a third-party comment system Flat pages Django…","frontmatter":{"title":"Django Blog Tutorial - the Next Generation - Part 3","date":"3rd January 2014 12:57 pm","isoDate":"2014-01-03T12:57:30+00:00","categories":["python","django","tdd","django-blog-tutorial"]},"fields":{"path":"/blog/2014/01/03/django-blog-tutorial-the-next-generation-part-3/"}}},"pageContext":{"previous":{"fields":{"path":"/blog/2014/01/02/django-blog-tutorial-the-next-generation-part-2/"},"frontmatter":{"title":"Django blog tutorial - the next generation - part 2","date":"2014-01-02 11:28:48 +0000","layout":"post"}},"next":{"fields":{"path":"/blog/2014/01/25/my-first-yeoman-generator/"},"frontmatter":{"title":"My first Yeoman generator","date":"2014-01-25 11:38:40 +0000","layout":"post"}}}},"staticQueryHashes":["290055352","2909664151"]}