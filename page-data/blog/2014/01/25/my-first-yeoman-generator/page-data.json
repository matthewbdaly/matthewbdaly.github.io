{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/2014/01/25/my-first-yeoman-generator/","result":{"data":{"site":{"siteMetadata":{"title":"Matthew Daly","siteUrl":"https://matthewdaly.co.uk"}},"mdx":{"id":"43b8092a-2e13-5ea9-a02c-dee62c7f01d7","body":"var _excluded = [\"components\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], t.indexOf(o) >= 0 || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.indexOf(n) >= 0) continue; t[n] = r[n]; } return t; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"layout\": \"post\",\n  \"title\": \"My first Yeoman generator\",\n  \"date\": \"2014-01-25 11:38:40 +0000\",\n  \"comments\": true,\n  \"categories\": [\"javascript\", \"grunt\", \"yeoman\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"At work I use the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://www.getskeleton.com/\"\n  }, \"Skeleton boilerplate\"), \" a lot - my boss, who handles most of the design work, likes it and generally uses it for his designs. I've also been using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://gruntjs.com/\"\n  }, \"Grunt\"), \" a lot lately, so it was inevitable that I'd probably start to look for a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://yeoman.io/\"\n  }, \"Yeoman\"), \" generator for working with it.\"), mdx(\"p\", null, \"There was an existing Yeoman generator for Skeleton, but it didn't really do what I wanted. I wanted something that:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Included jQuery and Modernizr\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Automatically concatenates and minifies all the JavaScript and CSS\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Will automatically rebuild on changes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Includes LiveReload and a development server\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Includes automatic deployment via FTP\")), mdx(\"p\", null, \"After looking through the documentation for Yeoman, it was actually quick and easy to throw together my own generator and put it up. It's available \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://npmjs.org/package/generator-skellington\"\n  }, \"here\"), \", and the GitHub repository is \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/matthewbdaly/generator-skellington\"\n  }, \"here\"), \".\"), mdx(\"p\", null, \"Future plans for it include:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Adding auto-prefixing for CSS\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Removing redundant CSS rules automatically\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Possibly, alternate deployment methods\")), mdx(\"p\", null, \"Frustratingly, NPM seems to be playing up at present - it's not picking up the README file, and the Yeoman site isn't pulling it in. Any idea why, anyone?\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"At work I use the  Skeleton boilerplate  a lot - my boss, who handles most of the design work, likes it and generally uses it for his designs. I've also been using  Grunt  a lotâ€¦","frontmatter":{"title":"My first Yeoman generator","date":"25th January 2014 11:38 am","isoDate":"2014-01-25T11:38:40+00:00","categories":["javascript","grunt","yeoman"]},"fields":{"path":"/blog/2014/01/25/my-first-yeoman-generator/"}}},"pageContext":{"previous":{"fields":{"path":"/blog/2014/01/03/django-blog-tutorial-the-next-generation-part-3/"},"frontmatter":{"title":"Django Blog Tutorial - the Next Generation - Part 3","date":"2014-01-03 12:57:30 +0000","layout":"post"}},"next":{"fields":{"path":"/blog/2014/02/15/django-blog-tutorial-the-next-generation-part-4/"},"frontmatter":{"title":"Django blog tutorial - the next generation - part 4","date":"2014-02-15 17:45:00 +0000","layout":"post"}}}},"staticQueryHashes":["1776624730","458490740"]}