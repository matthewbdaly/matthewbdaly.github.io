{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/2014/09/28/django-blog-tutorial-the-next-generation-part-9/","result":{"data":{"site":{"siteMetadata":{"title":"Matthew Daly","siteUrl":"https://matthewdaly.co.uk"}},"mdx":{"id":"287f1db2-fbc3-512e-80f1-8135b91278e0","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"layout\": \"post\",\n  \"title\": \"Django Blog Tutorial - the Next Generation - Part 9\",\n  \"date\": \"2014-09-28 20:51:02 +0100\",\n  \"comments\": true,\n  \"categories\": [\"tdd\", \"python\", \"django\", \"django-blog-tutorial\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Yes, I know the eight instalment was meant to be the last one! Within 24 hours of that post going live, Django 1.7 was released, so naturally I'd like to show you how to upgrade to it.\"), mdx(\"p\", null, \"The biggest change is that Django 1.7 introduces its own migration system, which means South is now surplus to requirements. We therefore need to switch from South to Django's native migrations. Fortunately, this is fairly straightforward.\"), mdx(\"p\", null, \"First of all, activate your virtualenv:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ virtualenv venv\\n\")), mdx(\"p\", null, \"Then make sure your migrations are up to date:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ python manage.py syncdb\\n$ python manage.py migrate\\n\")), mdx(\"p\", null, \"Then, upgrade your Django version and uninstall South:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ pip install Django --upgrade\\n$ pip uninstall South\\n$ pip freeze > requirements.txt\\n\")), mdx(\"p\", null, \"Next, remove South from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"INSTALLED_APPS\"), \" in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"django_tutorial_blog_ng/settings.py\"), \".\"), mdx(\"p\", null, \"You now need to delete all of the numbered migration files in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"blogengine/migrations/\"), \", and the relevant \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".pyc\"), \" files, but NOT the directory or the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__init__.py\"), \" file. You can do so with this command on Linux or OS X:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ rm blogengine/migrations/00*\\n\")), mdx(\"p\", null, \"Next, we recreate our migrations with the following command:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ python manage.py makemigrations\\nMigrations for 'blogengine':\\n  0001_initial.py:\\n    - Create model Category\\n    - Create model Post\\n    - Create model Tag\\n    - Add field tags to post\\n\")), mdx(\"p\", null, \"Then we run the migrations:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ python manage.py migrate\\nOperations to perform:\\n  Synchronize unmigrated apps: sitemaps, django_jenkins, debug_toolbar\\n  Apply all migrations: sessions, admin, sites, flatpages, contenttypes, auth, blogengine\\nSynchronizing apps without migrations:\\n  Creating tables...\\n  Installing custom SQL...\\n  Installing indexes...\\nRunning migrations:\\n  Applying contenttypes.0001_initial... FAKED\\n  Applying auth.0001_initial... FAKED\\n  Applying admin.0001_initial... FAKED\\n  Applying sites.0001_initial... FAKED\\n  Applying blogengine.0001_initial... FAKED\\n  Applying flatpages.0001_initial... FAKED\\n  Applying sessions.0001_initial... FAKED\\n\")), mdx(\"p\", null, \"Don't worry too much if the output doesn't look exactly the same as this - as long as it works, that's the main thing.\"), mdx(\"p\", null, \"Let's run our test suite to ensure it works:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ python manage.py jenkins\\nCreating test database for alias 'default'...\\n....FF.F.FFFFFF..............\\n======================================================================\\nFAIL: test_create_post (blogengine.tests.AdminTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 385, in test_create_post\\n    self.assertTrue('added successfully' in response.content)\\nAssertionError: False is not true\\n\\n======================================================================\\nFAIL: test_create_post_without_tag (blogengine.tests.AdminTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 417, in test_create_post_without_tag\\n    self.assertTrue('added successfully' in response.content)\\nAssertionError: False is not true\\n\\n======================================================================\\nFAIL: test_delete_category (blogengine.tests.AdminTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 278, in test_delete_category\\n    self.assertEquals(response.status_code, 200)\\nAssertionError: 404 != 200\\n\\n======================================================================\\nFAIL: test_delete_tag (blogengine.tests.AdminTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 346, in test_delete_tag\\n    self.assertEquals(response.status_code, 200)\\nAssertionError: 404 != 200\\n\\n======================================================================\\nFAIL: test_edit_category (blogengine.tests.AdminTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 255, in test_edit_category\\n    self.assertEquals(response.status_code, 200)\\nAssertionError: 404 != 200\\n\\n======================================================================\\nFAIL: test_edit_post (blogengine.tests.AdminTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 447, in test_edit_post\\n    self.assertEquals(response.status_code, 200)\\nAssertionError: 404 != 200\\n\\n======================================================================\\nFAIL: test_edit_tag (blogengine.tests.AdminTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 323, in test_edit_tag\\n    self.assertEquals(response.status_code, 200)\\nAssertionError: 404 != 200\\n\\n======================================================================\\nFAIL: test_login (blogengine.tests.AdminTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 183, in test_login\\n    self.assertEquals(response.status_code, 200)\\nAssertionError: 302 != 200\\n\\n======================================================================\\nFAIL: test_logout (blogengine.tests.AdminTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 214, in test_logout\\n    self.assertEquals(response.status_code, 200)\\nAssertionError: 302 != 200\\n\\n----------------------------------------------------------------------\\nRan 29 tests in 7.383s\\n\\nFAILED (failures=9)\\nDestroying test database for alias 'default'...\\n\")), mdx(\"p\", null, \"We have an issue here. A load of the tests for the admin interface now fail. If we now try running the dev server, we see this error:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ python manage.py runserver\\nPerforming system checks...\\n\\nSystem check identified no issues (0 silenced).\\nSeptember 28, 2014 - 20:16:47\\nDjango version 1.7, using settings 'django_tutorial_blog_ng.settings'\\nStarting development server at http://127.0.0.1:8000/\\nQuit the server with CONTROL-C.\\nUnhandled exception in thread started by <function wrapper at 0x1024a5ed8>\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/utils/autoreload.py\\\", line 222, in wrapper\\n    fn(*args, **kwargs)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/core/management/commands/runserver.py\\\", line 132, in inner_run\\n    handler = self.get_handler(*args, **options)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/contrib/staticfiles/management/commands/runserver.py\\\", line 25, in get_handler\\n    handler = super(Command, self).get_handler(*args, **options)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/core/management/commands/runserver.py\\\", line 48, in get_handler\\n    return get_internal_wsgi_application()\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/core/servers/basehttp.py\\\", line 66, in get_internal_wsgi_application\\n    sys.exc_info()[2])\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/core/servers/basehttp.py\\\", line 56, in get_internal_wsgi_application\\n    return import_string(app_path)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/utils/module_loading.py\\\", line 26, in import_string\\n    module = import_module(module_path)\\n  File \\\"/usr/local/Cellar/python/2.7.8_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/importlib/__init__.py\\\", line 37, in import_module\\n    __import__(name)\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/django_tutorial_blog_ng/wsgi.py\\\", line 14, in <module>\\n    from dj_static import Cling\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/dj_static.py\\\", line 7, in <module>\\n    from django.core.handlers.base import get_path_info\\ndjango.core.exceptions.ImproperlyConfigured: WSGI application 'django_tutorial_blog_ng.wsgi.application' could not be loaded; Error importing module: 'cannot import name get_path_info'\\n\")), mdx(\"p\", null, \"Fortunately, the error above is easy to fix by upgrading \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dj_static\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ pip install dj_static --upgrade\\n$ pip freeze > requirements.txt\\n\")), mdx(\"p\", null, \"That resolves the error in serving static files, but not the error with the admin. If you run the dev server, you'll be able to see that the admin actually works fine. The problem is caused by the test client not following redirects in the admin. We can easily run just the admin tests with the following command:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ python manage.py test blogengine.tests.AdminTest\\nCreating test database for alias 'default'...\\n.FF.F.FFFFFF\\n======================================================================\\nFAIL: test_create_post (blogengine.tests.AdminTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 385, in test_create_post\\n    self.assertTrue('added successfully' in response.content)\\nAssertionError: False is not true\\n\\n======================================================================\\nFAIL: test_create_post_without_tag (blogengine.tests.AdminTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 417, in test_create_post_without_tag\\n    self.assertTrue('added successfully' in response.content)\\nAssertionError: False is not true\\n\\n======================================================================\\nFAIL: test_delete_category (blogengine.tests.AdminTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 278, in test_delete_category\\n    self.assertEquals(response.status_code, 200)\\nAssertionError: 404 != 200\\n\\n======================================================================\\nFAIL: test_delete_tag (blogengine.tests.AdminTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 346, in test_delete_tag\\n    self.assertEquals(response.status_code, 200)\\nAssertionError: 404 != 200\\n\\n======================================================================\\nFAIL: test_edit_category (blogengine.tests.AdminTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 255, in test_edit_category\\n    self.assertEquals(response.status_code, 200)\\nAssertionError: 404 != 200\\n\\n======================================================================\\nFAIL: test_edit_post (blogengine.tests.AdminTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 447, in test_edit_post\\n    self.assertEquals(response.status_code, 200)\\nAssertionError: 404 != 200\\n\\n======================================================================\\nFAIL: test_edit_tag (blogengine.tests.AdminTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 323, in test_edit_tag\\n    self.assertEquals(response.status_code, 200)\\nAssertionError: 404 != 200\\n\\n======================================================================\\nFAIL: test_login (blogengine.tests.AdminTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 183, in test_login\\n    self.assertEquals(response.status_code, 200)\\nAssertionError: 302 != 200\\n\\n======================================================================\\nFAIL: test_logout (blogengine.tests.AdminTest)\\n----------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File \\\"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py\\\", line 214, in test_logout\\n    self.assertEquals(response.status_code, 200)\\nAssertionError: 302 != 200\\n\\n----------------------------------------------------------------------\\nRan 12 tests in 3.283s\\n\\nFAILED (failures=9)\\nDestroying test database for alias 'default'...\\n\")), mdx(\"p\", null, \"Let's commit our changes so far first:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ git add django_tutorial_blog_ng/ requirements.txt blogengine/\\n$ git commit -m 'Upgraded to Django 1.7'\\n\")), mdx(\"p\", null, \"Now let's fix our tests. Here's the amended version of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AdminTest\"), \" class:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"class AdminTest(BaseAcceptanceTest):\\n    fixtures = ['users.json']\\n\\n    def test_login(self):\\n        # Get login page\\n        response = self.client.get('/admin/', follow=True)\\n\\n        # Check response code\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check 'Log in' in response\\n        self.assertTrue('Log in' in response.content)\\n\\n        # Log the user in\\n        self.client.login(username='bobsmith', password=\\\"password\\\")\\n\\n        # Check response code\\n        response = self.client.get('/admin/')\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check 'Log out' in response\\n        self.assertTrue('Log out' in response.content)\\n\\n    def test_logout(self):\\n        # Log in\\n        self.client.login(username='bobsmith', password=\\\"password\\\")\\n\\n        # Check response code\\n        response = self.client.get('/admin/')\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check 'Log out' in response\\n        self.assertTrue('Log out' in response.content)\\n\\n        # Log out\\n        self.client.logout()\\n\\n        # Check response code\\n        response = self.client.get('/admin/', follow=True)\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check 'Log in' in response\\n        self.assertTrue('Log in' in response.content)\\n\\n    def test_create_category(self):\\n        # Log in\\n        self.client.login(username='bobsmith', password=\\\"password\\\")\\n\\n        # Check response code\\n        response = self.client.get('/admin/blogengine/category/add/')\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Create the new category\\n        response = self.client.post('/admin/blogengine/category/add/', {\\n            'name': 'python',\\n            'description': 'The Python programming language'\\n            },\\n            follow=True\\n        )\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check added successfully\\n        self.assertTrue('added successfully' in response.content)\\n\\n        # Check new category now in database\\n        all_categories = Category.objects.all()\\n        self.assertEquals(len(all_categories), 1)\\n\\n    def test_edit_category(self):\\n        # Create the category\\n        category = CategoryFactory()\\n\\n        # Log in\\n        self.client.login(username='bobsmith', password=\\\"password\\\")\\n\\n        # Edit the category\\n        response = self.client.post('/admin/blogengine/category/' + str(category.pk) + '/', {\\n            'name': 'perl',\\n            'description': 'The Perl programming language'\\n            }, follow=True)\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check changed successfully\\n        self.assertTrue('changed successfully' in response.content)\\n\\n        # Check category amended\\n        all_categories = Category.objects.all()\\n        self.assertEquals(len(all_categories), 1)\\n        only_category = all_categories[0]\\n        self.assertEquals(only_category.name, 'perl')\\n        self.assertEquals(only_category.description, 'The Perl programming language')\\n\\n    def test_delete_category(self):\\n        # Create the category\\n        category = CategoryFactory()\\n\\n        # Log in\\n        self.client.login(username='bobsmith', password=\\\"password\\\")\\n\\n        # Delete the category\\n        response = self.client.post('/admin/blogengine/category/' + str(category.pk) + '/delete/', {\\n            'post': 'yes'\\n        }, follow=True)\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check deleted successfully\\n        self.assertTrue('deleted successfully' in response.content)\\n\\n        # Check category deleted\\n        all_categories = Category.objects.all()\\n        self.assertEquals(len(all_categories), 0)\\n\\n    def test_create_tag(self):\\n        # Log in\\n        self.client.login(username='bobsmith', password=\\\"password\\\")\\n\\n        # Check response code\\n        response = self.client.get('/admin/blogengine/tag/add/')\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Create the new tag\\n        response = self.client.post('/admin/blogengine/tag/add/', {\\n            'name': 'python',\\n            'description': 'The Python programming language'\\n            },\\n            follow=True\\n        )\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check added successfully\\n        self.assertTrue('added successfully' in response.content)\\n\\n        # Check new tag now in database\\n        all_tags = Tag.objects.all()\\n        self.assertEquals(len(all_tags), 1)\\n\\n    def test_edit_tag(self):\\n        # Create the tag\\n        tag = TagFactory()\\n\\n        # Log in\\n        self.client.login(username='bobsmith', password=\\\"password\\\")\\n\\n        # Edit the tag\\n        response = self.client.post('/admin/blogengine/tag/' + str(tag.pk) + '/', {\\n            'name': 'perl',\\n            'description': 'The Perl programming language'\\n            }, follow=True)\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check changed successfully\\n        self.assertTrue('changed successfully' in response.content)\\n\\n        # Check tag amended\\n        all_tags = Tag.objects.all()\\n        self.assertEquals(len(all_tags), 1)\\n        only_tag = all_tags[0]\\n        self.assertEquals(only_tag.name, 'perl')\\n        self.assertEquals(only_tag.description, 'The Perl programming language')\\n\\n    def test_delete_tag(self):\\n        # Create the tag\\n        tag = TagFactory()\\n\\n        # Log in\\n        self.client.login(username='bobsmith', password=\\\"password\\\")\\n\\n        # Delete the tag\\n        response = self.client.post('/admin/blogengine/tag/' + str(tag.pk) + '/delete/', {\\n            'post': 'yes'\\n        }, follow=True)\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check deleted successfully\\n        self.assertTrue('deleted successfully' in response.content)\\n\\n        # Check tag deleted\\n        all_tags = Tag.objects.all()\\n        self.assertEquals(len(all_tags), 0)\\n\\n    def test_create_post(self):\\n        # Create the category\\n        category = CategoryFactory()\\n\\n        # Create the tag\\n        tag = TagFactory()\\n\\n        # Log in\\n        self.client.login(username='bobsmith', password=\\\"password\\\")\\n\\n        # Check response code\\n        response = self.client.get('/admin/blogengine/post/add/')\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Create the new post\\n        response = self.client.post('/admin/blogengine/post/add/', {\\n            'title': 'My first post',\\n            'text': 'This is my first post',\\n            'pub_date_0': '2013-12-28',\\n            'pub_date_1': '22:00:04',\\n            'slug': 'my-first-post',\\n            'site': '1',\\n            'category': str(category.pk),\\n            'tags': str(tag.pk)\\n        },\\n        follow=True\\n        )\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check added successfully\\n        self.assertTrue('added successfully' in response.content)\\n\\n        # Check new post now in database\\n        all_posts = Post.objects.all()\\n        self.assertEquals(len(all_posts), 1)\\n    \\n    def test_create_post_without_tag(self):\\n        # Create the category\\n        category = CategoryFactory()\\n\\n        # Log in\\n        self.client.login(username='bobsmith', password=\\\"password\\\")\\n\\n        # Check response code\\n        response = self.client.get('/admin/blogengine/post/add/')\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Create the new post\\n        response = self.client.post('/admin/blogengine/post/add/', {\\n            'title': 'My first post',\\n            'text': 'This is my first post',\\n            'pub_date_0': '2013-12-28',\\n            'pub_date_1': '22:00:04',\\n            'slug': 'my-first-post',\\n            'site': '1',\\n            'category': str(category.pk)\\n        },\\n        follow=True\\n        )\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check added successfully\\n        self.assertTrue('added successfully' in response.content)\\n\\n        # Check new post now in database\\n        all_posts = Post.objects.all()\\n        self.assertEquals(len(all_posts), 1)\\n\\n    def test_edit_post(self):\\n        # Create the post\\n        post = PostFactory()\\n\\n        # Create the category\\n        category = CategoryFactory()\\n\\n        # Create the tag\\n        tag = TagFactory()\\n        post.tags.add(tag)\\n\\n        # Log in\\n        self.client.login(username='bobsmith', password=\\\"password\\\")\\n\\n        # Edit the post\\n        response = self.client.post('/admin/blogengine/post/' + str(post.pk) + '/', {\\n            'title': 'My second post',\\n            'text': 'This is my second blog post',\\n            'pub_date_0': '2013-12-28',\\n            'pub_date_1': '22:00:04',\\n            'slug': 'my-second-post',\\n            'site': '1',\\n            'category': str(category.pk),\\n            'tags': str(tag.pk)\\n        },\\n        follow=True\\n        )\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check changed successfully\\n        self.assertTrue('changed successfully' in response.content)\\n\\n        # Check post amended\\n        all_posts = Post.objects.all()\\n        self.assertEquals(len(all_posts), 1)\\n        only_post = all_posts[0]\\n        self.assertEquals(only_post.title, 'My second post')\\n        self.assertEquals(only_post.text, 'This is my second blog post')\\n\\n    def test_delete_post(self):\\n        # Create the post\\n        post = PostFactory()\\n\\n        # Create the tag\\n        tag = TagFactory()\\n        post.tags.add(tag)\\n\\n        # Check new post saved\\n        all_posts = Post.objects.all()\\n        self.assertEquals(len(all_posts), 1)\\n\\n        # Log in\\n        self.client.login(username='bobsmith', password=\\\"password\\\")\\n\\n        # Delete the post\\n        response = self.client.post('/admin/blogengine/post/' + str(post.pk) + '/delete/', {\\n            'post': 'yes'\\n        }, follow=True)\\n        self.assertEquals(response.status_code, 200)\\n\\n        # Check deleted successfully\\n        self.assertTrue('deleted successfully' in response.content)\\n\\n        # Check post deleted\\n        all_posts = Post.objects.all()\\n        self.assertEquals(len(all_posts), 0)\\n\")), mdx(\"p\", null, \"There are two main issues here. The first is that when we try to edit or delete an existing item, or refer to it when creating something else, we can no longer rely on the number representing the primary key being set to 1. So we need to specifically obtain this, rather than hard-coding it to 1. Therefore, whenever we pass through a number to represent an item (with the exception of the site, but including tags, categories and posts), we need to instead fetch its primary key and return it. So, above where we try to delete a post, we replace \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"1\"), \" with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"str(post.pk)\"), \". This will solve a lot of the problems. As there's a lot of them, I won't go through each one, but you can see the entire class above for reference, and if you've followed along so far, you shouldn't have any problems.\"), mdx(\"p\", null, \"The other issue we need to fix is the login and logout tests. We simply add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"follow=True\"), \" to these to ensure that the test client follows the redirects.\"), mdx(\"p\", null, \"Let's run our tests to make sure they pass:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ python manage.py jenkins\\nCreating test database for alias 'default'...\\n.............................\\n----------------------------------------------------------------------\\nRan 29 tests in 8.210s\\n\\nOK\\nDestroying test database for alias 'default'...\\n\")), mdx(\"p\", null, \"With that done, you can commit your changes:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ git add blogengine/tests.py\\n$ git commit -m 'Fixed broken tests'\\n\")), mdx(\"p\", null, \"Don't forget to deploy your changes:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ fab deploy\\n\")), mdx(\"p\", null, \"Our blog has now been happily migrated over to Django 1.7!\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Yes, I know the eight instalment was meant to be the last one! Within 24 hours of that post going live, Django 1.7 was released, so naturally I'd like to show you how to upgrade to…","frontmatter":{"title":"Django Blog Tutorial - the Next Generation - Part 9","date":"28th September 2014 7:51 pm","isoDate":"2014-09-28T19:51:02+00:00","categories":["tdd","python","django","django-blog-tutorial"]},"fields":{"path":"/blog/2014/09/28/django-blog-tutorial-the-next-generation-part-9/"}}},"pageContext":{"previous":{"fields":{"path":"/blog/2014/09/28/changing-date-format-from-dd-slash-mm-slash-yyyy-to-yyyy-mm-dd-in-vim/"},"frontmatter":{"title":"Changing date format from DD/MM/YYYY to YYYY-MM-DD in Vim","date":"2014-09-28 19:53:34 +0100","layout":"post"}},"next":{"fields":{"path":"/blog/2014/10/05/introducing-generator-simple-static-blog/"},"frontmatter":{"title":"Introducing generator-simple-static-blog","date":"2014-10-05 19:56:46 +0100","layout":"post"}}}},"staticQueryHashes":["290055352","2909664151"]}