{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/2018/01/09/creating-laravel-helpers/","result":{"data":{"site":{"siteMetadata":{"title":"Matthew Daly","siteUrl":"https://matthewdaly.co.uk"}},"mdx":{"id":"ca38e183-71e4-5439-a3a3-2c96901cb8bc","body":"var _excluded = [\"components\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], t.indexOf(o) >= 0 || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.indexOf(n) >= 0) continue; t[n] = r[n]; } return t; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Creating Laravel Helpers\",\n  \"date\": \"2018-01-09 17:26:26 +0000\",\n  \"layout\": \"post\",\n  \"categories\": [\"php\", \"laravel\"],\n  \"comments\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Although helpers are an important part of Laravel, the documentation doesn't really touch on creating them. Fortunately, doing so it fairly easy.\"), mdx(\"p\", null, \"Here I'm building a helper for formatting dates for the HTML5 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"datetime-local\"), \" form input. First we define the helper function in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"app\\\\Helpers.php\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-php\"\n  }, \"<?php\\n\\nuse Carbon\\\\Carbon;\\n\\nif (!function_exists('format_date')) {\\n    function format_date(string $date)\\n    {\\n        return Carbon::parse($date, config('app.timezone'))->format('Y-m-d\\\\TH:i:s');\\n    }\\n}\\n\")), mdx(\"p\", null, \"Then we create a service provider to load them:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-php\"\n  }, \"<?php\\n\\nnamespace App\\\\Providers;\\n\\nuse Illuminate\\\\Support\\\\ServiceProvider;\\n\\nclass HelperServiceProvider extends ServiceProvider\\n{\\n    /**\\n     * Bootstrap the application services.\\n     *\\n     * @return void\\n     */\\n    public function boot()\\n    {\\n        //\\n    }\\n\\n    /**\\n     * Register the application services.\\n     *\\n     * @return void\\n     */\\n    public function register()\\n    {\\n        //\\n        require_once app_path() . '/Helpers.php';\\n    }\\n}\\n\")), mdx(\"p\", null, \"Finally,we register the service provider in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"config/app.php\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-php\"\n  }, \"    'providers' => [\\n\\n       ...\\n        App\\\\Providers\\\\HelperServiceProvider::class,\\n   ],\\n\")), mdx(\"p\", null, \"Of course, once you have this all set up for one helper, it's easy to add more because they can all go in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"app/Helpers.php\"), \".\"), mdx(\"p\", null, \"Creating your own helpers is a good way of refactoring unwanted logic out of your Blade templates or controllers and making it more reusable and maintainable, particularly for things like formatting dates or strings.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Although helpers are an important part of Laravel, the documentation doesn't really touch on creating them. Fortunately, doing so it fairly easy. Here I'm building a helper forâ€¦","frontmatter":{"title":"Creating Laravel Helpers","date":"9th January 2018 5:26 pm","isoDate":"2018-01-09T17:26:26+00:00","categories":["php","laravel"]},"fields":{"path":"/blog/2018/01/09/creating-laravel-helpers/"}}},"pageContext":{"previous":{"fields":{"path":"/blog/2018/01/08/getting-the-type-of-an-unsupported-postgres-field-in-laravel/"},"frontmatter":{"title":"Getting the type of an unsupported Postgres field in Laravel","date":"2018-01-08 14:00:15 +0000","layout":"post"}},"next":{"fields":{"path":"/blog/2018/01/10/easy-repositories-and-decorators-with-laravel-repositories/"},"frontmatter":{"title":"Easy repositories and decorators with Laravel Repositories","date":"2018-01-10 12:22:44 +0000","layout":"post"}}}},"staticQueryHashes":["1776624730","458490740"]}