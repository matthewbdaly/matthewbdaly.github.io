{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/2018/01/02/a-laravel-package-boilerplate/","result":{"data":{"site":{"siteMetadata":{"title":"Matthew Daly","siteUrl":"https://matthewdaly.co.uk"}},"mdx":{"id":"8c84526f-b3d9-5c1d-9336-90b61ab45d1d","body":"var _excluded = [\"components\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], t.indexOf(o) >= 0 || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.indexOf(n) >= 0) continue; t[n] = r[n]; } return t; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"A Laravel package boilerplate\",\n  \"date\": \"2018-01-02 12:12:15 +0000\",\n  \"layout\": \"post\",\n  \"categories\": [\"php\", \"laravel\", \"artisan\"],\n  \"comments\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The second package I've been working on recently is \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/matthewbdaly/laravel-package-boilerplate\"\n  }, \"Laravel Package Boilerplate\"), \". It's a basic starter boilerplate for building your own Laravel packages.\"), mdx(\"p\", null, \"It's not meant to be installed as a project dependency. Instead, run the following command to create a new project boilerplate with it:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"composer create-project --prefer-dist matthewbdaly/laravel-package-boilerplate <YOUR_NEW_PACKAGE_DIRECTORY>\\n\")), mdx(\"p\", null, \"This will create a new folder that includes a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src\"), \" folder containing a service provider, and a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tests\"), \" folder containing a preconfigured base test case, as well as a simple test case for tests that don't need the full application instantiated, in order to help keep your test suite as fast as possible.\"), mdx(\"p\", null, \"In addition, it includes configuration files for:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"PHPUnit\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"PHP CodeSniffer\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Travis CI\")), mdx(\"p\", null, \"That way you can start your project off the right way with very little effort.\"), mdx(\"p\", null, \"I've also added my Artisan Standalone project as a dependency - that way you can access any Artisan commands you need to generate files you need as follows:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ vendor/bin/artisan\\n\")), mdx(\"p\", null, \"Hopefully this package should make it a lot easier to create new Laravel packages in future.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"The second package I've been working on recently is  Laravel Package Boilerplate . It's a basic starter boilerplate for building your own Laravel packages. It's not meant to beâ€¦","frontmatter":{"title":"A Laravel package boilerplate","date":"2nd January 2018 12:12 pm","isoDate":"2018-01-02T12:12:15+00:00","categories":["php","laravel","artisan"]},"fields":{"path":"/blog/2018/01/02/a-laravel-package-boilerplate/"}}},"pageContext":{"previous":{"fields":{"path":"/blog/2018/01/02/using-artisan-from-standalone-laravel-packages/"},"frontmatter":{"title":"Using Artisan from standalone Laravel packages","date":"2018-01-02 12:01:10 +0000","layout":"post"}},"next":{"fields":{"path":"/blog/2018/01/03/adding-dynamic-flat-pages-to-your-laravel-app/"},"frontmatter":{"title":"Adding dynamic flat pages to your Laravel app","date":"2018-01-03 11:49:11 +0000","layout":"post"}}}},"staticQueryHashes":["1776624730","458490740"]}