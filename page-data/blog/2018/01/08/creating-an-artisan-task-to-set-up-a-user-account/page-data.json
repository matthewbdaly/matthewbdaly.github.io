{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/2018/01/08/creating-an-artisan-task-to-set-up-a-user-account/","result":{"data":{"site":{"siteMetadata":{"title":"Matthew Daly","siteUrl":"https://matthewdaly.co.uk"}},"mdx":{"id":"b094ee00-5185-5466-a701-72ec7e2118ff","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Creating an Artisan task to set up a user account\",\n  \"date\": \"2018-01-08 12:52:39 +0000\",\n  \"layout\": \"post\",\n  \"categories\": [\"php\", \"laravel\", \"artisan\"],\n  \"comments\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"When working with any Laravel application that implements authentication, you'll need to set up a user account to be able to work with it. One way of doing that is to add a user in a seeder, but that's only really suitable if every user is going to use the same details.\"), mdx(\"p\", null, \"Instead, you may want to create an Artisan command to set up the user account. Here's an example of a command that does that:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-php\"\n  }, \"<?php\\n\\nnamespace App\\\\Console\\\\Commands;\\n\\nuse Illuminate\\\\Console\\\\Command;\\nuse Hash;\\n\\nclass CreateUser extends Command\\n{\\n    /**\\n     * The name and signature of the console command.\\n     *\\n     * @var string\\n     */\\n    protected $signature = 'create:user';\\n\\n    /**\\n     * The console command description.\\n     *\\n     * @var string\\n     */\\n    protected $description = 'Creates a single user';\\n\\n    /**\\n     * Create a new command instance.\\n     *\\n     * @return void\\n     */\\n    public function __construct()\\n    {\\n        parent::__construct();\\n    }\\n\\n    /**\\n     * Execute the console command.\\n     *\\n     * @return mixed\\n     */\\n    public function handle()\\n    {\\n        // Get user model from config\\n        $model = config('auth.providers.users.model');\\n\\n        // Let user know what this will do\\n        $this->info('I\\\\'ll ask you for the details I need to set up the user');\\n\\n        // Get username\\n        $name = $this->ask('Please provide the username');\\n\\n        // Get email\\n        $email = $this->ask('Please provide the email address');\\n\\n        // Get password\\n        $password = $this->secret('Please provide the password');\\n\\n        // Create model\\n        $user = new $model;\\n        $user->name = $name;\\n        $user->email = $email;\\n        $user->password = Hash::make($password);\\n        $user->save();\\n        $this->info('User saved');\\n    }\\n}\\n\")), mdx(\"p\", null, \"We fetch the user model from the config, before asking the user for the data we need. Then we insert it into the database and confirm it to the user.\"), mdx(\"p\", null, \"Then we just need to register the command in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App\\\\Console\\\\Kernel.php\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-php\"\n  }, \"    protected $commands = [\\n        \\\\App\\\\Console\\\\Commands\\\\CreateUser::class,\\n    ];\\n\")), mdx(\"p\", null, \"And we can run our command with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"php artisan create:user\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"When working with any Laravel application that implements authentication, you'll need to set up a user account to be able to work with it. One way of doing that is to add a user inâ€¦","frontmatter":{"title":"Creating an Artisan task to set up a user account","date":"08 January 2018","categories":["php","laravel","artisan"]},"fields":{"path":"/blog/2018/01/08/creating-an-artisan-task-to-set-up-a-user-account/"}}},"pageContext":{"previous":{"fields":{"path":"/blog/2018/01/07/adding-comments-to-models-in-laravel/"},"frontmatter":{"title":"Adding comments to models in Laravel","date":"2018-01-07 17:21:50 +0000","layout":"post"}},"next":{"fields":{"path":"/blog/2018/01/08/getting-the-type-of-an-unsupported-postgres-field-in-laravel/"},"frontmatter":{"title":"Getting the type of an unsupported Postgres field in Laravel","date":"2018-01-08 14:00:15 +0000","layout":"post"}}}},"staticQueryHashes":["2909664151"]}