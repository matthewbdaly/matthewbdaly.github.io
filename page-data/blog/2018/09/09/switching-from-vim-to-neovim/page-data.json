{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/2018/09/09/switching-from-vim-to-neovim/","result":{"data":{"site":{"siteMetadata":{"title":"Matthew Daly","siteUrl":"https://matthewdaly.co.uk"}},"mdx":{"id":"139afe73-671a-54c9-95c5-d94bec50be69","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Switching from Vim to Neovim\",\n  \"date\": \"2018-09-09 13:40:35 +0100\",\n  \"layout\": \"post\",\n  \"categories\": [\"vim\", \"neovim\"],\n  \"comments\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I honestly thought it would never happen. I've been using Vim since 2008, and every other editor I've tried (including VSCode, Emacs, Sublime Text and Atom) hasn't come up to scratch. There were a few useful features in PHPStorm, to be fair, but nothing that justified the bother of moving. Also, I suffer from a degree of RSI from my prior career as an insurance clerk (years of using crap keyboards and mice on Windows XP took its toll...), and Vim has always been the most RSI-friendly editor I found.\"), mdx(\"p\", null, \"Yet I have actually gone ahead and migrated away... to Neovim. Of course, the fact that the workflow is essentially identical helps in the migration process, as does the fact that it supports most of the same plugins.\"), mdx(\"p\", null, \"My workflow has always been strongly CLI-based. I use GNU Screen and Byobu together to run multiple \\\"tabs\\\" in the terminal, so the lack of GUI support in Neovim doesn't bother me in the slightest. The only change I really made was to my \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".bash_aliases\"), \" so that the Vim command ran \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"screen -t Vim nvim\"), \", so that it would open up Neovim rather than Vim in a new Screen tab.\"), mdx(\"p\", null, \"Initially I switched straight over to using the same settings and plugins I had with Vim, and they worked seamlessly. However, after a while I decided to use the opportunity to completely overhaul the plugins and settings I used and largely start over - cull the ones I no longer needed, add some new ones, and comment it properly.\"), mdx(\"h2\", null, \"Loading plugins\"), mdx(\"p\", null, \"I used to use Pathogen to manage my Vim plugins, but it didn't actually import the plugins itself, and just provided a structure for them. This meant that the only practical way I found to pull in third-party plugins was to set them up as Git submodules, meaning I had to store my configuration in version control and clone it recursively onto a new machine. It also made updating cumbersome.\"), mdx(\"p\", null, \"Now I've switched to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/junegunn/vim-plug\"\n  }, \"vim-plug\"), \", which makes things much easier. I can define my dependencies in my \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".config/nvim/init.vim\"), \" and pull them in with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PlugInstall\"), \". If I want to update them, I run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PlugUpdate\"), \", or if I need to add something else, I merely add it in the file and run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PlugInstall\"), \" again. Nice and easy.\"), mdx(\"p\", null, \"The first section of my configuration file loads the dependencies:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-vim\"\n  }, \"call plug#begin()\\n\\n\\\" NERDTree\\nPlug 'scrooloose/nerdtree'\\n\\n\\\" Git integration\\nPlug 'tpope/vim-fugitive'\\nPlug 'airblade/vim-gitgutter'\\n\\n\\\" Linting\\nPlug 'neomake/neomake'\\nPlug 'w0rp/ale'\\n\\n\\\" PHP-specific integration\\nPlug 'phpactor/phpactor' ,  {'do': 'composer install', 'for': 'php'}\\nPlug 'ncm2/ncm2'\\nPlug 'roxma/nvim-yarp'\\nPlug 'phpactor/ncm2-phpactor'\\n\\n\\\" Snippets\\nPlug 'SirVer/ultisnips'\\nPlug 'honza/vim-snippets'\\n\\n\\\" Comments\\nPlug 'tpope/vim-commentary'\\n\\n\\\" Search\\nPlug 'ctrlpvim/ctrlp.vim'\\n\\n\\\" Syntax\\nPlug 'sheerun/vim-polyglot'\\nPlug 'matthewbdaly/vim-filetype-settings'\\n\\n\\\" Themes\\nPlug 'nanotech/jellybeans.vim' , {'as': 'jellybeans'}\\n\\ncall plug#end()\\n\")), mdx(\"p\", null, \"As always, it's a good idea to comment your config and try to group things logically. Note that I have one plugin of my own listed here - this is just a collection of settings for different filetypes, such as making Javascript files use 2 spaces for indentation, and it's easier to keep that in a repository and pull it in as a dependency.\"), mdx(\"h2\", null, \"Completion\"), mdx(\"p\", null, \"The next part of the config deals with configuration. Most of the time the default omnicompletion is pretty good, but in the process of building out this config, I discovered PHPActor, which has massively improved my development experience with PHP - it finally provides completion as good as most IDE's, and also provides similar refactoring tools. My config for completion currently looks like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-vim\"\n  }, \"\\\"Completion\\nautocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o\\nset ofu=syntaxcomplete#Complete\\nautocmd FileType php setlocal omnifunc=phpactor#Complete\\nlet g:phpactorOmniError = v:true\\nautocmd BufEnter * call ncm2#enable_for_buffer()\\nset completeopt=noinsert,menuone,noselect\\n\")), mdx(\"h2\", null, \"General config\"), mdx(\"p\", null, \"This is a set of standard settings for the general behaviour of the application, such as setting the colorscheme and default indentation levels. I also routinely disable the mouse because it bugs me.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-vim\"\n  }, \"\\\"General\\nsyntax on\\ncolorscheme jellybeans\\nset nu\\nfiletype plugin indent on\\nset nocp\\nset ruler\\nset wildmenu\\nset mouse-=a\\nset t_Co=256\\n\\n\\\"Code folding\\nset foldmethod=manual\\n\\n\\\"Tabs and spacing\\nset autoindent\\nset cindent\\nset tabstop=4\\nset expandtab\\nset shiftwidth=4\\nset smarttab\\n\\n\\\"Search\\nset hlsearch\\nset incsearch\\nset ignorecase\\nset smartcase\\nset diffopt +=iwhite\\n\")), mdx(\"h2\", null, \"Markdown configuration\"), mdx(\"p\", null, \"This section sets the file type for Markdown. It disables the Markdown plugin included in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vim-polyglot\"), \" as I had problems with it, and sets the languages that will be highlighted in fenced code blocks. I may at some point migrate this to the filetype repository.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-vim\"\n  }, \"\\\"Syntax highlighting in Markdown\\nau BufNewFile,BufReadPost *.md set filetype=markdown\\nlet g:polyglot_disabled = ['markdown']\\nlet g:markdown_fenced_languages = ['bash=sh', 'css', 'django', 'javascript', 'js=javascript', 'json=javascript', 'perl', 'php', 'python', 'ruby', 'sass', 'xml', 'html', 'vim']\\n\")), mdx(\"h2\", null, \"Neomake\"), mdx(\"p\", null, \"I used to use Syntastic for checking my code for errors, but I've always found it problematic - it was slow and would often block the editor for some time. Neovim does have support for asynchronous jobs (as does Vim 8), but Syntastic doesn't use it, so I decided to look elsewhere.\"), mdx(\"p\", null, \"Neomake seemed a lot better, so I migrated over to it. It doesn't require much configuration, and it's really fast - unlike Syntastic, it supports asynchronous jobs. This part of the config sets it up to run on changes with no delay in writing, so I get near-instant feedback if a syntax error creeps in, and it doesn't block the editor the way Syntastic used to.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-vim\"\n  }, \"\\\" Neomake config\\n\\\" Full config: when writing or reading a buffer, and on changes in insert and\\n\\\" normal mode (after 1s; no delay when writing).\\ncall neomake#configure#automake('nrwi', 500)\\n\")), mdx(\"h2\", null, \"PHPActor\"), mdx(\"p\", null, \"As mentioned above, PHPActor has dramatically improved my experience when coding in PHP by providing access to features normally found only in full IDE's. Here's the fairly standard config I use for the refactoring functionality:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-vim\"\n  }, \"\\\" PHPActor config\\n\\\" Include use statement\\nnmap <Leader>u :call phpactor#UseAdd()<CR>\\n\\n\\\" Invoke the context menu\\nnmap <Leader>mm :call phpactor#ContextMenu()<CR>\\n\\n\\\" Invoke the navigation menu\\nnmap <Leader>nn :call phpactor#Navigate()<CR>\\n\\n\\\" Goto definition of class or class member under the cursor\\nnmap <Leader>o :call phpactor#GotoDefinition()<CR>\\n\\n\\\" Transform the classes in the current file\\nnmap <Leader>tt :call phpactor#Transform()<CR>\\n\\n\\\" Generate a new class (replacing the current file)\\nnmap <Leader>cc :call phpactor#ClassNew()<CR>\\n\\n\\\" Extract expression (normal mode)\\nnmap <silent><Leader>ee :call phpactor#ExtractExpression(v:false)<CR>\\n\\n\\\" Extract expression from selection\\nvmap <silent><Leader>ee :<C-U>call phpactor#ExtractExpression(v:true)<CR>\\n\\n\\\" Extract method from selection\\nvmap <silent><Leader>em :<C-U>call phpactor#ExtractMethod()<CR>\\n\")), mdx(\"h2\", null, \"Summary\"), mdx(\"p\", null, \"Vim or Neovim configuration files are never static. Your needs are always changing, and you're constantly discovering new plugins and new settings to try out, and keeping ones that prove useful. It's been helpful to start over and ditch some plugins I no longer needed, pull in some new ones, and organise my configuration a bit better.\"), mdx(\"p\", null, \"Now that I can set the dependencies in a text file rather than pulling them in as Git submodules, it makes more sense to keep my config in a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://gist.github.com/matthewbdaly/80b777ad3db885ebeecd27687fb121cd\"\n  }, \"Github Gist\"), \" rather than a Git repository, and that's where I plan to retain it for now. Feel free to fork or cannibalise it for your own purposes if you wish.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"I honestly thought it would never happen. I've been using Vim since 2008, and every other editor I've tried (including VSCode, Emacs, Sublime Text and Atom) hasn't come up to…","frontmatter":{"title":"Switching from Vim to Neovim","date":"9th September 2018 12:40 pm","isoDate":"2018-09-09T12:40:35+00:00","categories":["vim","neovim"]},"fields":{"path":"/blog/2018/09/09/switching-from-vim-to-neovim/"}}},"pageContext":{"previous":{"fields":{"path":"/blog/2018/07/25/better-strings-in-php/"},"frontmatter":{"title":"Better strings in PHP","date":"2018-07-25 22:25:17 +0100","layout":"post"}},"next":{"fields":{"path":"/blog/2018/09/13/mutation-testing-with-infection/"},"frontmatter":{"title":"Mutation testing with Infection","date":"2018-09-13 20:10:09 +0100","layout":"post"}}}},"staticQueryHashes":["290055352","3373576264"]}