{
    "componentChunkName": "component---src-templates-post-tsx",
    "path": "/blog/2018/02/04/using-lando-as-an-alternative-to-vagrant/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Matthew Daly","siteUrl":"https://matthewdaly.co.uk"}},"mdx":{"id":"58f36988-b45c-516e-8e77-91b0a9e5874b","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Using Lando as an alternative to Vagrant\",\n  \"date\": \"2018-02-04 00:12:16 +0000\",\n  \"layout\": \"post\",\n  \"categories\": [\"docker\", \"virtualisation\"],\n  \"comments\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Although Vagrant is very useful for ensuring consistency between development environments, it's quite demanding on system resources. Running a virtual machine introduces quite a bit of overhead, and it can be troublesome to provision.\"), mdx(\"p\", null, \"This week I was introduced to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.devwithlando.io/\"\n  }, \"Lando\"), \" as an alternative to Vagrant. Rather than running a virtual machine like Vagrant does by default, Lando instead spins up Docker containers for the services you need, meaning it has considerably less overhead than Vagrant. It also includes presets for a number of frameworks and CMS's, including:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Drupal 7\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Drupal 8\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Wordpress\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Laravel\")), mdx(\"p\", null, \"Considering that Vagrant needs quite a bit of boilerplate to set up the server for different types of projects, this gives Lando an obvious advantage. The only issue I've had with it is that it's been unreliable when I've had to use it on Windows, which I don't do much anyway.\"), mdx(\"h2\", null, \"Getting started\"), mdx(\"p\", null, \"Lando requires that you have Docker installed. Once that's done you can download and install it fro the website. Then you can run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lando init\"), \" to set it up:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ lando init\\n? What recipe do you want to use? wordpress\\n? Where is your webroot relative to the init destination? .\\n? What do you want to call this app? wp-site\\n\\nNOW WE'RE COOKING WITH FIRE!!!\\nYour app has been initialized!\\n\\nGo to the directory where your app was initialized and run\\n`lando start` to get rolling.\\n\\nCheck the LOCATION printed below if you are unsure where to go.\\n\\nHere are some vitals:\\n\\n NAME      wp-site                                               \\n LOCATION  /home/matthew/Projects/wp-site                        \\n RECIPE    wordpress                                             \\n DOCS      https://docs.devwithlando.io/tutorials/wordpress.html \\n\")), mdx(\"p\", null, \"Here I've chosen the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"wordpress\"), \" recipe, in the current directory, with the name \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"wp-site\"), \". This generates the following file as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".lando.yml\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yml\"\n  }, \"name: wp-site\\nrecipe: wordpress\\nconfig:\\n  webroot: .\\n\")), mdx(\"p\", null, \"Then, if we run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lando start\"), \", it will set up the required services:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ lando start\\nlandoproxyhyperion5000gandalfedition_proxy_1 is up-to-date\\nCreating network \\\"wpsite_default\\\" with the default driver\\nCreating volume \\\"wpsite_appserver\\\" with default driver\\nCreating volume \\\"wpsite_data\\\" with default driver\\nCreating volume \\\"wpsite_data_database\\\" with default driver\\nCreating wpsite_appserver_1 ... \\nCreating wpsite_database_1 ... \\nCreating wpsite_database_1\\nCreating wpsite_appserver_1 ... done\\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\\n                                 Dload  Upload   Total   Spent    Left  Speed\\n100 4454k  100 4454k    0     0  3288k      0  0:00:01  0:00:01 --:--:-- 3290k\\nOS:     Linux 4.13.0-32-generic #35-Ubuntu SMP Thu Jan 25 09:13:46 UTC 2018 x86_64\\nShell:  \\nPHP binary:     /usr/local/bin/php\\nPHP version:    7.1.13\\nphp.ini used:   \\nWP-CLI root dir:        phar://wp-cli.phar\\nWP-CLI vendor dir:      phar://wp-cli.phar/vendor\\nWP_CLI phar path:       /tmp\\nWP-CLI packages dir:\\nWP-CLI global config:   \\nWP-CLI project config:  \\nWP-CLI version: 1.5.0\\n\\nBOOMSHAKALAKA!!!\\n\\nYour app has started up correctly.\\nHere are some vitals:\\n\\n APPSERVER URLS  https://localhost:32802\\n                 http://localhost:32803\\n                 http://wp-site.lndo.site\\n                 https://wp-site.lndo.site\\n\\n\")), mdx(\"p\", null, \"Note the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"APPSERVER URLS\"), \" section - the site can be accessed locally via HTTP or HTTPS. For this recipe, it also installs WP CLI.\"), mdx(\"p\", null, \"If we run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"docker ps\"), \", we can see that it's running three Docker containers:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"CONTAINER ID        IMAGE                         COMMAND                  CREATED             STATUS              PORTS                                                               NAMES\\n2e920e152091        devwithlando/php:7.1-apache   \\\"/lando-entrypoint.s\\u2026\\\"   16 minutes ago      Up 16 minutes       0.0.0.0:32803->80/tcp, 0.0.0.0:32802->443/tcp                       wpsite_appserver_1\\n82ea60b1214f        mysql:latest                  \\\"/lando-entrypoint.s\\u2026\\\"   16 minutes ago      Up 16 minutes       0.0.0.0:32801->3306/tcp                                             wpsite_database_1\\ne51d831199d7        traefik:1.3-alpine            \\\"/lando-entrypoint.s\\u2026\\\"   About an hour ago   Up About an hour    0.0.0.0:80->80/tcp, 0.0.0.0:443->443/tcp, 0.0.0.0:58086->8080/tcp   landoproxyhyperion5000gandalfedition_proxy_1\\n\")), mdx(\"p\", null, \"Apache lives in one container, MySQL in another, while the third runs Traefik, a lightweight load balancer, which listens on port 80. Traefik does the work of redirecting HTTP requests to the right place.\"), mdx(\"p\", null, \"As I've been unhappy with the amount of resources Vagrant uses for a while, and I usually run Ubuntu (making using Docker straightforward), I'm planning on using Lando extensively in future. It's lighter and faster to set up, and has sane defaults for most of the frameworks and CMS's I use regularly, making it generally quicker and easier to work with.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Although Vagrant is very useful for ensuring consistency between development environments, it's quite demanding on system resources. Running a virtual machine introduces quite aâ€¦","frontmatter":{"title":"Using Lando as an alternative to Vagrant","date":"4th February 2018 12:12 am","isoDate":"2018-02-04T00:12:16+00:00","categories":["docker","virtualisation"]},"fields":{"path":"/blog/2018/02/04/using-lando-as-an-alternative-to-vagrant/"}}},"pageContext":{"previous":{"fields":{"path":"/blog/2018/01/29/how-i-deploy-laravel-apps/"},"frontmatter":{"title":"How I deploy Laravel apps","date":"2018-01-29 22:00:35 +0000","layout":"post"}},"next":{"fields":{"path":"/blog/2018/02/18/put-your-laravel-controllers-on-a-diet/"},"frontmatter":{"title":"Put your Laravel controllers on a diet","date":"2018-02-18 18:10:10 +0000","layout":"post"}}}},
    "staticQueryHashes": ["290055352","2909664151"]}