<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Matthew Daly</title>
        <link>https://matthewdaly.co.uk</link>
        <description>I'm a web developer in Norfolk. This is my blog...</description>
        <lastBuildDate>Wed, 21 Jun 2023 18:32:38 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>GatsbyJS</generator>
        <language>en</language>
        <copyright>All rights reserved Matthew Daly 2023</copyright>
        <atom:link href="/rss.xml" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[Two techniques for handling recursive relationships in MySQL]]></title>
            <link>https://matthewdaly.co.uk/blog/2022/12/18/two-techniques-for-handling-recursive-relationships-in-mysql/</link>
            <guid>https://matthewdaly.co.uk/blog/2022/12/18/two-techniques-for-handling-recursive-relationships-in-mysql/</guid>
            <pubDate>Sun, 18 Dec 2022 14:15:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>When modelling users in a hierarchical organization, it&#x27;s common to need to retrieve the line manager or subordinates of a given user. In MySQL, two of the techniques that can be used to handle these recursive relationships are the <code>WITH RECURSIVE</code> common table expression and using closure tables.</p><h3>Using CTEs with <code>WITH RECURSIVE</code></h3><p>A common table expression (CTE) is a temporary result set that is defined within the execution scope of a single SQL statement. In MySQL, you can use the <code>WITH RECURSIVE</code> clause to define a CTE that can be used to retrieve all of the users above or below a given user in the hierarchy.</p><p>Say we have a <code>users</code> table that looks like this:</p><pre><code class="language-sql">CREATE TABLE users (
  id INTEGER PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  manager_id INTEGER REFERENCES users(id)
);
</code></pre><p>To create a CTE that gets the users above a given user, you can use the following query:</p><pre><code class="language-sql">WITH RECURSIVE managers AS (
  SELECT id, name, manager_id
  FROM users
  WHERE id = :user_id
UNION ALL
  SELECT u.id, u.name, u.manager_id
  FROM users u
  INNER JOIN managers m ON m.manager_id = u.id
)
SELECT * FROM managers;
</code></pre><p>This query uses the <code>WITH RECURSIVE</code> clause to define a CTE called <code>managers</code> that first selects the user with the given <code>user_id</code> and then uses the <code>UNION ALL</code> operator to combine that user with all of the users above them in the hierarchy. The <code>INNER JOIN</code> clause is used to link the <code>managers</code> CTE to the users table, so that the <code>managers</code> CTE can keep growing until it includes all of the users above the given user in the hierarchy.</p><p>To get the users below a given user, you can use a similar query, but with the <code>manager_id</code> and <code>id</code> fields swapped in the INNER JOIN clause:</p><pre><code class="language-sql">WITH RECURSIVE subordinates AS (
  SELECT id, name, manager_id
  FROM users
  WHERE id = :user_id
UNION ALL
  SELECT u.id, u.name, u.manager_id
  FROM users u
  INNER JOIN subordinates s ON s.id = u.manager_id
)
SELECT * FROM subordinates;
</code></pre><p>This query uses the same technique as the previous example, but it retrieves the users below the given user instead of above.</p><h3>Using closure tables</h3><p>Another technique for handling recursive relationships in MySQL is to use closure tables. A closure table is a special type of table that is used to represent hierarchical data in a relational database. It consists of two tables: one for the entities in the hierarchy (e.g. users) and one for the relationships between those entities.</p><p>To create a closure table for a hierarchy of users, you can use the following DDL statement:</p><pre><code class="language-sql">CREATE TABLE users (
  id INTEGER PRIMARY KEY,
  name VARCHAR(255) NOT NULL
);

CREATE TABLE hierarchy (
  ancestor INTEGER NOT NULL REFERENCES users(id),
  descendant INTEGER NOT NULL REFERENCES users(id),
  PRIMARY KEY (ancestor, descendant),
  CHECK (ancestor != descendant)
);
</code></pre><p>The users table is similar to the one in the previous example, but it only contains the <code>id</code> and <code>name</code> fields. The relationships between the users are defined in the <code>hierarchy</code> table.</p><p>To insert data into these tables, you would first need to insert rows into the users table for each user in the hierarchy, and then insert rows into the hierarchy table to define the relationships between those users. Here is an example of how this could be done:</p><pre><code class="language-sql">INSERT INTO users (id, name) VALUES
  (1, &#x27;Alice&#x27;),
  (2, &#x27;Bob&#x27;),
  (3, &#x27;Carol&#x27;),
  (4, &#x27;Dave&#x27;),
  (5, &#x27;Eve&#x27;);

INSERT INTO hierarchy (ancestor, descendant) VALUES
  (1, 1),
  (1, 2),
  (1, 3),
  (1, 4),
  (1, 5),
  (2, 2),
  (2, 3),
  (2, 4),
  (3, 3),
  (4, 4);
</code></pre><p>This inserts five users into the <code>users</code> table and then inserts rows into the <code>hierarchy</code> table to define the relationships between those users. The ancestor and descendant values are both set to the same id for each user, which indicates that each user is a descendant of themselves. The hierarchy table also defines the relationships between the users, with each user being a descendant of the user above them in the hierarchy.</p><p>To get all of the users above a given user using a closure table, you can use the following query:</p><pre><code class="language-sql">SELECT u.*
FROM users u
INNER JOIN hierarchy h ON h.descendant = :user_id
WHERE u.id = h.ancestor
</code></pre><p>This query uses an <code>INNER JOIN</code> to link the <code>users</code> table to the <code>hierarchy</code> table, and then filters the results to only include users that are ancestors of the user with the given <code>user_id</code>. This query will return a list of all of the users above the given user in the hierarchy.</p><p>To get the users below a given user, you can use a similar query, but with the ancestor and descendant fields swapped in the INNER JOIN clause:</p><pre><code class="language-sql">SELECT u.*
FROM users u
INNER JOIN hierarchy h ON h.ancestor = :user_id
WHERE u.id = h.descendant
</code></pre><p>This query will return a list of all of the users below the given user in the hierarchy.</p><p>One downside of the closure table approach is that when the hierarchical structure changes, the <code>hierarchy</code> table needs to be updated to reflect the changes. There are a number of approaches you can take to handle this, including:</p><ul><li>Creating MySQL triggers to update the <code>hierarchy</code> table automatically when a user is inserted, updated or deleted</li><li>Using events, such as Eloquent model events, to apply the changes in application code</li><li>Truncating and repopulating the <code>hierarchy</code> table from scratch</li></ul><p>The first approach is generally the most efficient, but has the downside that triggers aren&#x27;t generally exported from <code>mysqldump</code>, making it difficult to manage when importing the production database locally. The last approach often makes the most sense in cases where users are populated from some kind of regular import, in which case the hierarchy will only ever change as a result of that import.</p><h3>Which one should I use?</h3><p>Which of these approaches you should choose in a given situation is highly dependent on the specific needs of your application, since each has advantages and limitations.</p><p>Using a closure table results in a smaller, simpler, and generally more efficient query that is easy to express using an ORM or query builder, but requires that you take steps to update the separate closure table when the hierarchy changes. Using the <code>WITH RECURSIVE</code> CTE doesn&#x27;t require a separate table, eliminating the need to populate said table, but for some queries it may not be as efficient. In addition, it can be difficult to express with some ORMs and query builders, necessitating either additional third party packages or falling back to raw queries. If you&#x27;re stuck using an older version of MySQL, such as on a legacy application, and can&#x27;t upgrade, you might also not be able to use <code>WITH RECURSIVE</code> (though at this point you <em>really</em> shouldn&#x27;t be using a version that old).</p><p>At times I&#x27;ve found it necessary to combine both techniques. One application I maintain has a nightly import process for all the users and derives the permissions to view various pieces of content in part from the hierarchy - the only way to determine the hierarchy is by following the line managers back all the way to the managing director for each individual user, but permissions can be assigned to individual business units within the company and cascade down to child business units, and so to know what permissions a user has, we need to know where they sit in the hierarchy. This query would be too cumbersome to perform on the fly for each user, so we use the <code>WITH RECURSIVE</code> CTE to detetermine a user&#x27;s place within the hierarchy, and then populate a closure table from it, as a part of the nightly import.</p><h3>Conclusion</h3><p>In MySQL, there are a number of techniques that can be used to handle recursive relationships in hierarchical data, but two of the most performant and flexible are the <code>WITH RECURSIVE</code> CTE and using closure tables. Both techniques have their own benefits and drawbacks, and the best choice will depend on the specific requirements of your application.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[What I think ChatGPT means for developers]]></title>
            <link>https://matthewdaly.co.uk/blog/2022/12/11/what-i-think-chatgpt-means-for-developers/</link>
            <guid>https://matthewdaly.co.uk/blog/2022/12/11/what-i-think-chatgpt-means-for-developers/</guid>
            <pubDate>Sun, 11 Dec 2022 19:20:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>I&#x27;m sure you&#x27;ve heard some of the buzz about <a href="https://chat.openai.com/">ChatGPT</a>. There&#x27;s been examples of it <a href="https://wptavern.com/chatgpt-creates-a-working-wordpress-plugin-on-the-first-try">creating a working Wordpress plugin on demand</a>, <a href="https://twitter.com/ZacYungblut/status/1598593759532355584?ref_src=twsrc%5Etfw%7Ctwcamp%5Etweetembed%7Ctwterm%5E1598593759532355584%7Ctwgr%5E7278d2255112f76225493be1370af0fa7a975285%7Ctwcon%5Es1_&amp;ref_url=https%3A%2F%2Fd-35506373891512421835.ampproject.net%2F2211250451000%2Fframe.html">recreating the Apple website</a>, acting as a Linux terminal, and writing astonishingly detailed code samples for various purposes on demand.</p><p>Naturally I decided to have a tinker with it as I was curious about it, and I&#x27;ve found it very useful for coding. Here are some samples of things I&#x27;ve asked it to do for me.</p><h3>An example of writing code with ChatGPT</h3><p>Given the popularity of React.js and my own experience using it, I figured that was something ChatGPT would probably handle OK and that I would be able to evaluate for myself. I therefore asked ChatGPT to create a React-based alert system for me. As I&#x27;ve implemented something similar myself, I was interested to see how well it would do against my own implementation which is in production:</p><blockquote><p>Please create a hook-based toast-style alert system in React.js using hooks</p></blockquote><p>It responded with:</p><blockquote><p>Sure, here is an example of a toast-style alert system in React.js using hooks:</p></blockquote><pre><code class="language-javascript">import React, { useState, useEffect } from &#x27;react&#x27;;

function useToast() {
  const [isShowing, setIsShowing] = useState(false);
  const [message, setMessage] = useState(&#x27;&#x27;);

  function showToast(msg) {
    setMessage(msg);
    setIsShowing(true);
  }

  function hideToast() {
    setIsShowing(false);
  }

  useEffect(() =&gt; {
    let timeoutId;
    if (isShowing) {
      timeoutId = setTimeout(() =&gt; setIsShowing(false), 3000);
    }

    return () =&gt; clearTimeout(timeoutId);
  }, [isShowing]);

  return {
    isShowing,
    message,
    showToast,
    hideToast
  };
}

function App() {
  const { isShowing, message, showToast, hideToast } = useToast();

  return (
    &lt;div&gt;
      {isShowing &amp;&amp; (
        &lt;div className=&quot;toast&quot;&gt;
          &lt;p&gt;{message}&lt;/p&gt;
          &lt;button onClick={hideToast}&gt;Close&lt;/button&gt;
        &lt;/div&gt;
      )}
      &lt;button onClick={() =&gt; showToast(&#x27;This is a toast message!&#x27;)}&gt;
        Show Toast
      &lt;/button&gt;
    &lt;/div&gt;
  );
}
</code></pre><blockquote><p>In this example, the <code>useToast</code> hook manages the state for the toast, including whether it is showing, the message to display, and methods for showing and hiding the toast. The <code>App</code> component uses the <code>useToast</code> hook to show and hide the toast when a button is clicked.</p></blockquote><blockquote><p>The <code>useToast</code> hook uses the <code>useState</code> hook to manage the state for the toast, and the <code>useEffect</code> hook to automatically hide the toast after a certain amount of time. This is just one example of how to implement a toast-style alert system in React.js using hooks, and you can modify it to suit your specific needs.</p></blockquote><p>Looks OK, but it only supports a single message at once, so I followed it up:</p><blockquote><p>Can we amend this to support showing multiple toasts at once?</p></blockquote><blockquote><p>Yes, it is possible to modify the example to support showing multiple toasts at once. Instead of using a single state value for the message and whether the toast is showing, you can use an array to store multiple toast messages and show them all at once. Here is an example of how you might do this:</p></blockquote><pre><code class="language-javascript">import React, { useState, useEffect } from &#x27;react&#x27;;

function useToast() {
  const [toasts, setToasts] = useState([]);

  function showToast(msg) {
    setToasts(prevToasts =&gt; [...prevToasts, msg]);
  }

  function hideToast(index) {
    setToasts(prevToasts =&gt; {
      prevToasts.splice(index, 1);
      return [...prevToasts];
    });
  }

  useEffect(() =&gt; {
    let timeoutIds = [];
    toasts.forEach((_, index) =&gt; {
      timeoutIds[index] = setTimeout(() =&gt; hideToast(index), 3000);
    });

    return () =&gt; timeoutIds.forEach(timeoutId =&gt; clearTimeout(timeoutId));
  }, [toasts]);

  return {
    toasts,
    showToast,
    hideToast
  };
}

function App() {
  const { toasts, showToast, hideToast } = useToast();

  return (
    &lt;div&gt;
      {toasts.map((toast, index) =&gt; (
        &lt;div className=&quot;toast&quot; key={index}&gt;
          &lt;p&gt;{toast}&lt;/p&gt;
          &lt;button onClick={() =&gt; hideToast(index)}&gt;Close&lt;/button&gt;
        &lt;/div&gt;
      ))}
      &lt;button onClick={() =&gt; showToast(&#x27;This is a toast message!&#x27;)}&gt;
        Show Toast
      &lt;/button&gt;
    &lt;/div&gt;
  );
}
</code></pre><blockquote><p>In this example, the <code>useToast</code> hook uses an array to store multiple toast messages, and the <code>App</code> component displays all of the toasts in the array. The <code>useEffect</code> hook is used to set a timeout for each toast to automatically hide it after a certain amount of time. You can modify this example further to suit your specific needs, such as setting different timeouts for each toast or adding additional methods for managing the toasts.</p></blockquote><p>Great,  although I noticed an unused <code>_</code> variable in <code>forEach</code> - not sure if perhaps this is based on something that used Lodash, perhaps.</p><p>Next, our toasts need to show different styles based on the type of alert, so I asked this:</p><blockquote><p>Can we amend this to allow the toasts to use different styles based on the type of alert?</p></blockquote><blockquote><p>Yes, it is possible to modify the example to allow the toasts to use different styles based on the type of alert. You can do this by storing the type of each toast along with the message in the state, and then using this type to determine the style for the toast. Here is an example of how you might do this:</p></blockquote><pre><code class="language-javascript">import React, { useState, useEffect } from &#x27;react&#x27;;

function useToast() {
  const [toasts, setToasts] = useState([]);

  function showToast(msg, type) {
    setToasts(prevToasts =&gt; [...prevToasts, { msg, type }]);
  }

  function hideToast(index) {
    setToasts(prevToasts =&gt; {
      prevToasts.splice(index, 1);
      return [...prevToasts];
    });
  }

  useEffect(() =&gt; {
    let timeoutIds = [];
    toasts.forEach((_, index) =&gt; {
      timeoutIds[index] = setTimeout(() =&gt; hideToast(index), 3000);
    });

    return () =&gt; timeoutIds.forEach(timeoutId =&gt; clearTimeout(timeoutId));
  }, [toasts]);

  return {
    toasts,
    showToast,
    hideToast
  };
}

function App() {
  const { toasts, showToast, hideToast } = useToast();

  return (
    &lt;div&gt;
      {toasts.map((toast, index) =&gt; (
        &lt;div
          className={`toast toast-${toast.type}`}
          key={index}
        &gt;
          &lt;p&gt;{toast.msg}&lt;/p&gt;
          &lt;button onClick={() =&gt; hideToast(index)}&gt;Close&lt;/button&gt;
        &lt;/div&gt;
      ))}
      &lt;button onClick={() =&gt; showToast(&#x27;This is a success toast!&#x27;, &#x27;success&#x27;)}&gt;
        Show Success Toast
      &lt;/button&gt;
      &lt;button onClick={() =&gt; showToast(&#x27;This is an error toast!&#x27;, &#x27;error&#x27;)}&gt;
        Show Error Toast
      &lt;/button&gt;
    &lt;/div&gt;
  );
}
</code></pre><blockquote><p>In this example, the <code>useToast</code> hook stores the message and type of each toast in the state, and the <code>App</code> component uses the type to determine the class name for the toast. This allows you to define different styles for each type of toast, such as a <code>toast-success</code> class for success toasts and a <code>toast-error</code> class for error toasts. You can modify this example further to suit your specific needs, such as defining additional types of toasts or changing the way that the styles are applied.</p></blockquote><p>Great, but a reducer may make more sense than regular state for this use case. Let&#x27;s ask it to update the code:</p><blockquote><p>Can we amend this code to use a reducer instead of state?</p></blockquote><blockquote><p>Yes, it is possible to modify the example to use a reducer instead of state. A reducer is a function that takes the current state and an action as arguments, and returns a new state based on the action. This allows you to manage the state for your toast in a more modular and scalable way. Here is an example of how you might do this:</p></blockquote><pre><code class="language-javascript">import React, { useReducer, useEffect } from &#x27;react&#x27;;

const initialState = {
  toasts: []
};

function reducer(state, action) {
  switch (action.type) {
    case &#x27;SHOW_TOAST&#x27;:
      return {
        ...state,
        toasts: [...state.toasts, action.payload]
      };
    case &#x27;HIDE_TOAST&#x27;:
      const newToasts = [...state.toasts];
      newToasts.splice(action.payload, 1);
      return {
        ...state,
        toasts: newToasts
      };
    default:
      return state;
  }
}

function useToast() {
  const [state, dispatch] = useReducer(reducer, initialState);

  function showToast(msg, type) {
    dispatch({
      type: &#x27;SHOW_TOAST&#x27;,
      payload: { msg, type }
    });
  }

  function hideToast(index) {
    dispatch({
      type: &#x27;HIDE_TOAST&#x27;,
      payload: index
    });
  }

  useEffect(() =&gt; {
    let timeoutIds = [];
    state.toasts.forEach((_, index) =&gt; {
      timeoutIds[index] = setTimeout(() =&gt; hideToast(index), 3000);
    });

    return () =&gt; timeoutIds.forEach(timeoutId =&gt; clearTimeout(timeoutId));
  }, [state.toasts]);

  return {
    toasts: state.toasts,
    showToast,
    hideToast
  };
}

function App() {
  const { toasts, showToast, hideToast } = useToast();

  return (
    &lt;div&gt;
      {toasts.map((toast, index) =&gt; (
        &lt;div
          className={`toast toast-${toast.type}`}
          key={index}
        &gt;
          &lt;p&gt;{toast.msg}&lt;/p&gt;
          &lt;button onClick={() =&gt; hideToast(index)}&gt;Close&lt;/button&gt;
        &lt;/div&gt;
      ))}
      &lt;button onClick={() =&gt; showToast(&#x27;This is a success toast!&#x27;, &#x27;success&#x27;)}&gt;
        Show Success Toast
      &lt;/button&gt;
      &lt;button onClick={() =&gt; showToast(&#x27;This is an error toast!&#x27;, &#x27;error&#x27;)}&gt;
        Show Error Toast
      &lt;/button&gt;
    &lt;/div&gt;
  );
}
</code></pre><blockquote><p>In this example, the <code>useToast</code> hook uses the <code>useReducer</code> hook to manage the state for the toast. The reducer function takes the current state and an action as arguments, and returns a new state based on the action. The <code>App</code> component dispatches actions to show and hide the toast, and the <code>useEffect</code> hook is used to set a timeout for each toast to automatically hide it after a certain amount of time</p></blockquote><p>OK, that&#x27;s done. Now we decide we need this in Typescript:</p><blockquote><p>Please convert this to Typescript</p></blockquote><blockquote><p>Sure, here is an example of how you might convert the code to TypeScript:</p></blockquote><pre><code class="language-typescript">import React, { useReducer, useEffect } from &#x27;react&#x27;;

interface ToastState {
  toasts: {
    msg: string;
    type: string;
  }[];
}

const initialState: ToastState = {
  toasts: []
};

function reducer(state: ToastState, action: { type: string; payload: any }) {
  switch (action.type) {
    case &#x27;SHOW_TOAST&#x27;:
      return {
        ...state,
        toasts: [...state.toasts, action.payload]
      };
    case &#x27;HIDE_TOAST&#x27;:
      const newToasts = [...state.toasts];
      newToasts.splice(action.payload, 1);
      return {
        ...state,
        toasts: newToasts
      };
    default:
      return state;
  }
}

function useToast() {
  const [state, dispatch] = useReducer(reducer, initialState);

  function showToast(msg: string, type: string) {
    dispatch({
      type: &#x27;SHOW_TOAST&#x27;,
      payload: { msg, type }
    });
  }

  function hideToast(index: number) {
    dispatch({
      type: &#x27;HIDE_TOAST&#x27;,
      payload: index
    });
  }

  useEffect(() =&gt; {
    let timeoutIds = [];
    state.toasts.forEach((_, index) =&gt; {
      timeoutIds[index] = setTimeout(() =&gt; hideToast(index), 3000);
    });

    return () =&gt; timeoutIds.forEach(timeoutId =&gt; clearTimeout(timeoutId));
  }, [state.toasts]);

  return {
    toasts: state.toasts,
    showToast,
    hideToast
  };
}

function App() {
  const { toasts, showToast, hideToast } = useToast();

  return (
    &lt;div&gt;
      {toasts.map((toast, index) =&gt; (
        &lt;div
          className={`toast toast-${toast.type}`}
          key={index}
        &gt;
          &lt;p&gt;{toast.msg}&lt;/p&gt;
          &lt;button onClick={() =&gt; hideToast(index)}&gt;Close&lt;/button&gt;
        &lt;/div&gt;
      ))}
      &lt;button onClick={() =&gt; showToast(&#x27;This is a success toast!&#x27;, &#x27;success&#x27;)}&gt;
        Show Success Toast
      &lt;/button&gt;
      &lt;button onClick={() =&gt; showToast(&#x27;This is an error toast!&#x27;, &#x27;error&#x27;)}&gt;
        Show Error Toast
      &lt;/button&gt;
    &lt;/div&gt;
  );
}
</code></pre><blockquote><p>In this example, the code is written in TypeScript, and type annotations have been added to the functions and variables to specify the types of their arguments and return values. This allows the TypeScript compiler to check the code for type errors, and provides additional type information to other tools and libraries that can make use of it. You can modify this example further to suit your specific needs, such as adding additional types or using more advanced type features.</p></blockquote><p>Next, can it refactor this?</p><blockquote><p>Could we refactor this?</p></blockquote><blockquote><p>Yes, it is possible to refactor the code to make it more concise and modular. Here is an example of how you might do this:</p></blockquote><pre><code class="language-typescript">import React, { useReducer, useEffect } from &#x27;react&#x27;;

interface Toast {
  msg: string;
  type: string;
}

type State = Toast[];

type Action =
  | { type: &#x27;SHOW_TOAST&#x27;; payload: Toast }
  | { type: &#x27;HIDE_TOAST&#x27;; payload: number };

const initialState: State = [];

function reducer(state: State, action: Action): State {
  switch (action.type) {
    case &#x27;SHOW_TOAST&#x27;:
      return [...state, action.payload];
    case &#x27;HIDE_TOAST&#x27;:
      const newToasts = [...state];
      newToasts.splice(action.payload, 1);
      return newToasts;
    default:
      return state;
  }
}

function useToast() {
  const [toasts, dispatch] = useReducer(reducer, initialState);

  useEffect(() =&gt; {
    const timeoutIds = toasts.map((_, index) =&gt;
      setTimeout(() =&gt; dispatch({ type: &#x27;HIDE_TOAST&#x27;, payload: index }), 3000)
    );
    return () =&gt; timeoutIds.forEach(clearTimeout);
  }, [toasts]);

  return {
    toasts,
    showToast: (msg: string, type: string) =&gt;
      dispatch({ type: &#x27;SHOW_TOAST&#x27;, payload: { msg, type } }),
    hideToast: (index: number) =&gt;
      dispatch({ type: &#x27;HIDE_TOAST&#x27;, payload: index })
  };
}

function App() {
  const { toasts, showToast, hideToast } = useToast();

  return (
    &lt;div&gt;
      {toasts.map((toast, index) =&gt; (
        &lt;div
          className={`toast toast-${toast.type}`}
          key={index}
        &gt;
          &lt;p&gt;{toast.msg}&lt;/p&gt;
          &lt;button onClick={() =&gt; hideToast(index)}&gt;Close&lt;/button&gt;
        &lt;/div&gt;
      ))}
      &lt;button onClick={() =&gt; showToast(&#x27;This is a success toast!&#x27;, &#x27;success&#x27;)}&gt;
        Show Success Toast
      &lt;/button&gt;
      &lt;button onClick={() =&gt; showToast(&#x27;This is an error toast!&#x27;, &#x27;error&#x27;)}&gt;
        Show Error Toast
      &lt;/button&gt;
    &lt;/div&gt;
  );
}
</code></pre><blockquote><p>In this example, the code has been refactored to use more concise and modular functions and types. The reducer function has been simplified and made more type-safe by using a union type for the <code>Action</code> type, and the <code>useToast</code> hook has been refactored to use the useReducer hook more effectively and efficiently. Additionally, the code has been cleaned up and made more readable by using modern JavaScript features and conventions. You can modify this example further to suit your specific</p></blockquote><p>Great. Now, we should really write a test for this. Let&#x27;s see if ChatGPT can do that for us:</p><blockquote><p>How might we test this hook with Jest?</p></blockquote><blockquote><p>To test the <code>useToast</code> hook with Jest, you can write a test that uses the act function from the <code>@testing-library/react</code> library to simulate user interactions with the component and verify that the hook behaves as expected. Here is an example of how you might write a test for the <code>useToast</code> hook:</p></blockquote><pre><code class="language-typescript">import React from &#x27;react&#x27;;
import { act, renderHook } from &#x27;@testing-library/react-hooks&#x27;;
import { useToast } from &#x27;./useToast&#x27;;

describe(&#x27;useToast&#x27;, () =&gt; {
  it(&#x27;should show and hide toasts&#x27;, () =&gt; {
    const { result } = renderHook(() =&gt; useToast());
    const { toasts, showToast, hideToast } = result.current;

    // Initially, there should be no toasts
    expect(toasts).toEqual([]);

    // Show a toast and verify that it appears in the state
    act(() =&gt; showToast(&#x27;This is a test toast&#x27;, &#x27;success&#x27;));
    expect(toasts).toEqual([{ msg: &#x27;This is a test toast&#x27;, type: &#x27;success&#x27; }]);

    // Hide the toast and verify that it disappears from the state
    act(() =&gt; hideToast(0));
    expect(toasts).toEqual([]);
  });
});
</code></pre><blockquote><p>In this test, the <code>renderHook</code> function from the <code>@testing-library/react-hooks</code> library is used to render the <code>useToast</code> hook in a test environment. The test then simulates user interactions with the hook by calling the <code>showToast</code> and <code>hideToast</code> functions, and verifies that the toasts are shown and hidden as expected. This test can be further extended to cover additional scenarios and edge cases, such as showing multiple toasts at once or verifying the behavior of the hook when an error occurs.</p></blockquote><p>Overall, this looks pretty good! I&#x27;d need to spend a lot more time than I can spare now to try to find if there are any issues with it, and it wouldn&#x27;t surprise me if there were a few bugs, but it looks fairly sounds as an example.</p><h2>Getting examples of the use of a technique</h2><p>Another thing that ChatGPT seems useful for is creating examples. For instance, I&#x27;ve never had the occasion to use render props in React, so I asked ChatGPT the following question:</p><blockquote><p>Please demonstrate the use of render props with functional React components</p></blockquote><blockquote><p>Sure! In React, a &quot;render prop&quot; is a technique for sharing code between React components using a prop whose value is a function. This function is used to render the content of the component. Using a render prop with a functional component is no different than using it with a class-based component. Here&#x27;s an example:</p></blockquote><pre><code class="language-javascript">function MyComponent(props) {
  return (
    &lt;div&gt;
      {props.render(props.value)}
    &lt;/div&gt;
  );
}
</code></pre><blockquote><p>In the above example, MyComponent is a functional component that has a render prop, which is a function that is used to render the content of the component. The render prop takes a value prop as an argument, which can be used in the rendering of the content.</p></blockquote><blockquote><p>Here&#x27;s an example of how you might use this component:</p></blockquote><pre><code class="language-javascript">&lt;MyComponent
  value={5}
  render={value =&gt; (
    &lt;div&gt;
      The value is {value}.
    &lt;/div&gt;
  )}
/&gt;
</code></pre><blockquote><p>In this example, the value passed to the value prop is 5, and the render prop is a function that returns a div element with the text &quot;The value is 5&quot;.</p></blockquote><blockquote><p>In summary, using a render prop with a functional component is just a matter of using a prop whose value is a function, and using that function to render the content of the component.</p></blockquote><p>I personally find this is a better, more concise example than the one in the React documentation, so I&#x27;m quite pleased with that as an example. Now let&#x27;s ask for them in Typescript:</p><blockquote><p>Please convert these examples to Typescript</p></blockquote><blockquote><p>Sure, here are the examples written in TypeScript:</p></blockquote><pre><code class="language-typescript">function MyComponent(props: { value: any; render: (value: any) =&gt; React.ReactNode }) {
  return (
    &lt;div&gt;
      {props.render(props.value)}
    &lt;/div&gt;
  );
}
</code></pre><pre><code class="language-typescript">&lt;MyComponent
  value={5}
  render={(value: any) =&gt; (
    &lt;div&gt;
      The value is {value}.
    &lt;/div&gt;
  )}
/&gt;
</code></pre><blockquote><p>In the first example, the MyComponent function is defined to take an object with two properties: value and render. The value property is of type any, which means it can be any value. The render property is a function that takes a value of type any and returns a React.ReactNode, which is the type of value that can be rendered by a React component.</p></blockquote><blockquote><p>In the second example, the value prop is passed the value 5, which is a number. The render prop is passed a function that takes a value of type any and returns a div element.</p></blockquote><blockquote><p>I hope this helps! Let me know if you have any other questions.</p></blockquote><p>Nice one!</p><h2>Refactoring from a legacy framework</h2><p>I thought I&#x27;d try another example that was more immediately useful to me. I work on a large legacy Zend 1 framework which I&#x27;m slowly trying to modernize, and a big chunk of the models have been migrated to Eloquent, but the controllers are the biggest blocker by far to migrating to a newer framework, and as long as they&#x27;re in use we can&#x27;t migrate easily migrate some other parts, such as the forms. I wrote an example Zend 1 controller and asked ChatGPT the following question:</p><blockquote><p>Given the following Zend 1 controller:</p></blockquote><pre><code class="language-php">&lt;?php

use App\Forms\CategoryForm;
use App\Models\Category;

final class CategoriesController extends Zend_Controller_Action
{
    public function indexAction(): void
    {
        $this-&gt;view-&gt;categories = Category::all();
    }

    public function addAction(): void
    {
        $request = $this-&gt;getRequest();
        assert($request instanceof Zend_Http_Request_Http);
        if (!$request-&gt;isPost()) {
            throw new Zend_Controller_Action_Exception(&quot;Unsupported method&quot;, 405);
        }
        $form = new CategoryForm();
        if (!$form-&gt;isValid($request-&gt;getPost())) {
            throw new Zend_Controller_Action_Exception(&quot;Invalid data&quot;, 422);
        }
        $category = Category::create([
            &#x27;name&#x27; =&gt; $form-&gt;name-&gt;getValue(),
        ]);
        $this-&gt;view-&gt;category = $category;
    }
}
</code></pre><blockquote><p>Please convert it to a Laravel controller</p></blockquote><p>It came back with:</p><blockquote><p>Here is a possible conversion of the given Zend 1 controller to a Laravel controller:</p></blockquote><pre><code class="language-php">&lt;?php

use App\Http\Controllers\Controller;
use App\Forms\CategoryForm;
use App\Models\Category;
use Illuminate\Http\Request;

class CategoriesController extends Controller
{
    public function index(): void
    {
        $categories = Category::all();
        return view(&#x27;categories.index&#x27;, compact(&#x27;categories&#x27;));
    }

    public function add(Request $request): void
    {
        if (!$request-&gt;isMethod(&#x27;post&#x27;)) {
            abort(405, &#x27;Unsupported method&#x27;);
        }
        $form = new CategoryForm();
        if (!$form-&gt;isValid($request-&gt;all())) {
            abort(422, &#x27;Invalid data&#x27;);
        }
        $category = Category::create([
            &#x27;name&#x27; =&gt; $form-&gt;name-&gt;getValue(),
        ]);
        return view(&#x27;categories.add&#x27;, compact(&#x27;category&#x27;));
    }
}
</code></pre><blockquote><p>Note that this is just one possible way to convert the given code, and there may be other ways to accomplish the same thing using Laravel&#x27;s features and conventions.</p></blockquote><p>This looks pretty good to me. It does still depend on the Zend form classes, but once the controller has been rewritten for Laravel, it would be easy to replace them with form request classes. While this is a very minimal example, it shows the potential power of ChatGPT in terms of migrating legacy code to more modern frameworks. I&#x27;m sure it&#x27;s not always going to be 100% accurate, but other tools like Psalm, which I use anyway, will help find potential problems with method names or arguments being wrong, as will peer reviews of the code, and it&#x27;d certainly be less laborious than doing it all manually.</p><h2>Writing website copy</h2><p>I asked it the following question:</p><blockquote><p>Write the homepage copy for a website proving tips and tricks with performance improvements for web applications built with Laravel</p></blockquote><p>And it came back with:</p><blockquote><p>Welcome to Tips and Tricks for Laravel Performance!</p></blockquote><blockquote><p>Are you looking to improve the performance of your web application built with Laravel? You&#x27;ve come to the right place!</p></blockquote><blockquote><p>Our website provides a wealth of information and tips on how to optimize your Laravel application for maximum performance. From caching and database optimization, to code refactoring and route optimization, we&#x27;ve got you covered.</p></blockquote><blockquote><p>We also offer in-depth tutorials and guides on how to implement these performance improvements in your own Laravel application.</p></blockquote><blockquote><p>Don&#x27;t let slow performance hold your web application back. Take control and improve your Laravel application&#x27;s performance today with the help of Tips and Tricks for Laravel Performance.</p></blockquote><p>Not bad, I&#x27;ve certainly seen a lot worse than that from human writers. Next, I asked it to write a blog post for the site:</p><blockquote><p>Now write a blog post for this site on how to improve the performance of the site by setting appropriate HTTP headers, with code samples</p></blockquote><blockquote><p>Improving the performance of your Laravel application starts with understanding the role of HTTP headers. HTTP headers are key-value pairs that are sent in the header of an HTTP request or response, and provide important information about the request or response.</p></blockquote><blockquote><p>One of the ways to improve the performance of your Laravel application is to set appropriate HTTP headers. This allows the client, such as a web browser, to make more informed decisions about how to handle the request or response.</p></blockquote><blockquote><p>For example, setting the Cache-Control header can improve performance by allowing the client to cache the response, so that it doesn&#x27;t have to be fetched again on subsequent requests. This can be done in Laravel using the Response facade:</p></blockquote><pre><code class="language-php">use Illuminate\Support\Facades\Response;

// Set the Cache-Control header to cache the response for 1 hour
Response::header(&#x27;Cache-Control&#x27;, &#x27;max-age=3600&#x27;);
</code></pre><blockquote><p>Another important header for improving performance is the Expires header. This header specifies a date and time at which the response will no longer be considered fresh. This allows the client to make an informed decision about whether to use a cached version of the response or fetch a new one.</p></blockquote><blockquote><p>In Laravel, the Expires header can be set using the Response facade:</p></blockquote><pre><code class="language-php">use Carbon\Carbon;
use Illuminate\Support\Facades\Response;

// Set the Expires header to one hour from now
$expires = Carbon::now()-&gt;addHour();
Response::header(&#x27;Expires&#x27;, $expires-&gt;toRfc2822String());
</code></pre><blockquote><p>By setting these headers, you can improve the performance of your Laravel application by allowing the client to make more efficient use of caching. This can reduce the number of requests that need to be made to the server, resulting in faster load times and a better user experience.</p></blockquote><blockquote><p>Of course, there are many other HTTP headers that can be used to improve the performance of your Laravel application. For more information, check out the official Laravel documentation on HTTP headers.</p></blockquote><p>Not hugely comprehensive, but a reasonably good starting point. Using this to get you started seems like a good idea, and there&#x27;s nothing more intimidating than a blank page when you want to write a blog post.</p><h3>Overall impressions</h3><p>Even in its current state as a tech preview, ChatGPT is <em>hugely</em> impressive. It&#x27;s extraordinary how good it is at generating basic code samples for almost any use case I can think of. However, the distinct impression I get is that it&#x27;s not really capable of original thought. Most of the above is basically just taking stuff that&#x27;s already out there and essentially remixing it. There&#x27;s plenty of tutorials on writing all of the above and it looks to me like it&#x27;s just taking those and converting those according to the provided specifications.</p><p>However, don&#x27;t get the impression that doesn&#x27;t make it useful. I&#x27;ve used Github Copilot for a while and that offers dramatic improvements in productivity, and this has the potential to be much more significant. As shown above, it can migrate a simple controller from Zend 1 to Laravel, with the result looking perfectly acceptable, and the value of that should be clear to anyone who has to work on a large legacy project. Similarly you can ask it to rewrite something to use a specific design pattern and the end result is perfectly acceptable. It&#x27;s a fantastic learning tool too since you can ask it to provide an example specific to your use case rather than trawling through blog posts, where most of them might have different requirements to you. As such it&#x27;s going to hugely improve developer productivity.</p><p>To a large extent, I think something like this is going change the developer&#x27;s role by shifting the emphasis of it somewhat from the productive to the executive, with our job being more akin to editors than authors. Coding will become less about solving the problem and more about defining the problem in the first place and letting the system solve it. However, I don&#x27;t think it will automate our jobs away entirely - the quality of the code it produces is variable, to say the least, and there will definitely be a need to be able to debug it, and solve more unusual problems.</p><p>However, if my job involved writing spammy blog posts for ad money, I&#x27;d be <em>very</em> worried about my future prospects. I think tools like this will probably be writing most of the spammier sort of blog posts that just exist to get clicks on the web in a year at most. I&#x27;ve actually just asked it to write a blog post I&#x27;ve wanted to write for a while now for me, and the end result looks pretty solid right now - I&#x27;d anticipate it saved me about 90% of the work, with the remaining 10% just a case of cleaning it up.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Why I no longer use the repository pattern]]></title>
            <link>https://matthewdaly.co.uk/blog/2022/10/26/why-i-no-longer-use-the-repository-pattern/</link>
            <guid>https://matthewdaly.co.uk/blog/2022/10/26/why-i-no-longer-use-the-repository-pattern/</guid>
            <pubDate>Wed, 26 Oct 2022 17:30:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>In September 2016, I started a new job after my previous employer went into liquidation. I expected a certain learning curve because I was going from an environment where I&#x27;d been the main driver of establishing coding standards and TDD (and which often felt like pushing a boulder up a hill) to one where there was a large-ish team of ten developers, and so there would be established standards in order to try to help keep things consistent between projects. One of the biggest changes for me was adopting the repository pattern - it was used routinely on every project. The lead developer was very keen on it as it offered the following benefits:</p><ul><li>A high-level abstraction over Eloquent, allowing for relatively easy replacement of Eloquent with raw database queries, Doctrine, MongoDB, CouchDB etc</li><li>Easy caching by wrapping the repository class in a caching decorator</li></ul><p>I quite quickly embraced this concept, and began routinely using the repository pattern as a matter of course on new projects. Yet nowadays, I&#x27;ve largely stopped using the repository pattern, because experience has taught me that it&#x27;s really not all it&#x27;s cracked up to be. It often adds very little value for a lot of effort, and I really don&#x27;t think it&#x27;s often worthwhile. Here I&#x27;ll break down the reasons I no longer use it.</p><h2>Eloquent is already an abstraction</h2><p>Out of the box, Eloquent supports SQLite, MySQL/MariaDB, PostgreSQL and MSSQL. It <em>is</em> a somewhat leaky abstraction, but that can&#x27;t be helped, and as <a href="https://www.martinfowler.com/bliki/OrmHate.html">Martin Fowler said</a>, that isn&#x27;t a reason to avoid them. Mapping relational data to object oriented code is <em>hard</em>, and if you expect your ORM to completely abstract away the difference between relational databases, then your expectations are unreasonable. ORMs cover the 90% use cases very well, which makes a lot of stuff significantly easier, and offer escape hatches for when you need them. Unless you have a really good reason not to, you should be using the default ORM provided by your framework, and the onus is on you to justify not doing so if you feel it makes sense.</p><p>Furthermore, it&#x27;s possible to extend Eloquent to support various non-relational data backends such as:</p><ul><li>Markdown, YAML and JSON files, through <a href="https://github.com/ryangjchandler/orbit">Ryan Chandler&#x27;s Orbit package</a></li><li>MongoDB, through <a href="https://github.com/jenssegers/laravel-mongodb">Jens Seger&#x27;s laravel-mongodb package</a></li></ul><p>If you <em>really</em> need to rewrite an existing application to support a whole new database backend that isn&#x27;t supported out of the box by Eloquent, or by an off-the-shelf package, then ultimately you could consider writing your own Eloquent extension to facilitate this. But I&#x27;d be very surprised if that happens often.</p><h2>You <em>probably</em> won&#x27;t ever need to switch database backends to something Eloquent doesn&#x27;t support</h2><p>If you&#x27;re building an application that uses a relational database, then it&#x27;s likely that most of the data you are storing is fairly well-suited to a relational data model (if it wasn&#x27;t, why would you be using a relational model now?). As such, it&#x27;s decidedly unlikely that you&#x27;re ever going to need to migrate it to a non-relational database store, unless something fairly fundamental changes. Building out repositories on the offchance you <em>might</em> one day need to migrate to a database backend not supported by Eloquent, or to a database interface other than Eloquent, is probably excessive, and unless you have a very specific use case, a violation of the <a href="https://www.martinfowler.com/bliki/Yagni.html">YAGNI principle</a>.</p><p>I&#x27;m not going to pretend my own experience is necessarily representative of <em>every</em> possible experience (nor should you insinuate the same), but I&#x27;ve been in the industry since 2011, and the only time I&#x27;ve <em>ever</em> had to migrate a website from one database engine to another was with a legacy Zend 1 application that takes up a lot of my time at work. That had been on the same server since around 2010, despite a rather shaky rewrite in 2015 before I got there, and was still using MySQL 5.0, and PHP 5.4. It became necessary to move it to a new server, and it wasn&#x27;t possible (or desirable) to install a version of MySQL that old on the new server. As such I took the decision that we needed to bite the bullet and migrate to a currently supported database, despite the potential issues it could cause. Given there were inevitably going to be teething troubles when migrating a large, <em>very</em> legacy application with no tests, but that most of the existing queries were not very sophisticated, then migrating to MariaDB 10.2 would be no harder than migrating to MySQL 5.7, so I opted for the former. While this did cause some grief (particularly with respect to boolean fields), it used the same Zend 1 database layer, built on top of PDO, despite migrating to a different version of a different database (albeit a fork of the original).</p><p>And if the problem is that the amount of data means that queries are taking too long, it could easily be simply that there aren&#x27;t appropriate indexes set up, as <a href="https://www.commitstrip.com/en/2014/06/03/the-problem-is-not-the-tool-itself/">memorably demonstrated in Commitstrip</a>.</p><h2>You <em>probably</em> won&#x27;t ever need to switch away from Eloquent to another database interface</h2><p>This is an edge case that&#x27;s probably not worth even thinking about. The only circumstances under which you might be confronted with an explicit need to migrate away from Eloquent are the following:</p><ul><li>Laravel drops Eloquent in favour of a new ORM, in which case there will be a clear migration path to the new ORM</li><li>A site built in another framework, or without a framework, but using Eloquent, can no longer use it and must be migrated to an alternative database interface</li><li>Laravel development ceases, or you have to move an existing site away from it without doing a full rewrite for some other reason</li></ul><p>I&#x27;ve been in the situation on the aforementioned legacy project of migrating from Zend 1 DB to Eloquent, and it really isn&#x27;t that big a deal to do so because all these query builders and database interfaces do largely the same thing - there are some implementation details that differ, but they&#x27;re never all that different, and where you&#x27;re using database-specific functionality then you&#x27;re likely using one of the escape hatches to write raw SQL anyway. The only problems I&#x27;ve encountered are down to the original developer rolling their own crappy legacy models, not to the underlying queries.</p><p>And if you&#x27;re planning on migrating away from Eloquent to raw database queries, just because someone told you it&#x27;s faster, <a href="/blog/2022/06/05/the-orm-delusion/">don&#x27;t</a>.</p><h2>If you <em>do</em> need to switch to an unsupported backend, you probably won&#x27;t need to switch <em>every</em> table, and if you do, it won&#x27;t all be at once</h2><p>If you do determine that you need to switch part of your application to a different database engine, it&#x27;s very unlikely that the whole database needs to be replaced lock, stock and barrel. Most likely, it&#x27;ll be a handful of tables that are a better fit for a different data store. Under these circumstances, why would you want to move other tables, which <em>are</em> a good fit for the relational model, to a different database, and potentially degrade performance?</p><p>Most likely, what you&#x27;ll end up with is a hybrid model where most of your data is relational and is stored in something Eloquent can work with, while the other data which is a better fit for a different data store is handled by an alternative backend. That limits the scope of any changes you need to make to just those queries that touch on the table you plan to migrate. And as stated above, implementing that on the offchance you may need it in future is a violation of YAGNI.</p><p>And if the reason for switching is due to the sheer size of the data, different tables will likely reach that point at different times, so you can migrate each one to the new store at the point it starts to become an issue.</p><h2>The availability of JSON fields in relational databases reduce the necessity for non-relational databases</h2><p>It used to be the case that storing arbitrary keys and values in a relational database was tricky, and you had to resort to sub-optimal solutions such as <a href="https://en.wikipedia.org/wiki/Entity%E2%80%93attribute%E2%80%93value_model">Entity-Attribute-Value</a>, as used by, for example, the WordPress <code>wp_postmeta</code> table. At that time, a relational database such as MongoDB offered a significant advantages in terms of being able to store arbitrary data.</p><p>Since then, most relational databases have introduced new field types such as HStoreField or JSON field types, which allow for easily storing arbitrary keys and values within a row of a relational database, and ORMs such as Eloquent allow for casting that data to a convenient form. As such, that particular use case for a non-relational database over a relational one is now largely redundant. It&#x27;s also possible to enforce a JSON schema so that you can exercise as much or as little control over the data as necessary.</p><p>There are other use cases for non-relational databases, but most of those only really come into play when you have truly colossal amounts of data, and to be honest it takes a <em>long</em> time to get to that point. If you get to the point where you need to worry about those kind of issues, you can probably afford to deal with it.</p><h2>Using the repository pattern for every query involves writing a <em>lot</em> of boilerplate code</h2><p>Writing a repository class for all the models you plan to use in an application is something not to be taken lightly. You have to collect every query you&#x27;re ever going to make against a specific table and place it in one class, and for a large application that will be a lot of work. Yes, there will be some common methods that can live in a base class, such as ones for all items, items by ID, paginated list etc, but there will still be a lot of work involved, and it will likely be quite repetitive, with some differing only slightly.</p><p>And if you&#x27;re also planning to decorate the repositories to be able to cache them, the burden increases significantly. For each model, you need an interface for the repository, a class for the repository implementation, and a class for the decorator, as well as all the boilerplate to resolve the interface correctly.</p><h2>Returning arrays sacrifices type safety</h2><p>Honestly, this is probably the biggest issue for me these days. I routinely use Psalm on my projects these days, and it&#x27;s been hugely beneficial to those projects to have that kind of feedback about how well-typed my code is. Abstracting away the difference between queries when using different repository implementations means we can&#x27;t return ORM-specific objects, leaving us with two alternatives:</p><ul><li>Return arrays, which can&#x27;t be so easily type-hinted - we can annotate those arrays to tell tools like Psalm what shape we expect back, but it&#x27;s harder to enforce that, and the annotations can get out of sync easily.</li><li>Return a more generic data transfer object (or a collection or array thereof) containing the data, in which case we have to write yet more boilerplate code - a DTO for each model, plus the logic to convert the data from an Eloquent model to an instance of the DTO.</li></ul><p>Neither of these options are great. The first one reduces the type safety of the application substantially, and the second will cause you an awful lot of work for very little benefit. I would definitely struggle to justify this to my bosses or clients.</p><h2>The supposed improvements in testability don&#x27;t really pan out in practice</h2><p>A big part of the promise of the repository pattern is being able to run unit tests without hitting the database. The trouble is that a database is an integral part of your application, and replacing it with mocks often isn&#x27;t very useful. Mocks are only as good as the data they provide, and if your mock data diverges from what the database actually provides, it&#x27;s easy for issues to slip through without being caught by your tests.</p><p>As long as you have migrations that can recreate the structure of your database accurately (if not the content), then you can happily use an in-memory SQLite database as an alternative to your production database for most functionality that isn&#x27;t database-specific. That&#x27;s not to say it&#x27;s always a drop-in replacement for your production database, and you should be aware of the possibility of differences in behaviour between databases if you&#x27;re using something else in production, but it&#x27;s a damn sight closer to MySQL in behaviour than mocking out the query. Often, a good compromise is to use an in-memory SQLite database for testing locally, where it&#x27;s more important to be able to run tests quickly, but use your production database engine in continuous integration where it&#x27;s more important for everything to be correct. If you&#x27;re building a generic package where it needs to support every database engine supported by Eloquent, then your continuous integration solution should of course actively test against every supported database engine.</p><p>If there are use cases where you need to use functionality from MySQL or PostgreSQL that doesn&#x27;t exist in SQLite in tests, James Bannister <a href="https://bannister.me/blog/using-mysql-and-postgres-functions-in-sqlite">suggested a way to patch missing functions that can help</a>.</p><h2>It&#x27;s not a good fit for an ActiveRecord-style ORM</h2><p>Repositories are generally a better fit for a DataMapper-style ORM than ActiveRecord, and many actually include a repository implementation by default, eg Doctrine. This isn&#x27;t a criticism of ActiveRecord, which is a simple, intuitive way of building an ORM, and is implemented by many other frameworks too (Django is a good example), but sometimes it&#x27;s just not a good fit for your application.</p><p>If you really <em>need</em> the specific advantages of the repository pattern, then trying to retrofit it to an ActiveRecord-style ORM like Eloquent from the outset is an awful lot of work. There&#x27;s a <a href="http://laraveldoctrine.org/">Doctrine integration for Laravel</a> and you&#x27;re far better off just using that, rather than trying to wrap your own implementation around Eloquent. Almost invariably, your own implementation will be crappier than that, and involve a lot more work, so why waste time and effort on it?</p><h2>What I do nowadays</h2><p>I haven&#x27;t <em>completely</em> stopped using the repository pattern. What I tend to do nowadays is as follows:</p><ul><li>For simple or one-off queries, I use Eloquent directly. There&#x27;s not much value in abstracting away something simple like <code>Page::find($id)</code>, or a <em>slightly</em> more complex query that&#x27;s used only in one place.</li><li>For repetitive parts of queries, local scopes offer a convenient and consistent way to abstract away that functionality. For instance, on the aforementioned legacy project, which now uses Eloquent, the various content types have a scope called <code>scopeIsInDate()</code> to retrieve only items which are in date.</li><li>For a small number of queries that relate to a specific model instance, I define them as methods on the model class itself. These tend to be things to do with a relation of the model.</li><li>For more complex queries, or those which are used in multiple places, I do use repository classes of a sort, but these are just convenient containers for those queries in order to avoid duplication.</li><li>For <em>really</em> complex queries, such as those for reports across multiple tables, I use dedicated query classes. These break the subqueries for different tables out into different private methods and perform a <code>UNION</code> across those subqueries, so they require a lot of repetitive queries. Long-term the solution would be to refactor those tables down to a single table for the various content types, but that&#x27;s not going to be practical any time soon.</li></ul><p>That said, the work I do now is different - I used to build APIs for mobile apps where the endpoints were generally generic endpoints that exposed CRUD functionality for different types of resources. It&#x27;s been a while since I&#x27;ve done that, and the repository pattern would arguably provide more benefit for that kind of functionality where most of the queries were things like &quot;get this resource by ID&quot;, &quot;get paginated list of these resources&quot; etc.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Everything's (potentially) a callable]]></title>
            <link>https://matthewdaly.co.uk/blog/2022/10/02/everythings-potentially-a-callable/</link>
            <guid>https://matthewdaly.co.uk/blog/2022/10/02/everythings-potentially-a-callable/</guid>
            <pubDate>Sun, 02 Oct 2022 19:30:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>I&#x27;m a big fan of callables in PHP in general. They&#x27;re an extremely powerful way to build applications out of many different reusable components, in a way that combines the best aspects of object-oriented and functional programming.</p><p>If you&#x27;re not familiar with the idea, consider this class:</p><pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace App\Jobs;

use Illuminate\Database\ConnectionInterface;
use Illuminate\Support\Benchmark;

final class Printer
{
    public function __invoke(string $value): void
    {
        echo $value;
    }
}
</code></pre><p>Note the use of the <code>__invoke()</code> magic method. This gets called if you try to call the object as a function, eg:</p><pre><code class="language-php">&lt;?php

// Will echo &quot;Hello, World!&quot;
$printer = new Printer();
$printer(&quot;Hello, World!&quot;);
</code></pre><p>Now, this may not seem like a terribly big deal, but it&#x27;s only once you start putting them together that their real power becomes apparent. They&#x27;re essentially &quot;closures on steroids&quot; in that they can do basically anything a closure can, and a lot of stuff they can&#x27;t:</p><ul><li>An invokable class passes the <code>callable</code> type hint, so you can generally use it in most of the same places you would a closure. As such, if you have a closure whose functionality needs to be reused elsewhere, it may make sense to refactor it into an invokable class.</li><li>Because they&#x27;re classes, if they get large enough for it to be worthwhile, you can refactor part of the functionality into private methods. You can also pull in additional functionality through inheritance or traits if need be, but as this approach makes composition more achievable, you may find you don&#x27;t often need to do so.</li><li>You can use constructor injection to pull in any dependencies the class has in a way you can&#x27;t with closures.</li></ul><p>As such, invokables let you chain functionality in the same way you would with closures, but with more capabilities and a higher level of abstraction. For instance, imagine you work on an e-commerce application, where each order is represented by an ORM model called <code>Order</code>, and the job to process an order is implemented in an invokable class called <code>ProcessOrder</code>, which accepts an instance of <code>Order</code>. Now, imagine a third party want to place multiple orders by sending a CSV file over FTP. Because you implemented <code>ProcessOrder</code> as an invokable, all you need to do is get the CSV data, generate an instance of <code>Order</code> from each row, and pass it into <code>ProcessOrder</code>, without changing a single existing line of code. You might do something like this:</p><pre><code class="language-php">&lt;?php

$data = file_get_contents($remote_url);
$result = Collection::make($data)
    -&gt;map(App::make(ConvertToOrder::class))
    -&gt;each(App::make(ProcessOrder::class));
</code></pre><p>All <code>ConvertToOrder</code> has to do is take the array data and create the model instance, then pass it on. Orders are processed consistently between those on the e-commerce site and those received via FTP, and the amount of new code required is minimal, limited to the <code>ConvertToOrder</code> class and whatever command class is being triggered (in this case, it might be an Artisan command). As long as you&#x27;ve picked an appropriate name for each class, it&#x27;s really obvious how this pipeline works and what each step does, without the developer having to even open the class in question.</p><p>Using <code>__invoke()</code> as the defined method for doing something when the class only carries out a single action also makes sense as a general convention. If the class name, by itself, defines what the class is meant to do, then a method name is largely superfluous, and you end up making your method something like <code>process()</code>, <code>execute()</code> or <code>handle()</code>. Using <code>__invoke()</code> instead is both more concise and more consistent, because it allows you to use the shorter syntax, without the need to either choose or remember an actual method name.</p><p>Assuming you&#x27;re working with a framework like Laravel, then as long as you&#x27;re working on a class that&#x27;s not one of the class types explicitly required by the framework, then you should be fine to use invokables however you like. For instance, if you have something like the <code>ProcessOrder</code> service class above, then its only real dependency on Laravel itself would be that it takes in an ORM instance, plus whatever is pulled in via constructor injection. However, classes generated by the framework itself are more dependent on a particular, predefined structure. That said, there are some parts of the framework that are amenable to using invokables.</p><h2>Controllers</h2><p>For a while now, Laravel has supported <a href="https://laravel.com/docs/9.x/controllers#single-action-controllers">single action controllers</a>, which implement a single <code>__invoke()</code> method, as in this example:</p><pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace App\Http\Controllers;

use App\Models\User;

final class FooController extends Controller
{
    /**
     * Return a view
     *
     * @return \Illuminate\Http\Response
     */
    public function __invoke()
    {
        return view(&#x27;foo&#x27;);
    }
}
</code></pre><p>This has the following advantages:</p><ul><li>Injecting dependencies into a controller&#x27;s constructor adds to the time taken to process the request, and if you have a controller which handles multiple actions, then you may often be injecting dependencies for a route which aren&#x27;t required for that route, which can have a noticeable performance impact. By breaking larger controllers down into single action controllers, you can prevent that from happening.</li><li>Setting up routing for the controller is simpler - it just needs to accept the class name, not the method name.</li></ul><p>Using callables as controllers doesn&#x27;t make sense for every use case. For instance, if you&#x27;re building an API that exposes CRUD functionality for multiple resource types, it probably makes more sense to use a resource controller which defines all the actions for a given resource type, particularly if they&#x27;re similar enough that you&#x27;re extending a base resource controller with common functionality. But for any reasonably complex route, it may make sense to use a single action controller.</p><h2>Middleware</h2><p>Middleware is something else that only really has one public method and could therefore be implemented as an invokable, at least in theory. Some frameworks, such as Laminas, explicitly support it. The Laravel documentation doesn&#x27;t appear to mention it, but after some experimentation I&#x27;ve discovered that it&#x27;s possible to use callables as middleware in Laravel. For instance, take this callable middleware class I wrote:</p><pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace App\Http\Middleware;

use Illuminate\Http\Request;
use Illuminate\Http\Response;

final class CallableDemo
{
    public function __invoke(Request $request, $next): Response
    {
        $response = $next($request);
        $response-&gt;header(&#x27;X-Clacks-Overhead&#x27;, &#x27;GNU Terry Pratchett&#x27;);
        return $response;
    }
}
</code></pre><p>This is a relatively simple middleware class which adds the <a href="http://www.gnuterrypratchett.com/">X-Clacks-Overhead header</a> to the response. At least in a recent version of Laravel 9, the following method of adding middleware in the router works:</p><pre><code class="language-php">&lt;?php

...
use App\Http\Middleware\CallableDemo;

...

Route::resource(&#x27;foo&#x27;, FooController::class)
-&gt;middleware(CallableDemo::class);
</code></pre><p>As does declaring it as global middleware in <code>app\Http\Kernel.php</code>:</p><pre><code class="language-php">&lt;?php

namespace App\Http;
...

class Kernel extends HttpKernel
{
    protected $middleware = [
        ...
        \App\Http\Middleware\CallableDemo::class,
    ];
</code></pre><p>Or in the <code>web</code> group:</p><pre><code class="language-php">&lt;?php

...
    /**
     * The application&#x27;s route middleware groups.
     *
     * @var array&lt;string, array&lt;int, class-string|string&gt;&gt;
     */
    protected $middlewareGroups = [
        &#x27;web&#x27; =&gt; [
            ...
            \App\Http\Middleware\CallableDemo::class,
        ],
</code></pre><p>Or as route middleware:</p><pre><code class="language-php">&lt;?php
    protected $routeMiddleware = [
        ...
        &#x27;gnu&#x27;   =&gt; \App\Http\Middleware\CallableDemo::class,
    ];
</code></pre><p>This example doesn&#x27;t cover middleware that accepts dependencies from the container, however. So what if we amend our middleware class to accept a raw database connection as a constructor dependency and use that in the middleware body to add a header giving the total number of users, as in this example?</p><pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace App\Http\Middleware;

use Illuminate\Database\ConnectionInterface;
use Illuminate\Http\Request;
use Illuminate\Http\Response;

final class CallableDemo
{
    public function __construct(private ConnectionInterface $db)
    {
    }

    public function __invoke(Request $request, $next): Response
    {
        $response = $next($request);
        $response-&gt;header(&#x27;X-Clacks-Overhead&#x27;, &#x27;GNU Terry Pratchett&#x27;);
        $response-&gt;header(&#x27;X-Total-Users&#x27;, $this-&gt;db-&gt;table(&#x27;users&#x27;)-&gt;count());
        return $response;
    }
}
</code></pre><p>Yes, looks like this works fine too.</p><h2>Queue jobs</h2><p>Job classes are something else that do only one thing, and thus it potentially makes sense to use an invokable class for them. Consider this job class which uses the Benchmark helper to benchmark a query and dump the results to the screen:</p><pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace App\Jobs;

use Illuminate\Database\ConnectionInterface;
use Illuminate\Support\Benchmark;

final class ThingDoer
{
    public function __construct(private ConnectionInterface $db)
    {
    }

    public function __invoke()
    {
        Benchmark::dd(fn() =&gt; $this-&gt;db-&gt;table(&#x27;users&#x27;)-&gt;get());
    }
}
</code></pre><div>This example will work if you&#x27;re using the sync queue connection type, but likely not with any others, because the intent is to run a query and dump it out. Obviously, that isn&#x27;t really the main use case of job classes, but it&#x27;s fine for demonstrating the principle of using invokable classes for tasks that do one thing only.</div><p>If we try the following in a route closure:</p><pre><code class="language-php">Route::get(&#x27;/&#x27;, function () {
    dispatch(ThingDoer::class);
</code></pre><p>We see the error <code>get_class(): Argument #1 ($object) must be of type object, string given</code>. So instead, we need to fetch <code>ThingDoer</code> from the container and pass it to <code>dispatch()</code>:</p><pre><code class="language-php">Route::get(&#x27;/&#x27;, function (ThingDoer $doer) {
    dispatch($doer);
</code></pre><p>In a controller, it may well make more sense to do this via method injection.</p><h2>Event listeners</h2><p>Event listeners are yet another example of something that only really does one thing. This invokable listener is based on the one used to send notifications in <a href="https://bootcamp.laravel.com/inertia/notifications-and-events">Laravel Bootcamp</a>:</p><pre><code class="language-php">&lt;?php

namespace App\Listeners;

use App\Events\ChirpCreated;
use App\Models\User;
use App\Notifications\NewChirp;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Queue\InteractsWithQueue;

class SendChirpCreatedNotifications implements ShouldQueue
{
    /**
     * Create the event listener.
     *
     * @return void
     */
    public function __construct()
    {
        //
    }

    /**
     * Handle the event.
     *
     * @param  \App\Events\ChirpCreated  $event
     * @return void
     */
    public function __invoke(ChirpCreated $event)
    {
        foreach (User::cursor() as $user) {
            $user-&gt;notify(new NewChirp($event-&gt;chirp));
        }
    }
}
</code></pre><p>This works in exactly the same way as a standard listener class. If you map it to an event class in the usual way, it works entirely as expected. However, as with some of the other examples, it&#x27;s not clear if it supports constructor injection, so it&#x27;s best to check. If we amend the listener as follows:</p><pre><code class="language-php">&lt;?php

namespace App\Listeners;

use App\Events\ChirpCreated;
use App\Models\User;
use App\Notifications\NewChirp;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Database\ConnectionInterface;
use Illuminate\Queue\InteractsWithQueue;

class SendChirpCreatedNotifications implements ShouldQueue
{
    /**
     * Create the event listener.
     *
     * @return void
     */
    public function __construct(private ConnectionInterface $db)
    {
    }

    /**
     * Handle the event.
     *
     * @param  \App\Events\ChirpCreated  $event
     * @return void
     */
    public function __invoke(ChirpCreated $event)
    {
        foreach ($this-&gt;db-&gt;table(&#x27;users&#x27;)-&gt;cursor() as $user) {
            dd($user);
        }
    }
}
</code></pre><p>Now, if we trigger the <code>ChirpCreated</code> event, it breaks at the right point and spits out the user data as expected, thus demonstrating that it works.</p><h2>Limitations</h2><p>There are some limitations of using invokable classes which you should bear in mind when deciding whether to make a class an invokable or not. For instance, accessing an invokable as as property of another class can be awkward - take this controller class:</p><pre><code class="language-php">&lt;?php

namespace AppServiceProvider

use App\Jobs\ThingDoer;

final class FooController extends Controller
{
    public function __construct(private ThingDoer $thingDoer)
    {
    }

    /**
     * Return a view
     *
     * @return \Illuminate\Http\Response
     */
    public function __invoke()
    {
        // Call $this-&gt;thingDoer...
        return view(&#x27;foo&#x27;);
    }
}
</code></pre><p>We can&#x27;t call <code>$this-&gt;thingDoer()</code> because <code>$this</code> refers to the instance of <code>FooController</code>, and so we&#x27;re referring to a non-existing method of <code>FooController</code> called <code>thingDoer</code> rather than the property <code>$this-&gt;thingDoer</code>. There are a couple of ways to do it. You can call <code>__invoke()</code> explicitly, which isn&#x27;t very elegant:</p><pre><code class="language-php">&lt;?php

final class FooController extends Controller
{
    ...
    /**
     * Return a view
     *
     * @return \Illuminate\Http\Response
     */
    public function __invoke()
    {
        $this-&gt;thingDoer-&gt;__invoke();
        return view(&#x27;foo&#x27;);
    }
}
</code></pre><p>Or you can use <code>call_user_func()</code>:</p><pre><code class="language-php">&lt;?php

final class FooController extends Controller
{
    ...
    /**
     * Return a view
     *
     * @return \Illuminate\Http\Response
     */
    public function __invoke()
    {
        call_user_func($this-&gt;thingDoer);
        return view(&#x27;foo&#x27;);
    }
}
</code></pre><p>Or, my personal favourite approach:</p><pre><code class="language-php">&lt;?php

final class FooController extends Controller
{
    ...
    /**
     * Return a view
     *
     * @return \Illuminate\Http\Response
     */
    public function __invoke()
    {
        ($this-&gt;thingDoer)();
        return view(&#x27;foo&#x27;);
    }
}
</code></pre><p>In the context of Laravel controllers, you also have the option to use method injection:</p><pre><code class="language-php">&lt;?php

final class FooController extends Controller
{
    ...
    /**
     * Return a view
     *
     * @return \Illuminate\Http\Response
     */
    public function __invoke(ThingDoer $thingDoer)
    {
        $thingDoer();
        return view(&#x27;foo&#x27;);
    }
}
</code></pre><h2>Summary</h2><p>Using invokable classes for any part of your application that does one thing only, and could potentially be reused, makes a lot of sense. It allows for more elegant code, giving you the advantages of functional programming without losing the benefits of OOP, and allows you to break your application down into a selection of easily reusable parts. While I&#x27;ve not been in a position to try it before, I also suspect that it makes decorating components simpler, to the point that certain tasks like logging and caching can be done with a single closure or invokable. Next time you write a class to do something, give serious thought to the idea of whether it should be an invokable - the answer may be &quot;yes&quot; more often than you think, and it&#x27;ll often help make your code simpler and more reusable.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The ORM Delusion]]></title>
            <link>https://matthewdaly.co.uk/blog/2022/06/05/the-orm-delusion/</link>
            <guid>https://matthewdaly.co.uk/blog/2022/06/05/the-orm-delusion/</guid>
            <pubDate>Sun, 05 Jun 2022 18:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>I&#x27;ve used some low-level database interfaces like PDO, and the database interfaces from several frameworks, including Codeigniter, Zend 1, Django, and Laravel, and I&#x27;ve been in the web development industry for over a decade at this point, so I&#x27;ve had a reasonable amount of experience working with various database interfaces. Based on this experience, I agree wholly with <a href="https://twitter.com/erikaheidi/status/1510347907819524105?s=20&amp;t=0IjKFyO3O-EctVq43hRkVw">this tweet</a> about the advantages of using an ORM on your project. I routinely use an ORM for the overwhelming majority of projects I work on and rarely need to drop down to writing raw SQL. Unfortunately, there seems to be an <em>awful</em> lot of misinformation and misconceptions about the advantages and disadvantages of choosing to use an ORM, and when to do so.</p><p>A lot of people seem to think that using an ORM inherently makes your application perform badly. However, this just isn&#x27;t true, <em>as long as you&#x27;re using the ORM the right way</em>. Using an ORM not only allows you to solve certain classes of performance problems more easily than by writing SQL statements, but they generally make it easier to reason about how your application works. However, there are some things you need to bear in mind when using one, to prevent you from introducing potential performance problems. In this post, I&#x27;ll give you the reasons why you should consider using an ORM on your projects, at least by default, and warn you about some of the things that can cause trouble when using one.</p><div title="Fair warning"><p>If you&#x27;re going to patronize me, or other commenters, by mansplaining <a href="https://www.culttt.com/2014/06/18/whats-difference-active-record-data-mapper">ActiveRecord vs DataMapper</a>, you can get in the damned sea. I know the difference and I&#x27;ve chosen to use ActiveRecord. I&#x27;m categorically not interested in rehashing that argument, let alone being condescended to, and I will delete <strong>any comments</strong> that I think do either. If you <em>do</em> have <em>legitimate, specific gripes</em> about Eloquent, or any other implementation of ActiveRecord, or indeed ORMs in general, and can moan about them without being unpleasant to other people, I&#x27;m happy to accept those comments. No tool is perfect, and there are always some cases where it will cause problems, but I will not tolerate anyone being disrespectful. Using Laravel, Eloquent, or any ActiveRecord implementation, does not make someone Nooby McNoobface, and if you&#x27;re going to claim it does, you&#x27;re not welcome here.</p></div><p>Please note, that while I&#x27;m referring to Eloquent throughout this post, the overwhelming majority of what I&#x27;m talking about is also applicable to other ORMs, particularly other Active Record-style ORMs such as the Django ORM. I&#x27;m using Eloquent as the primary example here because it&#x27;s the one I&#x27;ve used most often in the last few years.</p><h2>Reasons to use an ORM</h2><p>Below I&#x27;ve listed the reasons I can think of for using an ORM. I don&#x27;t think this is necessarily an exhaustive list, and others may be able to think of others or express these reasons more elegantly than I can. If you can think of other good reasons, feel free to add them to the comments.</p><h3>Resolving N+1 queries</h3><p>In my experience, N+1 queries are <em>far and away</em> the most common performance problem I&#x27;ve encountered when dealing with legacy applications that don&#x27;t use an ORM. They&#x27;re typically somewhat less obvious than a single slow query would be when profiling your code because the problem comes from multiple small queries, rather than from single large ones, but they can have a crippling effect on the performance of your application.</p><p>It <em>is</em> possible to use JOINs to pull in another table and get the related data in a single query, but that <em>really</em> starts to get hairy if you have to pull in multiple levels of tables, and it can be <em>very</em> difficult to write a query that does so while remaining easy to understand.</p><p>Fortunately, most ORMs have simple methods for efficiently fetching related data via eager loading. For instance, Eloquent has the <code>with()</code> and <code>load()</code> methods. By making good use of these methods, you can write efficient queries that are still straightforward to understand. In addition, you can also use methods such as <code>has()</code> and <code>whereHas()</code> to query relationship existence, which is generally a lot more elegant than the underlying <code>WHERE EXISTS</code> statement.</p><p>Eloquent also carries out a degree of caching, particularly when dealing with relations. This can sometimes eliminate queries that would be made by a more naive ORM, but in the event you <em>do</em> need it, you can call the <code>refresh()</code> method on the model to ensure it&#x27;s up to date.</p><h3>Type safety</h3><p>Using an ORM, as opposed to a query builder or writing raw SQL, offers significant advantages in terms of the type safety of the code base.</p><p>For instance, say you have the below method in a Laravel project which returns an array of data from a query:</p><pre><code class="language-php">&lt;?php

use DB;

final class ProductRepository {
    // Rest of class...

    public function getFirstProductBelow(float $price): array
    {
        return DB::table(&#x27;products&#x27;)-&gt;where(&#x27;price&#x27;, &#x27;&lt;&#x27;, $price)-&gt;first();
    }
}
</code></pre><p>While having a return type at all is better than none, it isn&#x27;t very useful for static analysis tools. Just telling Psalm that the response is an array doesn&#x27;t tell it what fields to expect in that array.</p><p>You <em>can</em> use annotations to specify a more meaningful response...</p><pre><code class="language-php">&lt;?php

use DB;

final class ProductRepository {
    // Rest of class...

    /*
     * @psalm-return array{id: int, name: string, price: float}
     */
    public function getFirstProductBelow(float $price): array
    {
        return DB::table(&#x27;products&#x27;)-&gt;where(&#x27;price&#x27;, &#x27;&lt;&#x27;, $price)-&gt;first();
    }
}
</code></pre><p>And that <em>would</em> tell Psalm that it returns an array with the denoted keys. However, it&#x27;s not the best solution:</p><ul><li>You&#x27;d need to either duplicate that <code>@psalm-return</code> docblock to any other method that returns a list of those items, in which case adding a new field becomes problematic, or you&#x27;d have to use a predefined template annotation</li><li>Those annotations need to be maintained, and if they got out of sync with your database structure, Psalm might get confused</li><li>The native PHP return type can only validate that the response is an array. The actual response could <em>theoretically</em> look very different and short of adding some potentially long-winded <code>assert()</code> calls about the shape of the array, we can&#x27;t validate that the right values exist.</li></ul><p>But suppose we instead use Eloquent. Our method might then look like this:</p><pre><code class="language-php">&lt;?php

use App\Models\Product;

final class ProductRepository {
    // Rest of class...

    public function getFirstProductBelow(float $price): Product
    {
        return Product::where(&#x27;price&#x27;, &#x27;&lt;&#x27;, $price)-&gt;first();
    }
}
</code></pre><p>We now know with absolute certainty that the response from this method is an instance of <code>App\Models\Product</code> because we&#x27;ve been able to declare a return type, and if it wasn&#x27;t, the method would throw an exception.</p><p>By itself, that doesn&#x27;t tell us what fields to expect on an instance of <code>App\Models\Product</code>, but Laravel IDE Helper can easily generate suitable <code>@property</code> annotations for us, based on the current database structure. If we run the following command:</p><pre><code class="language-bash">$ php artisan ide-helper:models -W
</code></pre><p>Then our model might end up looking something like this:</p><pre><code class="language-php">&lt;?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

/*
 * @property integer $id
 * @property string $name
 * @property float price
 */
final class Product extends Model
{
    // class body here
}
</code></pre><p>And that gives Psalm a single, canonical description of the structure of this class. Even if you couldn&#x27;t use Laravel IDE Helper for some reason, it&#x27;s not exactly onerous to manually define the properties on a given model in one place - it&#x27;s the work of a few minutes if you do it at the same time you define your models and migrations.</p><p>For even better type safety on your models, you can add the <code>@psalm-seal-properties</code> annotation, which will ensure that if you try to use an undocumented property on the model, Psalm will flag it as an issue. And having comprehensive type information isn&#x27;t just a matter of finding type issues, it also affects how good your autocompletion will be - with better type hints, you&#x27;ll have more effective and accurate completion options.</p><h3>Refraining from reinventing the wheel, probably badly</h3><p>I maintain a large legacy Zend 1 application where the original developer decided they didn&#x27;t want to use an existing ORM. Instead, they wrote their own model classes which looked something like this:</p><pre><code class="language-php" metastring="title=application/models/Page.php" title="application/models/Page.php">&lt;?php

class Application_Model_Page
{
    protected $id;
    protected $name;
    protected $price;

    public function __construct()
    {
        $this-&gt;id = null;
        $this-&gt;name = null;
        $this-&gt;price = null;
    }

    public function getId()
    {
        return $this-&gt;id;
    }

    public function setId($val)
    {
        $this-&gt;id = $val;
        return $this;
    }

    public function getName()
    {
        return $this-&gt;name;
    }

    public function setName($val)
    {
        $this-&gt;name = $val;
        return $this;
    }

    public function getPrice()
    {
        return $this-&gt;price;
    }

    public function setPrice($val)
    {
        $this-&gt;price = $val;
        return $this;
    }

    public function toArray()
    {
        return [
            &#x27;id&#x27; =&gt; $this-&gt;id,
            &#x27;name&#x27; =&gt; $this-&gt;name,
            &#x27;price&#x27; =&gt; $this-&gt;price,
        ];
    }

    public function populate(array $data)
    {
        $this-&gt;id = $data[&#x27;id&#x27;];
        $this-&gt;name = $data[&#x27;name&#x27;];
        $this-&gt;price = $data[&#x27;price&#x27;];
        return $this;
    }

    public function save()
    {
        $db = Zend_Registry::get(&#x27;db&#x27;);
        $data = [
            &#x27;name&#x27; =&gt; $this-&gt;name,
            &#x27;price&#x27; =&gt; $this-&gt;price,
        ];
        $db-&gt;update(&#x27;products&#x27;, $data, &#x27;id=&#x27; . $this-&gt;id);
    }

    public function find($id)
    {
        $db = Zend_Registry::get(&#x27;db&#x27;);
        $result = $db-&gt;fetchRow(&#x27;SELECT * FROM products WHERE id = &#x27; . $id);
        return $this-&gt;populate($result);
    }
}
</code></pre><p>Honestly, there are so many issues with this it&#x27;s hard to know where to start:</p><ul><li>You can&#x27;t define generic implementations of the various methods because they&#x27;re dependent on a specific structure, so you have to define those methods from scratch for every single model</li><li>The <code>find()</code> method requires that you first create an instance of the object, then call that method to return another instance, eg <code>(new Application_Model_Page())-&gt;find(1)</code>, which is extremely cumbersome</li><li>And if you want to populate multiple instances, you have to do so manually like this:</li></ul><pre><code class="language-php">&lt;?php
$response = [];
foreach ($result as $row) {
    $response[] = (new Application_Model_Page())-&gt;populate($row);
}
return $response;
</code></pre><p>We&#x27;re in the process of migrating off these legacy models to Eloquent, with the intent of eventually migrating the whole application to Laravel, and the contrast between using the two model types could not be greater. The Eloquent models are easy to maintain, easy to work with, highly performant, and require far less boilerplate code when implementing functionality.</p><p>Martin Fowler covered this issue pretty well in <a href="https://martinfowler.com/bliki/OrmHate.html">ORM Hate</a>. To quote:</p><blockquote><p>Listening to some critics, you&#x27;d think that the best thing for a modern software developer to do is roll their own ORM. The implication is that tools like Hibernate and Active Record have just become bloatware, so you should come up with your own lightweight alternative. Now I&#x27;ve spent many an hour griping at bloatware, but ORMs really don&#x27;t fit the bill - and I say this with bitter memory. For much of the 90&#x27;s I saw project after project deal with the object/relational mapping problem by writing their own framework - it was always much tougher than people imagined. Usually you&#x27;d get enough early success to commit deeply to the framework and only after a while did you realize you were in a quagmire - this is where I sympathize greatly with Ted Neward&#x27;s famous quote that object-relational mapping is the Vietnam of Computer Science.</p><p>The widely available open source ORMs (such as iBatis, Hibernate, and Active Record) did a great deal to remove this problem. Certainly they are not trivial tools to use, as I said the underlying problem is hard, but you don&#x27;t have to deal with the full experience of writing that stuff (the horror, the horror). However much you may hate using an ORM, take my word for it - you&#x27;re better off.</p></blockquote><p>And it&#x27;s worth bearing in mind that those words were written a decade ago. We now have over ten years&#x27; more experience finding potential problems with ORMs and finding effective solutions for those problems, and Eloquent has benefited from those changes, as well as improvements in the PHP language. Many issues you might have with an ORM ten years ago may simply no longer be worth worrying about.</p><h3>Consistency</h3><p>Eloquent&#x27;s scopes in particular have been invaluable for me in ensuring consistency. On the Zend 1 project mentioned above, there are still some issues with poor, inconsistent database design that I haven&#x27;t yet been able to get around to resolving. One of these is that different content types are stored in different tables with different field names, but we need to be able to make them work consistently when resolving whether a given item is in date, even though the fields have different names.</p><p>If we had to use the query builder or write SQL, we&#x27;d be stuck writing the same chunk of the query over and over each time we needed to get the in-date items of each type, and it would be all too easy to mess it up and use the wrong field name when doing a union of different content types. But if we define a local scope on each model called <code>scopeIsInDate()</code> with an implementation specific to that model, we can then easily reuse that and ensure consistency.</p><p>We also have a use case where, based on the value of one field, or whether the ID of the model is in a hard-coded list, it needs to be treated as a different object. By using a global scope, we can create two models that extend a common base, and apply one scope to one model, and another to the other model. That way, even though we have only one database table, we can effectively treat it as two separate ones when using the models. Yes, a better database structure would resolve that, but this is a big legacy application and there&#x27;s already lots to do to clean it up, so we can&#x27;t justify it any time soon.</p><h3>Reduces context switching</h3><p>Going from writing PHP to writing SQL and back is <em>hard</em> on the grey matter. It will slow you down because:</p><ul><li>You have to go from one mental model of how to construct a correct statement in terms of grammar and punctuation to another</li><li>You&#x27;re mixing two or more languages up in the same file, which isn&#x27;t great - your editor or IDE may not be able to easily apply proper syntax highlighting to the SQL if it&#x27;s just a string. This may make it harder to spot syntax errors</li></ul><p>If instead you only have to think about PHP&#x27;s rules while writing a query, the mental load is significantly lower and your editor or IDE can help you out a lot more.</p><p>Now, it has to be said, sometimes there <em>are</em> queries where it&#x27;s easier to write it out initially in SQL using something like MySQL Workbench, but I&#x27;d still advocate taking the time to go back and translate those queries into Eloquent if possible, or to the query builder if that&#x27;s more practical. I consider raw SQL in a PHP file to be technical debt because, in addition to the other points above:</p><ul><li>It makes it all too easy to accidentally leave an SQL injection vulnerability in your code</li><li>You can&#x27;t extract a part of the query to a scope for reuse, or make use of existing scopes to handle a part of the query</li></ul><p>As always, sometimes if you&#x27;re in a rush you can justify adding technical debt on a temporary basis, but that should be the exception, not the rule, and has to be justified.</p><h2>Things to bear in mind when using an ORM</h2><p>With the reasons I&#x27;d recommend using an ORM out the way, here are some of the gotchas you should be aware of when making a decision about using one:</p><h3>The ORM is an abstraction for SQL, not a replacement</h3><p>Honestly, the overwhelming majority of performance issues developers have with ORM&#x27;s boil down to this. Again with a quote from Martin Fowler:</p><blockquote><p>I&#x27;ve often felt that much of the frustration with ORMs is about inflated expectations. Many people treat the relational database &quot;like a crazy aunt who&#x27;s shut up in an attic and whom nobody wants to talk about&quot;</p></blockquote><p>If a developer treats an ORM like a black box and just writes queries without thinking about the SQL it generates, it&#x27;s no surprise whatsoever if the generated queries don&#x27;t perform well. It&#x27;s still running queries under the bonnet, it&#x27;s just that some of it is implicit. For instance, take this (relatively simple) example of an Eloquent query:</p><pre><code class="language-php">Post::join(&#x27;user&#x27;, &#x27;posts.user_id&#x27;, &#x27;=&#x27;, &#x27;users.id&#x27;)-&gt;get();
</code></pre><p>If you use something like Clockwork to profile this query, the end result will probably look something like this:</p><pre><code class="language-sql">SELECT * FROM posts
INNER JOIN users ON posts.user_id = users.id
</code></pre><p>And, to be fair, there <em>are</em> a few potential issues with this query.</p><ul><li>If you&#x27;re retrieving all the fields from the <code>posts</code> and <code>users</code> tables, then that could easily include fields that you don&#x27;t explicitly need</li><li>Depending on the use case, returning an arbitrary number of database rows can be potentially problematic, performance-wise, and it may be better to paginate them</li><li>If you haven&#x27;t set an appropriate foreign key on <code>posts.user_id</code>, the join could perform badly</li></ul><p>However, these issues really aren&#x27;t inherent to using an ORM, but are to do with it being used naively. Assuming we do want to paginate these results, and the only field on <code>users</code> that we need is the name, we could achieve what we want by rewriting this query as follows:</p><pre><code class="language-php">Post::join(&#x27;user&#x27;, &#x27;posts.user_id&#x27;, &#x27;=&#x27;, &#x27;users.id&#x27;)-&gt;select(&#x27;posts.*&#x27;, &#x27;users.name&#x27;)-&gt;paginate(20);
</code></pre><div><p>Yes, <a href="https://laravel.com/docs/9.x/pagination#cursor-pagination">cursor pagination</a> is a thing and will perform better than offset-based pagination in most cases, but I&#x27;m deliberately keeping this example as simple as possible.</p></div><p>As for the third issue, that&#x27;s easy enough - just ensure that you&#x27;re setting an appropriate foreign key.</p><h3>An ORM isn&#x27;t training wheels, it&#x27;s a power tool</h3><p>This is nearly the same issue as that above, but it&#x27;s important enough to deserve being mentioned separately.</p><p>Using an ORM effectively requires knowledge of your relational database. To write efficient queries with it, you need the same knowledge that you do to write the underlying query in SQL, AND knowledge of the ORM itself. If you start using it without learning to use a relational database (or let a junior dev who hasn&#x27;t learned SQL properly), or don&#x27;t profile your queries, you&#x27;re going to run into problems.</p><p>I&#x27;ve often heard people suggest that using an ORM means your SQL skills atrophy. Quite frankly, I find that utterly laughable. I make a point of avoiding writing raw SQL when I can use an ORM, and I still often find myself having to write raw SQL, particularly if I&#x27;m prototyping a complex query. It does make it unnecessary to write out simple queries in SQL, but I&#x27;m not going to benefit in the slightest at this point in my career by writing something like <code>SELECT * FROM posts</code> over and over if I can call <code>Post::all()</code> instead.</p><h3>Hydration can become a bottleneck for large datasets</h3><p>It has to be said, there <em>is</em> inevitably some overhead from instantiating an ORM model, which can be quite a complex class, compared to instantiating an array of data, and if you have to work with a response that contains a large number of rows, it may be better to return arrays than model instances.</p><p>Case in point, the Zend 1 project I maintain has a number of reports which the client downloads once a week. This includes a report of all the current users in the system, and although users who leave are cleaned out of the system automatically, there&#x27;s typically around thirty thousand rows returned from this query. That&#x27;s big enough that the time taken to instantiate a model instance for each row can become significant, and you don&#x27;t need a model instance if all you&#x27;re going to do is dump the data out to a CSV file, so the additional overhead of instantiating the ORM models may not be worth it. So in those circumstances, you&#x27;re better off using the query builder and returning an array - it&#x27;ll be quicker and use less memory.</p><p>Fortunately, it&#x27;s easy to convert an Eloquent query to a query builder one by calling the <code>getQuery()</code> method. That way you can write your query using Eloquent as normal, then convert it to a query builder instance, and return the data as an array.</p><h3>You can write nearly any query with an ORM, but it may require more effort</h3><p>Just because there isn&#x27;t a method for a particular SQL statement, or the methods it does have don&#x27;t have the options you need, doesn&#x27;t mean you need to write it the whole thing as a raw query. There&#x27;s still the various raw methods:</p><ul><li><code>selectRaw</code></li><li><code>whereRaw</code>/<code>orWhereRaw</code></li><li><code>havingRaw</code>/<code>orHavingRaw</code></li><li><code>orderByRaw</code></li><li><code>groupByRaw</code></li></ul><p>By making appropriate use of these methods, you can write only those parts of the query that absolutely need to be raw, without losing the advantages of using an ORM. For instance, if you need to use <code>CASE ... WHEN</code> statement to return a true or false value for if an entry is in date, or use <code>GROUP_CONCAT()</code> to concatenate some names from a related field into one field, you can easily do so using something like <code>-&gt;selectRaw(&#x27;CASE WHEN expiry_date &lt; NOW() THEN &#x27;true&#x27; ELSE &#x27;false&#x27;, GROUP_CONCAT(name)&#x27;)</code>.</p><p>Some more advanced parts of SQL can be harder to write using an ORM. For instance, take this query:</p><pre><code class="language-sql">WITH RECURSIVE children(id, name, parent_id, depth) AS
  (SELECT teams.*,
          0 AS depth
   FROM `teams`
   WHERE id = 1
   UNION ALL SELECT teams.*,
                    children.depth + 1
   FROM teams
   INNER JOIN children ON children.parent_id = teams.id)
SELECT *
FROM children
</code></pre><p>The <code>WITH RECURSIVE</code> CTE is a relatively new feature in SQL and not every implementation supports it. In addition, it&#x27;s only useful in certain, quite specific circumstances. As such, support for it is limited in most ORMs, and this is one use case where it <em>might</em> not be worth the bother of rewriting the query to use an ORM. However, it&#x27;s not impossible. The <a href="https://github.com/staudenmeir/laravel-cte">Laravel CTE</a> package extends Eloquent to add support for recursive queries, and even if you can&#x27;t use that for some reason, it might be worth rewriting the inner query alone in Eloquent, then using <code>toSql()</code> to get the SQL from it and insert that into the outer query, something like this:</p><pre><code class="language-php">$teams = Team::where(&#x27;id&#x27;, 1)
    -&gt;unionAll(Team::join(&#x27;children&#x27;, &#x27;children.parent_id&#x27;, &#x27;=&#x27;, &#x27;teams.id&#x27;)
    -&gt;selectRaw(&#x27;teams.*, children.depth + 1&#x27;)
    -&gt;toSql();
$query = &quot;WITH RECURSIVE children(id, name, parent_id, depth) AS ($teams) SELECT * FROM children&quot;;
</code></pre><p>It&#x27;s not perfect, but this at least means some of the query is expressed using Eloquent, making it easier to maintain and debug.</p><h3>You need to profile your queries to ensure they&#x27;re efficient</h3><p>Just because a query isn&#x27;t written manually doesn&#x27;t mean it&#x27;s not inefficient, and sometimes there can be hidden queries you&#x27;re not aware of. Third-party packages can be a source of this, and <a href="/blog/2020/03/11/caching-the-laravel-user-provider-with-a-decorator/">the authentication system can trigger some less-than-obvious queries which can be cached</a>. For this reason, it&#x27;s a really good idea to profile your pages to make sure they&#x27;re performing as expected.</p><p>I favour <a href="https://underground.works/clockwork/">Clockwork</a> as my profiling tool of choice, but <a href="https://laravel.com/docs/9.x/telescope">Laravel Telescope</a> and <a href="https://github.com/barryvdh/laravel-debugbar">Laravel Debugbar</a> are also solid options for this.</p><h3>It&#x27;s unlikely you can swap databases without rewriting at least some queries</h3><p>One of the advantages I&#x27;ve heard claimed for ORMs in the past is being able to migrate from, say, MySQL to PostgreSQL without making any changes to the code base. Honestly, I don&#x27;t think this one is very likely unless your queries are <em>very</em> simple. Any call to any of the <code>*raw()</code> would need to be manually checked and migrated, and I don&#x27;t think any sizeable application would be able to get away without having any of these. It may be you can find a third-party package to add custom methods to support these features directly, or can write your own, but it may not be worth the bother for only a handful of uses of that feature.</p><p>It can be convenient to be able to use an in-memory SQLite database for running your tests locally, but it likely won&#x27;t be practical if you depend on any database-specific functionality, or for all the tables in a large application. As such I only tend to do this when working on packages, where there&#x27;s only a handful of tables to deal with.</p><h2>Summary</h2><p>Hopefully this article has helped dispel some of the appalling myths, misconceptions, and general confusion that seem to be widespread around using an ORM. If there&#x27;s one thing I hope you take away from this article it&#x27;s that the ORM isn&#x27;t a black box, but a layer of abstraction over your relational database, and if you don&#x27;t bear that in mind, it&#x27;s no surprise if you go on to experience performance problems. When used properly, an ORM is an extremely useful tool that is applicable to nearly every query you&#x27;re likely to write, and it will help you make your code more readable, maintainable, performant, type-safe and secure.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Dynamic image handling with Glide and GraphQL]]></title>
            <link>https://matthewdaly.co.uk/blog/2021/08/21/dynamic-image-handling-with-glide-and-graphql/</link>
            <guid>https://matthewdaly.co.uk/blog/2021/08/21/dynamic-image-handling-with-glide-and-graphql/</guid>
            <pubDate>Sat, 21 Aug 2021 16:20:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>I&#x27;ve used <a href="https://glide.thephpleague.com/">Glide</a> on several PHP projects in the past. It&#x27;s a great package that makes it really easy to dynamically generate images on the fly. For instance, if you need a particular image at both a thumbnail size and a full-screen size, it means you have the flexibility to request it at the correct size for any one part of the page. This can potentially save bandwidth since you never have to request a larger image than you technically need and scale it down with HTML attributes or CSS, nor do you have to take steps to generate thumbnails separately before they&#x27;re needed. Frontend developers can adjust their code to request exactly the version they need at any one time, and can even apply certain effects dynamically.</p><p>However, by default it&#x27;s a bit too open. A malicious user could request an image at an excessive size as part of a denial of service attack. For that reason, it&#x27;s considered good practice to set a maximum image size, and sign all requests so that you can be sure they&#x27;re authorized by your application. This works fine if your images are being requested somewhere you can sign them easily, such as in a Blade template. However, doing so in the context of a React or Vue application can potentially be much harder because they&#x27;re working on the front end and so can&#x27;t sign requests that are made dynamically in the same way, at least not without you exposing your application&#x27;s key to the front end, which would be <em>really</em> risky. An API endpoint can return URLs for pre-signed specific versions of the image, but that&#x27;s not as flexible as being able to adjust what you get back via query parameters on the fly.</p><p>I&#x27;m currently working on an application that uses GraphQL for the API, and for that I wanted to use Glide to enable <a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images">responsive images</a> and minimise the size of the payload. Having recently rewritten this blog in Gatsby, I&#x27;d had some exposure to the Sharp plugin, which allows you to query for an image at specific dimensions. It struck me that I could probably do something similar with GraphQL in the context of a Laravel application. Since the GraphQL queries that would return the image URLs and other data were being handled server side, they could in theory accept parameters for the required images, validate that the specified values were acceptable, and return a secure, signed URL for that image for consumption by the front end. Since the frontend was having to make an AJAX request to fetch the items to show anyway, it could request the URLs as part of the same AJAX request as the rest of the items on a page, then render the images along with the rest of the content. Here I&#x27;ll demonstrate how to do this.</p><p>The first thing to do is implement a controller for returning images via Glide. This will differ between frameworks so you&#x27;d need to check the Glide documentation, but a typical Laravel version would look something like this:</p><pre><code class="language-php" metastring="title=app/Http/Controllers/GlideController.php" title="app/Http/Controllers/GlideController.php">&lt;?php

namespace App\Http\Controllers;

use Illuminate\Contracts\Filesystem\Filesystem;
use Illuminate\Http\Request;
use League\Glide\Filesystem\FileNotFoundException;
use League\Glide\Responses\LaravelResponseFactory;
use League\Glide\ServerFactory;
use League\Glide\Signatures\SignatureException;
use League\Glide\Signatures\SignatureFactory;
use Symfony\Component\HttpFoundation\StreamedResponse;

final class GlideController extends Controller
{
    /**
     * Storage
     *
     * @var Filesystem
     */
    private $filesystem;

    public function __construct(Filesystem $filesystem)
    {
        $this-&gt;filesystem = $filesystem;
    }

    public function __invoke(Request $request, string $path): StreamedResponse
    {
        try {
            SignatureFactory::create((string)env(&#x27;APP_KEY&#x27;))-&gt;validateRequest(&quot;/images/&quot; . $path, $request-&gt;all());
            $server = ServerFactory::create([
                &#x27;response&#x27; =&gt; new LaravelResponseFactory($request),
                &#x27;source&#x27; =&gt; $this-&gt;filesystem-&gt;getDriver(),
                &#x27;cache&#x27; =&gt; $this-&gt;filesystem-&gt;getDriver(),
                &#x27;cache_path_prefix&#x27; =&gt; &#x27;.cache&#x27;,
                &#x27;base_url&#x27; =&gt; &#x27;&#x27;,
                &#x27;max_image_size&#x27; =&gt; 1000 * 1000,
            ]);
            return $server-&gt;getImageResponse(&quot;images/&quot; . $path, $request-&gt;all());
        } catch (SignatureException) {
            abort(403);
        } catch (FileNotFoundException) {
            abort(404);
        }
    }
}
</code></pre><p>Note that I&#x27;m using a <a href="https://laravel.com/docs/8.x/controllers#single-action-controllers">single action controller</a> here. I&#x27;ve found myself gravitating more and more towards these for certain use cases, and <a href="https://driesvints.com/blog/the-beauty-of-single-action-controllers/">I&#x27;m not the only one</a>. For me, the biggest benefit of these is probably more concise naming - if a controller does one thing and one thing only, and the class name adequately describes that, you end up naming it something generic, like <code>call()</code>. By making the controller a single callable, you don&#x27;t have to make that decision since it&#x27;s taken out of your hands (it must be <code>__invoke()</code>). I&#x27;m also a big fan of callable classes in general - they&#x27;re essentially closures on steroids since you can still pass dependencies to the constructor.</p><p>The <code>SignatureFactory</code> line is what handles validating the signature. It&#x27;s based on the app key, and checks that the path and all its parameters are correctly signed. If the signature isn&#x27;t valid, it will throw an exception, thus protecting the endpoint from requests that weren&#x27;t already approved. We also specify a cache location, and a maximum image size to help prevent mass-resize attacks.</p><p>You can then register this controller in the usual way:</p><pre><code class="language-php" metastring="title=routes/web.php" title="routes/web.php">    Route::get(&#x27;/images/{path}&#x27;, GlideController::class)-&gt;where(&#x27;path&#x27;, &#x27;.*&#x27;)-&gt;name(&#x27;glide&#x27;);
</code></pre><p>If the images aren&#x27;t going to be accessible to users who aren&#x27;t logged in, it makes sense to apply whatever authentication middleware you&#x27;re using to this route as well.</p><p>Now, depending on which GraphQL package you&#x27;re using, defining the schema may be different. In this case, I&#x27;m using <a href="https://lighthouse-php.com/">Lighthouse</a> and the schema definition for an Eloquent model with an image would look something like this:</p><pre><code class="language-graphql" metastring="title=graphql/schema.graphql" title="graphql/schema.graphql">enum ImageFormat {
    jpg
    pjpg
    webp
}

type Image {
    id: ID!
    caption: String!
    dynamicImage(
        width: Int @rules(apply: [&quot;numeric&quot;, &quot;max:1000&quot;])
        height: Int @rules(apply: [&quot;numeric&quot;, &quot;max:1000&quot;])
        quality: Int @rules(apply: [&quot;numeric&quot;, &quot;max:100&quot;])
        format: ImageFormat
    ): String @method
}
</code></pre><p>Here we&#x27;re specifying what parameters the <code>dynamicImage()</code> field accepts, as well as applying some of Laravel&#x27;s validation rules to the field to ensure it remains within acceptable ranges. We also use an enum to specify the supported image formats - these are actually limited to the options Glide provdes, but by specifying this as an enum, GraphQL tooling like GraphiQL can provide autocompletion for this parameter for a better developer experience when constructing queries. Note that we also use the <code>@method</code> directive to tell Lighthouse that this field maps to a method, not a property. If the method name differs from the field name, you would also need to specify that method name, eg <code>@method(name: &quot;myMethod&quot;)</code>.</p><p>Now, assuming your image was stored on the filesystem and the appropriate model field was called <code>image_path</code>, the method to retrieve the image URL on the model would look something like this:</p><pre><code class="language-php" metastring="title=app/Models/Item.php" title="app/Models/Item.php">use Illuminate\Support\Facades\URL;
use League\Glide\Urls\UrlBuilderFactory;

// Define model class...

    public function dynamicImage(int $width = null, int $height = null, int $quality = null, string $format = null): ?string
    {
        $builder = UrlBuilderFactory::create(&#x27;/images/&#x27;, (string)env(&#x27;APP_KEY&#x27;));
        return URL::to($builder-&gt;getUrl($this-&gt;image_path, [
            &#x27;w&#x27; =&gt; $width,
            &#x27;h&#x27; =&gt; $height,
            &#x27;q&#x27; =&gt; $quality,
            &#x27;fm&#x27; =&gt; $format,
        ]));
    }
</code></pre><p>Note that the parameters on the model must be specified in the same order as they are defined in the GraphQL schema for them to be lined up correctly, and must have the same names. I&#x27;ve only added the most obviously useful parameters here, namely height, width, quality and format, but if you need them there&#x27;s nothing stopping you from adding further parameters - just don&#x27;t forget to update the GraphQL schema to include them too.</p><p>We can then write GraphQL queries to call <code>dynamicImage()</code> with whatever parameters we wish to pass through, and will get back an appropriate URL in response. For instance, consider this query:</p><pre><code class="language-graphql" metastring="{6}">query {
  items {
    data {
      id
      caption
      dynamicImage(width: 400, height:400, quality: 100, format: webp)
    }
  }
}
</code></pre><p>Here we assume a query has been defined called <code>items</code> which returns all instances of the <code>Item</code> GraphQL type. This would return, for each instance of the <code>Item</code> model, the ID, caption and the URL for an image of 100% quality, 400x400 pixels, in WebP format. Please also note that none of these arguments to <code>dynamicImage()</code> are required - if you leave one out, Glide will use the default value.</p><p>By calling <code>dynamicImage()</code> separately with different aliases, we can even fetch multiple versions of the image. In this example, we fetch it at two different sizes:</p><pre><code class="language-graphql" metastring="{6-7}">query {
  items {
    data {
      id
      caption
      large_image: dynamicImage(width: 400, height:400, quality: 100, format: webp)
      small_image: dynamicImage(width: 200, height:200, quality: 100, format: webp)
    }
  }
}
</code></pre><p>Then, when rendering a component, you could use the <code>&lt;picture&gt;</code> and <code>&lt;source&gt;</code> elements to show different versions based on media queries, as in this example of a simple React component used to render individual instances of <code>Item</code>:</p><pre><code class="language-typescript" metastring="title=resources/js/components/Card.tsx {3-5}" title="resources/js/components/Card.tsx">const Card = (item) =&gt; (
  &lt;picture&gt;
    &lt;source media=&quot;{max-width: 768px}&quot; srcSet={item.small_image} /&gt;
    &lt;source media=&quot;{min-width: 769px}&quot; srcSet={item.large_image} /&gt;
    &lt;img src={item.small_image} alt={item.caption} /&gt;
  &lt;/picture&gt;
)
</code></pre><p>This enables us to serve responsive images that are appropriately sized for the current screen resolution. On mobile devices, which may not always have a connection as fast as a desktop or laptop, it also means we aren&#x27;t wasting bandwidth downloading images which are larger than necessary.</p><p>Along similar lines, you could fetch both WebP and JPEG versions of an image:</p><pre><code class="language-graphql" metastring="{6-7}">query {
  items {
    data {
      id
      caption
      jpeg_image: dynamicImage(width: 400, height: 400, quality: 100, format: jpeg)
      webp_image: dynamicImage(width: 400, height: 400, quality: 100, format: webp)
    }
  }
}
</code></pre><p>Then, we can use the WebP version of the image if the web browser supports it, falling back to JPEG if it doesn&#x27;t, by using the <code>&lt;picture&gt;</code> and <code>&lt;source&gt;</code> elements again in our React component:</p><pre><code class="language-typescript" metastring="title=resources/js/components/Card.tsx {3-4}" title="resources/js/components/Card.tsx">const Card = (item) =&gt; (
  &lt;picture&gt;
    &lt;source type=&quot;image/webp&quot; srcSet={item.webp_image} /&gt;
    &lt;img src={item.jpeg_image} alt={item.caption} /&gt;
  &lt;/picture&gt;
)
</code></pre><p>By doing this we aren&#x27;t forced to work with the lowest common denominator in terms of image formats. We can instead offer WebP to users whose browsers support it, without locking out users on older browsers.</p><p>This technique should be easy enough to apply to other PHP frameworks since Glide is fairly framework agnostic and there are GraphQL implementations for most frameworks. It should also be applicable in other languages - for example, while I&#x27;m not aware of a direct equivalent of Glide in Node.js, you could conceivably use <a href="https://sharp.pixelplumbing.com/">Sharp</a> as the basis of your own custom endpoint to serve up dynamic images based on query parameters, and then serve signed URLs for it via GraphQL.</p><p>Responsive images are something that&#x27;s often overlooked when trying to build a modern web app. An approach like this makes it an awful lot easier to serve appropriately-sized images on demand, without locking front-end devs into specific known dimensions that might not fit their use case.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Moving to Gatsby.js]]></title>
            <link>https://matthewdaly.co.uk/blog/2021/07/28/moving-to-gatsby-js/</link>
            <guid>https://matthewdaly.co.uk/blog/2021/07/28/moving-to-gatsby-js/</guid>
            <pubDate>Wed, 28 Jul 2021 14:36:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>If you&#x27;re visting this site directly, rather than via RSS, you may have noticed that I&#x27;ve updated the whole thing. It&#x27;s now built in Typescript, using Gatsby.js, and with Tailwind for the styling.</p><p>This site has been through several incarnations, going from flat HTML, to Wordpress, to Octopress, before in 2015 I settled on my own custom static site generator, built as a Grunt plugin. This worked fine and produced a performant, simple flat HTML site, but over the last few years I&#x27;d started to have issues with it:</p><ul><li>I haven&#x27;t used Grunt as a build tool for anything else since 2015, and it&#x27;s not as performant as more modern tools</li><li>I also don&#x27;t use Handlebars anymore, and that was the templating system I used for the site. These days React is my go-to and that makes a lot of dynamic functionality simpler</li><li>I also don&#x27;t use Bootstrap anymore, having dropped it for Tailwind, but that would be difficult to integrate with a Grunt-based workflow</li></ul><p>As such, for the last couple of years I&#x27;ve wanted to migrate off it for something more modern. Early on, Gatsby looked like the strongest candidate since it used React, offered a GraphQL-based abstraction layer for easier querying, had a rich ecosystem of plugins for common functionality, and was highly performant, but I made about three attempts to rebuild my site in it which petered out over time. Then, earlier this year I decided to start over and had a lot more success. I did struggle a bit getting a halfway decent design, and for a while pivoted to trying to build it with Next.js instead - this was ultimately abandoned because without the GraphQL abstraction layer, a lot of the querying became a real chore, but I did ultimately decide to port the appearance of that over to the Gatsby site.</p><p>One of the things that made this particular implementation the one that stuck was <a href="https://mdxjs.com/">MDX</a>. If you&#x27;re not familiar with it, it&#x27;s a superset of Markdown that lets you include JSX in your content, allowing for easy addition of reusable UI components within page and blog post content. Also, building it in Typescript was a good call - I&#x27;d been sticking with Flow for several years, but unfortunately it&#x27;s looking like Flow has fallen by the wayside and Typescript has become the only realistic typed solution for Javascript developers, so I felt it was time to adopt that. I&#x27;ve also enjoyed how easy Tailwind was to use (implementing dark mode was really simple), and have been able to implement JSON feeds as well as the standard RSS and Atom ones. Also, for the first time since I dropped Octopress, I now have the ability to add a title and highlight individual lines in code blocks.</p><p>I did have to make a few tough decisions about what to drop as well:</p><ul><li>These days I have a few issues with how AMP works, and the site is responsive and works well on mobile, so I decided to drop AMP entirely. The old AMP versions of pages redirect to their standard versions now.</li><li>Due to issues with creating dynamic RSS feeds in Gatsby.js, I decided not to port over the per-category RSS feeds.</li></ul><p>I have to admit, I&#x27;ve been neglecting posting on this site for a while, largely because I was working on this - it&#x27;s now nearly the end of July and this is my first post of the year - but now that I&#x27;ve got this done, I&#x27;m hoping I will be able to post more. One of my biggest motivations to do this has been that I&#x27;m particularly interested in doing more posts about React.js, and adopting MDX not only means that I can embed components in my posts, but I&#x27;ve also been able to integrate <code>react-live</code> into the site so I can embed editable examples in here too, which is potentially very powerful when demonstrating a concept.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Lightweight Laravel - deconstructing a full stack framework]]></title>
            <link>https://matthewdaly.co.uk/blog/2020/12/30/lightweight-laravel-deconstructing-a-full-stack-framework/</link>
            <guid>https://matthewdaly.co.uk/blog/2020/12/30/lightweight-laravel-deconstructing-a-full-stack-framework/</guid>
            <pubDate>Wed, 30 Dec 2020 17:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>Back when I used to work with Django, I read the book <a href="https://www.oreilly.com/library/view/lightweight-django/9781491946275/">Lightweight Django</a>, and it completely changed the way I thought about building web applications. For years I&#x27;d heard the same lines parroted about how Django was too large and bloated, and something like Flask was a better bet for many applications, and this book completely blew this misconception away. By demonstrating how it was possible to break the framework apart, use just what you need, and leave out what you don&#x27;t, it showed how I could benefit from my familiarity with Django, while making it more suitable for smaller applications.</p><p>Laravel, like Django, is a full stack framework, and is often subject to similar misconceptions about bloat. But just because the framework ships with all this stuff, doesn&#x27;t mean you&#x27;re obliged to use it all. If you know you aren&#x27;t going to need all of a framework&#x27;s functionality, there&#x27;s nothing stopping you getting rid of what you don&#x27;t need, or even replacing it with something else. In this article, I&#x27;ll show you how to apply the same methodology to a Laravel application to remove what you don&#x27;t need. As part of this, we&#x27;ll be building a simple placeholder image service. This was used in Lightweight Django as it&#x27;s a good example of an application that is completely stateless, and doesn&#x27;t need sessions or a database, so it&#x27;s often seen as a bad fit for a full stack framework. Since the same applies here, it&#x27;s a good example for us too.</p><h2>Getting started</h2><p>Run the following command in the shell to create a new Laravel application:</p><pre><code class="language-bash">$ composer create-project --prefer-dist laravel/laravel lightweight-laravel
</code></pre><p>What this actually does is as follows:</p><ul><li>Resolve the latest release of the package <code>laravel/laravel</code> that will work on your system</li><li>Copy it from the <a href="https://github.com/laravel/laravel">repository</a> to the specified location</li><li>Carry out any post-install scripts specified, such as creating the <code>.env</code> file and generating a key</li></ul><p>However, that&#x27;s just a standardised boilerplate for Laravel applications. Most of the functionality of the framework is in the package <code>laravel/framework</code>, which is included as a dependency in your <code>composer.json</code>. This makes sense, because by keeping as much of the actual framework out of the starter boilerplate and in a separate repository, it minimises the work required to update the application to a new version. It also means you can strip that boilerplate down to remove references to things you don&#x27;t need, and even create your own custom boilerplates to save you work in future.</p><h2>Stripping down the boilerplate</h2><p>Let&#x27;s start stripping out the things we don&#x27;t need. Since our application is stateless, we have no need whatsoever of a database, so we can delete the <code>app/Models</code> and <code>database</code> folders. We&#x27;ll want to support Redis for the cache, so we can&#x27;t delete the file <code>config/database.php</code>, but we can remove any references to the database other than Redis from that file. We can delete some other files from the <code>config/</code> folder, namely <code>auth.php</code>, <code>broadcasting.php</code>, <code>filesystems.php</code>, <code>mail.php</code>, <code>queue.php</code>, <code>services.php</code> and <code>session.php</code>.</p><p>We also don&#x27;t need a lot of the middleware that ships with Laravel. If you go into the file <code>app/Http/Kernel.php</code> you&#x27;ll see that it assigns some middleware as global, some to the <code>web</code> and <code>api</code> groups, and some as optional route middleware. In this file:</p><ul><li>We don&#x27;t need to make any POST requests to this application, so we can lose the <code>ValidatePostSize</code> middleware from the global middleware entirely</li><li>The <code>web</code> group relates to cookies, sessions, CSRF, authentication and handling routing with substitute bindings. Since we don&#x27;t need any of that we can empty this group entirely</li><li>The <code>auth</code>, <code>auth.basic</code>, <code>can</code>, <code>guest</code>, <code>password.confirm</code>, and <code>verified</code> route middleware is also surplus to requirements and can go</li></ul><p>As this change is a bit fiddly, here&#x27;s a patch, which may be easier to read:</p><pre><code class="language-diff">From 6bc87e9602e839d5635963b6d740279b2dbcf16b Mon Sep 17 00:00:00 2001
From: Matthew Daly &lt;Matthew Daly 450801+matthewbdaly@users.noreply.github.com&gt;
Date: Wed, 30 Dec 2020 11:54:56 +0000
Subject: [PATCH] Removed unwanted middleware

---
 app/Http/Kernel.php | 14 --------------
 1 file changed, 14 deletions(-)

diff --git a/app/Http/Kernel.php b/app/Http/Kernel.php
index 30020a5..10e150d 100644
--- a/app/Http/Kernel.php
+++ b/app/Http/Kernel.php
@@ -18,7 +18,6 @@ class Kernel extends HttpKernel
         \App\Http\Middleware\TrustProxies::class,
         \Fruitcake\Cors\HandleCors::class,
         \App\Http\Middleware\PreventRequestsDuringMaintenance::class,
-        \Illuminate\Foundation\Http\Middleware\ValidatePostSize::class,
         \App\Http\Middleware\TrimStrings::class,
         \Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull::class,
     ];
@@ -30,13 +29,6 @@ class Kernel extends HttpKernel
      */
     protected $middlewareGroups = [
         &#x27;web&#x27; =&gt; [
-            \App\Http\Middleware\EncryptCookies::class,
-            \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,
-            \Illuminate\Session\Middleware\StartSession::class,
-            // \Illuminate\Session\Middleware\AuthenticateSession::class,
-            \Illuminate\View\Middleware\ShareErrorsFromSession::class,
-            \App\Http\Middleware\VerifyCsrfToken::class,
-            \Illuminate\Routing\Middleware\SubstituteBindings::class,
         ],

         &#x27;api&#x27; =&gt; [
@@ -53,14 +45,8 @@ class Kernel extends HttpKernel
      * @var array
      */
     protected $routeMiddleware = [
-        &#x27;auth&#x27; =&gt; \App\Http\Middleware\Authenticate::class,
-        &#x27;auth.basic&#x27; =&gt; \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,
         &#x27;cache.headers&#x27; =&gt; \Illuminate\Http\Middleware\SetCacheHeaders::class,
-        &#x27;can&#x27; =&gt; \Illuminate\Auth\Middleware\Authorize::class,
-        &#x27;guest&#x27; =&gt; \App\Http\Middleware\RedirectIfAuthenticated::class,
-        &#x27;password.confirm&#x27; =&gt; \Illuminate\Auth\Middleware\RequirePassword::class,
         &#x27;signed&#x27; =&gt; \Illuminate\Routing\Middleware\ValidateSignature::class,
         &#x27;throttle&#x27; =&gt; \Illuminate\Routing\Middleware\ThrottleRequests::class,
-        &#x27;verified&#x27; =&gt; \Illuminate\Auth\Middleware\EnsureEmailIsVerified::class,
     ];
 }
--
2.28.0

</code></pre><p>These changes also mean a lot of the service providers and facades are now redundant and can be removed from the application. If you go into <code>config/app.php</code> you can remove <code>AuthServiceProvider</code>, <code>BroadcastServiceProvider</code>, <code>CookieServiceProvider</code>, <code>MailServiceProvider</code>, <code>NotificationServiceProvider</code>, <code>PaginationServiceProvider</code>, <code>PasswordResetServiceProvider</code>, <code>SessionServiceProvider</code> and <code>TranslationServiceProvider</code> from the providers section, as well as the commented-out local <code>BroadcastServiceProvider</code>. You can also delete the facades for <code>Auth</code>, <code>Cookie</code>, <code>DB</code>, <code>Eloquent</code>, <code>Gate</code>, <code>Lang</code>, <code>Mail</code>, <code>Notification</code>, <code>Password</code>, <code>Queue</code>, <code>Schema</code>, <code>Session</code>, and <code>Storage</code>.</p><p>Again, here&#x27;s a patch of the required changes:</p><pre><code class="language-diff">From 66be3b836706ef488b890cdae6e97d4fc6195dd6 Mon Sep 17 00:00:00 2001
From: Matthew Daly &lt;Matthew Daly 450801+matthewbdaly@users.noreply.github.com&gt;
Date: Wed, 30 Dec 2020 12:10:25 +0000
Subject: [PATCH] Removed unused service providers and facades

---
 config/app.php | 26 --------------------------
 1 file changed, 26 deletions(-)

diff --git a/config/app.php b/config/app.php
index 2a2f0eb..b7a38c8 100644
--- a/config/app.php
+++ b/config/app.php
@@ -139,26 +139,17 @@ return [
         /*
          * Laravel Framework Service Providers...
          */
-        Illuminate\Auth\AuthServiceProvider::class,
-        Illuminate\Broadcasting\BroadcastServiceProvider::class,
         Illuminate\Bus\BusServiceProvider::class,
         Illuminate\Cache\CacheServiceProvider::class,
         Illuminate\Foundation\Providers\ConsoleSupportServiceProvider::class,
-        Illuminate\Cookie\CookieServiceProvider::class,
         Illuminate\Database\DatabaseServiceProvider::class,
         Illuminate\Encryption\EncryptionServiceProvider::class,
         Illuminate\Filesystem\FilesystemServiceProvider::class,
         Illuminate\Foundation\Providers\FoundationServiceProvider::class,
         Illuminate\Hashing\HashServiceProvider::class,
-        Illuminate\Mail\MailServiceProvider::class,
-        Illuminate\Notifications\NotificationServiceProvider::class,
-        Illuminate\Pagination\PaginationServiceProvider::class,
         Illuminate\Pipeline\PipelineServiceProvider::class,
         Illuminate\Queue\QueueServiceProvider::class,
         Illuminate\Redis\RedisServiceProvider::class,
-        Illuminate\Auth\Passwords\PasswordResetServiceProvider::class,
-        Illuminate\Session\SessionServiceProvider::class,
-        Illuminate\Translation\TranslationServiceProvider::class,
         Illuminate\Validation\ValidationServiceProvider::class,
         Illuminate\View\ViewServiceProvider::class,

@@ -170,9 +161,6 @@ return [
          * Application Service Providers...
          */
         App\Providers\AppServiceProvider::class,
-        App\Providers\AuthServiceProvider::class,
-        // App\Providers\BroadcastServiceProvider::class,
-        App\Providers\EventServiceProvider::class,
         App\Providers\RouteServiceProvider::class,

     ],
@@ -193,35 +181,21 @@ return [
         &#x27;App&#x27; =&gt; Illuminate\Support\Facades\App::class,
         &#x27;Arr&#x27; =&gt; Illuminate\Support\Arr::class,
         &#x27;Artisan&#x27; =&gt; Illuminate\Support\Facades\Artisan::class,
-        &#x27;Auth&#x27; =&gt; Illuminate\Support\Facades\Auth::class,
         &#x27;Blade&#x27; =&gt; Illuminate\Support\Facades\Blade::class,
         &#x27;Broadcast&#x27; =&gt; Illuminate\Support\Facades\Broadcast::class,
         &#x27;Bus&#x27; =&gt; Illuminate\Support\Facades\Bus::class,
         &#x27;Cache&#x27; =&gt; Illuminate\Support\Facades\Cache::class,
         &#x27;Config&#x27; =&gt; Illuminate\Support\Facades\Config::class,
-        &#x27;Cookie&#x27; =&gt; Illuminate\Support\Facades\Cookie::class,
         &#x27;Crypt&#x27; =&gt; Illuminate\Support\Facades\Crypt::class,
-        &#x27;DB&#x27; =&gt; Illuminate\Support\Facades\DB::class,
-        &#x27;Eloquent&#x27; =&gt; Illuminate\Database\Eloquent\Model::class,
-        &#x27;Event&#x27; =&gt; Illuminate\Support\Facades\Event::class,
         &#x27;File&#x27; =&gt; Illuminate\Support\Facades\File::class,
-        &#x27;Gate&#x27; =&gt; Illuminate\Support\Facades\Gate::class,
         &#x27;Hash&#x27; =&gt; Illuminate\Support\Facades\Hash::class,
         &#x27;Http&#x27; =&gt; Illuminate\Support\Facades\Http::class,
-        &#x27;Lang&#x27; =&gt; Illuminate\Support\Facades\Lang::class,
         &#x27;Log&#x27; =&gt; Illuminate\Support\Facades\Log::class,
-        &#x27;Mail&#x27; =&gt; Illuminate\Support\Facades\Mail::class,
-        &#x27;Notification&#x27; =&gt; Illuminate\Support\Facades\Notification::class,
-        &#x27;Password&#x27; =&gt; Illuminate\Support\Facades\Password::class,
-        &#x27;Queue&#x27; =&gt; Illuminate\Support\Facades\Queue::class,
         &#x27;Redirect&#x27; =&gt; Illuminate\Support\Facades\Redirect::class,
         // &#x27;Redis&#x27; =&gt; Illuminate\Support\Facades\Redis::class,
         &#x27;Request&#x27; =&gt; Illuminate\Support\Facades\Request::class,
         &#x27;Response&#x27; =&gt; Illuminate\Support\Facades\Response::class,
         &#x27;Route&#x27; =&gt; Illuminate\Support\Facades\Route::class,
-        &#x27;Schema&#x27; =&gt; Illuminate\Support\Facades\Schema::class,
-        &#x27;Session&#x27; =&gt; Illuminate\Support\Facades\Session::class,
-        &#x27;Storage&#x27; =&gt; Illuminate\Support\Facades\Storage::class,
         &#x27;Str&#x27; =&gt; Illuminate\Support\Str::class,
         &#x27;URL&#x27; =&gt; Illuminate\Support\Facades\URL::class,
         &#x27;Validator&#x27; =&gt; Illuminate\Support\Facades\Validator::class,
--
2.28.0

</code></pre><p>There are a few service providers that ideally we&#x27;d strip out but are tightly integrated into the framework. For instance, the database and queue service providers are both used by some Artisan commands, and it&#x27;s not very practical to disable only those commands, so removing them will stop Artisan from working. If you don&#x27;t mind running the development server manually, you can go ahead and remove these.</p><h2>Building the application</h2><p>Now, let&#x27;s set out how our application will work. We will have two routes:</p><ul><li>A route that accepts width and height parameters in the route itself, and responds with a PNG response sized accordingly</li><li>A route that returns a simple HTML homepage</li></ul><p>You&#x27;ve no doubt seen various novelty placeholder sites like <a href="http://placekitten.com/">placekitten.com</a> for use in web projects, and this will be similar to that. We&#x27;ll use a simple black image with the dimensions in white text, but you should be able to use this as the basis of a more sophisticated placeholder service, such as if you wanted to use branded images for a particular client.</p><p>Since the home page will be fairly straightforward, let&#x27;s do that first. Delete the existing <code>resources/views/welcome.blade.php</code> file and save this to <code>resources/views/home.blade.php</code>:</p><pre><code class="language-html" metastring="title=resources/views/home.blade.php" title="resources/views/home.blade.php">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;title&gt;Laravel Placeholder Images&lt;/title&gt;
    &lt;link href=&quot;{{ mix(&#x27;css/app.css&#x27;) }}&quot; rel=&quot;stylesheet&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;Laravel Placeholder Images&lt;/h1&gt;
    &lt;p&gt;This server can be used for serving placeholder
    images for any web page.&lt;/p&gt;
    &lt;p&gt;To request a placeholder image of a given width and height
    simply include an image with the source pointing to
    &lt;b&gt;/image/&amp;lt;width&amp;gt;x&amp;lt;height&amp;gt;/&lt;/b&gt;
    on this server such as:&lt;/p&gt;
    &lt;pre&gt;
        &amp;lt;img src=&quot;{{ $example }}&quot; &amp;gt;
    &lt;/pre&gt;
    &lt;h2&gt;Examples&lt;/h2&gt;
    &lt;ul&gt;
        &lt;li&gt;&lt;img src=&quot;{{{ route(&#x27;placeholder&#x27;, [&#x27;width&#x27; =&gt; 50, &#x27;height&#x27; =&gt; 50]) }}}&quot;&gt;&lt;/li&gt;
        &lt;li&gt;&lt;img src=&quot;{{{ route(&#x27;placeholder&#x27;, [&#x27;width&#x27; =&gt; 100, &#x27;height&#x27; =&gt; 50]) }}}&quot;&gt;&lt;/li&gt;
        &lt;li&gt;&lt;img src=&quot;{{{ route(&#x27;placeholder&#x27;, [&#x27;width&#x27; =&gt; 50, &#x27;height&#x27; =&gt; 100]) }}}&quot;&gt;&lt;/li&gt;
    &lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><p>Note we&#x27;re using the <code>route()</code> helper to add some example images, even though it&#x27;s not in place yet. Add this route to your <code>routes/web.php</code> as well:</p><pre><code class="language-php" metastring="title=routes/web.php" title="routes/web.php">Route::get(&#x27;/&#x27;, function () {
    return view(&#x27;home&#x27;, [
        &#x27;example&#x27; =&gt; route(&#x27;placeholder&#x27;, [&#x27;width&#x27; =&gt; 50, &#x27;height&#x27; =&gt; 50]),
    ]);
});
</code></pre><p>Again, note that we&#x27;re using the <code>route()</code> helper to get the URL for the placeholder image. Next, we need to create the outline of the route for getting the placeholders:</p><pre><code class="language-php" metastring="title=routes/web.php" title="routes/web.php">Route::get(&#x27;/placeholder/{width}x{height}&#x27;, function (int $width, int $height) {
})-&gt;where([&#x27;width&#x27; =&gt; &#x27;[0-9]+&#x27;, &#x27;height&#x27; =&gt; &#x27;[0-9]+&#x27;])
    -&gt;name(&#x27;placeholder&#x27;);
</code></pre><p>Due to the limited scope of this application, we won&#x27;t bother with full controllers, but you can add them if you wish. Note we&#x27;ve specified the name <code>placeholder</code> and set a regex to validate the <code>width</code> and <code>height</code> parameters.</p><p>Now let&#x27;s populate the callback to generate a PNG file.</p><pre><code class="language-php" metastring="title=routes/web.php {2-13}" title="routes/web.php">Route::get(&#x27;/placeholder/{width}x{height}&#x27;, function (int $width, int $height) {
    if (!$img = imagecreatetruecolor($width, $height)) {
        abort();
    }
    $textColour = imagecolorallocate($img, 255, 255, 255);
    imagestring($img, 1, 5, 5, &quot;$width X $height&quot;, $textColour);
    ob_start();
    imagepng($img);
    $file = ob_get_contents();
    ob_end_clean();
    return response()-&gt;make($file, 200, [
        &#x27;Content-type&#x27; =&gt; &#x27;image/png&#x27;
    ]);
})-&gt;where([&#x27;width&#x27; =&gt; &#x27;[0-9]+&#x27;, &#x27;height&#x27; =&gt; &#x27;[0-9]+&#x27;])
    -&gt;name(&#x27;placeholder&#x27;);
</code></pre><p>We&#x27;ll also add some very basic CSS to the provided CSS file:</p><pre><code class="language-css" metastring="title=resources/css/app.css" title="resources/css/app.css">body {
    text-align: center;
}

ul {
    list-type: none;
}

li {
    display: inline-block;
}
</code></pre><p>Don&#x27;t forget to build this with <code>npm install &amp;&amp; npm run production</code> too.</p><p>If you now run <code>php artisan serve</code> you should be able to see that it works - the homepage renders, and the embedded images are pulled in OK. However, there are three potential issues:</p><ul><li>The images themselves are regenerated each time. Since they never change, it&#x27;s a no-brainer to cache them indefinitely for the best performance, and if we do need to change them in the future we can just flush the cache to resolve this</li><li>Similarly, we should use ETags to allow the application to tell the browser when the image has changed</li><li>There&#x27;s no limit on how large images can be, so a malicious user could request a huge image to break the system</li></ul><p>Let&#x27;s tackle these in order. First, let&#x27;s create some middleware to handle the caching:</p><pre><code class="language-php" metastring="title=app/Http/Middleware/CacheImages.php" title="app/Http/Middleware/CacheImages.php">&lt;?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Cache;

final class CacheImages
{
    /**
     * Handle an incoming request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Closure  $next
     * @return mixed
     */
    public function handle(Request $request, Closure $next)
    {
        $key = sprintf(&quot;%d.%d&quot;, $request-&gt;width, $request-&gt;height);
        return Cache::rememberForever($key, function () use ($next, $request) {
            return $next($request);
        });
    }
}
</code></pre><p>We construct a cache key from the request width and height, and use the <code>Cache::rememberForever()</code> method to cache the response. We then register this middleware as route middleware in <code>app/Http/Kernel.php</code>:</p><pre><code class="language-php" metastring="title=app/Http/Kernel.php {5}" title="app/Http/Kernel.php">    protected $routeMiddleware = [
        &#x27;cache.headers&#x27; =&gt; \Illuminate\Http\Middleware\SetCacheHeaders::class,
        &#x27;signed&#x27; =&gt; \Illuminate\Routing\Middleware\ValidateSignature::class,
        &#x27;throttle&#x27; =&gt; \Illuminate\Routing\Middleware\ThrottleRequests::class,
        &#x27;cache.images&#x27; =&gt; \App\Http\Middleware\CacheImages::class,
    ];
</code></pre><p>And apply it to the image route:</p><pre><code class="language-php" metastring="title=routes/web.php {16}" title="routes/web.php">Route::get(&#x27;/placeholder/{width}x{height}&#x27;, function (int $width, int $height) {
    if (!$img = imagecreatetruecolor($width, $height)) {
        abort();
    }
    $textColour = imagecolorallocate($img, 255, 255, 255);
    imagestring($img, 1, 5, 5, &quot;$width X $height&quot;, $textColour);
    ob_start();
    imagepng($img);
    $file = ob_get_contents();
    ob_end_clean();
    return response()-&gt;make($file, 200, [
        &#x27;Content-type&#x27; =&gt; &#x27;image/png&#x27;
    ]);
})-&gt;where([&#x27;width&#x27; =&gt; &#x27;[0-9]+&#x27;, &#x27;height&#x27; =&gt; &#x27;[0-9]+&#x27;])
  -&gt;name(&#x27;placeholder&#x27;)
  -&gt;middleware(&#x27;cache.images&#x27;);
</code></pre><p>Next, let&#x27;s set ETags on our images. Laravel comes with the <code>cache.headers</code> middleware, which we can easily wrap around our placeholder route:</p><pre><code class="language-php" metastring="title=routes/web.php {1,18}" title="routes/web.php">Route::middleware(&#x27;cache.headers:public;etag&#x27;)-&gt;group(function () {
    Route::get(&#x27;/placeholder/{width}x{height}&#x27;, function (int $width, int $height) {
        if (!$img = imagecreatetruecolor($width, $height)) {
            abort();
        }
        $textColour = imagecolorallocate($img, 255, 255, 255);
        imagestring($img, 1, 5, 5, &quot;$width X $height&quot;, $textColour);
        ob_start();
        imagepng($img);
        $file = ob_get_contents();
        ob_end_clean();
        return response()-&gt;make($file, 200, [
            &#x27;Content-type&#x27; =&gt; &#x27;image/png&#x27;
        ]);
    })-&gt;where([&#x27;width&#x27; =&gt; &#x27;[0-9]+&#x27;, &#x27;height&#x27; =&gt; &#x27;[0-9]+&#x27;])
      -&gt;name(&#x27;placeholder&#x27;)
      -&gt;middleware(&#x27;cache.images&#x27;);
});
</code></pre><p>Finally, let&#x27;s handle the dimensions issue. Again, this is something that is probably best handled in middleware since that way it can be rejected before the point it gets to the route handler. All we need to do is to check to see if the width and height parameters exceed the intended value, and throw an error in the middleware:</p><pre><code class="language-php" metastring="title=app/Http/Middleware/ValidateImageDimensions.php" title="app/Http/Middleware/ValidateImageDimensions.php">&lt;?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Illuminate\Validation\ValidationException;

final class ValidateImageDimensions
{
    /**
     * Handle an incoming request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Closure  $next
     * @return mixed
     */
    public function handle(Request $request, Closure $next)
    {
        if ($request-&gt;width &gt; 2000 || $request-&gt;height &gt; 2000) {
            abort(422, &#x27;Height and width cannot exceed 2000 pixels&#x27;);
        }
        return $next($request);
    }
}
</code></pre><p>Register this middleware in <code>app/Http/Kernel.php</code>:</p><pre><code class="language-php" metastring="title=app/Http/Kernel.php {5}" title="app/Http/Kernel.php">    protected $routeMiddleware = [
        &#x27;cache.headers&#x27; =&gt; \Illuminate\Http\Middleware\SetCacheHeaders::class,
        &#x27;signed&#x27; =&gt; \Illuminate\Routing\Middleware\ValidateSignature::class,
        &#x27;throttle&#x27; =&gt; \Illuminate\Routing\Middleware\ThrottleRequests::class,
        &#x27;cache.images&#x27; =&gt; \App\Http\Middleware\CacheImages::class,
        &#x27;validate.images&#x27; =&gt; \App\Http\Middleware\ValidateImageDimensions::class,
    ];
</code></pre><p>And apply it to the image route:</p><pre><code class="language-php" metastring="title=routes/web.php {17}" title="routes/web.php">Route::middleware(&#x27;cache.headers:public;etag&#x27;)-&gt;group(function () {
    Route::get(&#x27;/placeholder/{width}x{height}&#x27;, function (int $width, int $height) {
        if (!$img = imagecreatetruecolor($width, $height)) {
            abort();
        }
        $textColour = imagecolorallocate($img, 255, 255, 255);
        imagestring($img, 1, 5, 5, &quot;$width X $height&quot;, $textColour);
        ob_start();
        imagepng($img);
        $file = ob_get_contents();
        ob_end_clean();
        return response()-&gt;make($file, 200, [
            &#x27;Content-type&#x27; =&gt; &#x27;image/png&#x27;
        ]);
    })-&gt;where([&#x27;width&#x27; =&gt; &#x27;[0-9]+&#x27;, &#x27;height&#x27; =&gt; &#x27;[0-9]+&#x27;])
      -&gt;name(&#x27;placeholder&#x27;)
      -&gt;middleware([&#x27;validate.images&#x27;, &#x27;cache.images&#x27;]);
});
</code></pre><p>And we&#x27;re done! We now have a basic, but functional, stateless Laravel application that&#x27;s been stripped of a lot of the unnecessary functionality. There are a few further changes that could be made to expand this if necessary, such as:</p><ul><li>Amend the project to allow requesting different image formats using an additional route parameter (hint - you&#x27;ll want to use something like <a href="http://image.intervention.io/">Intervention for this</a>)</li><li>Serve different images, either by using one as a starting template so they are all branded the same, or specifying one from several options in the URL, such as with <a href="https://www.placecage.com/">PlaceCage</a></li></ul><p>However, I will leave these as an exercise for the reader. The code for this project is available on <a href="https://github.com/matthewbdaly/lightweight-laravel">Github</a> if you get stuck at any point.</p><p>Hopefully, this article has given you some food for thought about how you can use Laravel for applications you might have previously considered too small to use it for. Don&#x27;t worry too much about removing something that you need to add later - version control means you can always retrieve it if it turns out you do need it later. I&#x27;d also add that potentially the same approach can be applied to other full stack PHP frameworks, though you&#x27;ll have to do some exploring on your own to determine this.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[What I want in a PHP CMS]]></title>
            <link>https://matthewdaly.co.uk/blog/2020/09/28/what-i-want-in-a-php-cms/</link>
            <guid>https://matthewdaly.co.uk/blog/2020/09/28/what-i-want-in-a-php-cms/</guid>
            <pubDate>Mon, 28 Sep 2020 14:50:48 GMT</pubDate>
            <content:encoded><![CDATA[<p>I maintain a custom PHP legacy CMS for a client, and have also been building a micro-CMS as a learning project, so I&#x27;ve spent quite a lot of time in the last few years thinking about how content should be managed, and how applications to manage it should work.</p><p>I&#x27;ve also at least tinkered with a few different content management systems down the years, and I&#x27;ve found it depressing how many times Wordpress has been the default choice, despite it being probably the worst CMS I&#x27;ve ever had the gross misfortune to use. The argument that &quot;it&#x27;s easy to install and use&quot; doesn&#x27;t really hold water given that in my experience most users setting up a new Wordpress site don&#x27;t go through the five-minute install, but use their shared hosting provider&#x27;s setup wizard, which typically also supports several other content management systems. Also, it just does not make sense to optimise a short five minute install that will never be repeated for that site over the rest of the workflow for maintaining the site, possibly for years - I&#x27;d rather have something that takes a bit more time to do the initial set up, but is easier to maintain.</p><p>So, what do I want in a PHP CMS? Here&#x27;s my thoughts on my ideal CMS solution.</p><h2>Managed entirely with Composer</h2><p>Creating a new site using a CMS should be as simple as running something like the following command:</p><pre><code class="language-bash">$ composer create-project --prefer-dist my/cms newsite
</code></pre><p>And updating it should be as simple as running the following:</p><pre><code class="language-bash">$ composer update
</code></pre><p>Installing a plugin should be a case of running this:</p><pre><code class="language-bash">$ composer require my/plugin-foo
</code></pre><p>It should then be possible to activate the plugin simply by listing it in a config file.</p><p>As far as possible, <em>all</em> of the functionality of the CMS should be contained in a single &quot;core&quot; package, and plugins should be their own Composer packages that can be installed, and then switched on and off in a simple config file. The initial creation step should be a case of checking out a boilerplate that contains only the absolute minimum - a front controller, a starting configuration, front end tooling, and some views - and gets the rest of the functionality from the core package.</p><h2>Allow creating custom site boilerplates</h2><p>It should be possible to create and publish alternative boilerplates.</p><p>For instance, if a CMS provides a default starting boilerplate that ships with Bootstrap, VueJS and Laravel Mix, I should be able to fork it, replace Bootstrap with Tailwind and Vue with React, and then use my version for future projects without having to spend a lot of time maintaining the fork.</p><p>Similarly, if there are certain plugins I use all the time, it should be possible to include those plugins as dependencies in my <code>composer.json</code> so that when I create a new project from my boilerplate, they&#x27;re present right from the start and I don&#x27;t have to faff around downloading and configuring them manually.</p><h2>Plugin API should work like a framework</h2><p>The best practices we&#x27;ve all spent years learning shouldn&#x27;t go out the window when working with a CMS. A good CMS should feel familiar if you&#x27;ve got some experience working in MVC frameworks, and it should embrace PSR standards. Adding a route should largely be a matter of writing a controller, mapping it to a route, and adding a view file, just as it would be in a framework</p><p>There&#x27;s always going to be some things that need to be CMS-specific, because registering things like routes is more complex in a general purpose CMS than a custom web app as they can be defined in multiple arbitrary places. These can be handled by triggering events at various points in the CMS application&#x27;s lifecycle, so that plugin authors can set up listeners to do things such as register routes, add new view helpers and so on.</p><h2>Focused exclusively on content, not presentation</h2><p>I&#x27;m increasingly convinced that the ability to amend presentation in a CMS is a misfeature. The purpose of a CMS is to manage content, not presentation, and making it able to amend presentation potentially gives unskilled site owners enough rope to hang themselves with, while making it actively harder for us devs.</p><p>I&#x27;ve certainly seen enough sites that a client has completely messed up after being given access to change the presentation in Wordpress, and because it&#x27;s stored in the database it&#x27;s not possible to roll back the changes easily the way it would be if the styling was stored in version control. And it&#x27;s definitely quicker for an experienced front end developer to edit a CSS file than to use Wordpress&#x27;s own tools for amending styling.</p><h2>Use a proper templating system</h2><p>As a templating language, PHP <em>sucks</em>:</p><ul><li>It&#x27;s too easy to overlook escaping variables properly</li><li>Handling partials is difficult</li><li>There&#x27;s always the temptation to put in more logic than is advisable in the view layer, especially when deadlines are tight</li></ul><p>Using a dedicated templating language, rather than a full programming language, in the view layer, means that entire classes of issues can be completely eradicated from the layer of the application that the developers who work with the CMS have the most dealings with. Developers are forced to move more complex logic into dedicated helpers, and can&#x27;t just leave it in the template &quot;until we have time to clear it up&quot;, which is often never.</p><p>Twig is solid, reliable, fast, easy to extend, and similar enough to other templating languages such as Handlebars and Django&#x27;s templates that if you&#x27;ve used any of those you can adapt easily, and it should probably be your first choice. Blade is also a solid choice, and if you want something whose syntax is not dissimilar to PHP you should probably consider Plates.</p><h2>Configuration with version control in mind</h2><p>Wordpress does this particularly badly because it actively encourages storing sensitive data, such as database credentials, in a PHP file (which is then kept in the web root...). A good, solid way to store configuration details in PHP is to store generic details (for instance, a list of the active plugins, which will be the same for production and the local copy developers run) for that project in either a YAML or PHP file, and store install-specific details in either a <code>.env</code> file, or as environment variables.</p><h2>Custom content types</h2><p>It should be easy to create a new content type, and define specific fields for that content type. For instance, if I&#x27;m building a recipe site, I should be able to define a Recipe type that has the following attributes:</p><ul><li>Ingredients</li><li>Cover image</li><li>Title</li><li>Method</li></ul><p>Then all Recipe instances should have those attributes, and it shouldn&#x27;t be necessary to bastardise a different content type to make it work properly. It should also be possible to lock down the ability to create custom content types so it&#x27;s either limited to admins, or they&#x27;re defined in code, so end users can&#x27;t create arbitrary content types.</p><h2>Custom taxonomies</h2><p>It should be possible to define your own custom taxonomies for content. Continuing the Recipe example above, we should be able to define three sorts of taxonomy:</p><ul><li>Dietary requirements (eg vegetarian, vegan, gluten-free etc)</li><li>Meal (eg breakfast, lunch, dinner, snacks)</li><li>Region (eg Indian, Chinese, Italian)</li></ul><p>A taxonomy should be appropriately named, and again it shouldn&#x27;t be necessary to abuse generic categories and tags to categorise content. As with the content types, it should also be possible to lock them down.</p><h2>A better solution than rich text for managing content</h2><p>Rich text is not a great solution for more complex page layouts, and tends to be abused horribly to do all sorts of things. There&#x27;s a tendency to dump things like snippets for Google Maps, tables, galleries, Javascript widgets and many more into rich text. This means that it also loses the semantic value of the content - rather than being a paragraph, then a map of the local area, then a photo carousel, then another paragraph, it&#x27;s just a single blob of text. This can&#x27;t be easily migrated to another solution if, say, you decide to swap Google Maps for Open Streetmap, and change one carousel for another, without going through and manually replacing every map and carousel, which is a chore.</p><p>Wagtail isn&#x27;t a PHP CMS, but <a href="https://torchbox.com/blog/rich-text-fields-and-faster-horses/">it has an interesting approach to rich text handling</a> for complex content, inspired by <a href="https://madebymany.github.io/sir-trevor-js/">Sir Trevor</a>, based around blocks of different types. The Gutenberg editor in Wordpress 5.0 and up isn&#x27;t a million miles away from this, either. For simpler sites, it&#x27;s probably better to limit users to a Markdown editor and add helpers for adding more complex functionality directly in the template, such as a gallery helper.</p><h2>A decent command-line runner</h2><p>There are always going to be certain tasks that are best done from the command line. A decent CMS should have a command line tool that:</p><ul><li>Allows appropriate admin tasks, such as going into maintenance mode and flushing caches, to be done from the command line</li><li>Can be easily extended by plugin authors to add their own commands</li><li>Assists developers when working locally, such as by generating boilerplate when necessary (so, for instance, you can run a command to generate the skeleton for a new plugin)</li></ul><p>There&#x27;s no excuse not to do this when building a CMS. Symfony&#x27;s console component is solid, easy to work with, and a good base for whatever commands you need to write.</p><h2>Headless as an option</h2><p>The rise of headless CMS&#x27;s, both as a service and as software packages, hasn&#x27;t surprised me. Nowadays it&#x27;s quite common to have to publish the same content to multiple channels, which might be one or more websites, as well as mobile apps, and it makes sense to be able to centralise that content in one place rather than have to copy it in some fashion.</p><p>It&#x27;s therefore very useful to have an API that can retrieve that content for republishing. The same API can also be used with Javascript libraries like React and Vue to build sophisticated frontends that consume that data.</p><h2>Which solutions do this best?</h2><p>You&#x27;ll probably have got the idea at this point that Wordpress isn&#x27;t my first choice. It was created in a different era, and hasn&#x27;t kept up well compared to many of its contemporaries, and there are many technical issues with it that are at this point effectively impossible to ever fix. For instance, you could potentially store the post meta in the same table as the rest of the post data by using a JSON field in current versions of MySQL, which would make it more performant, but it seems unlikely it could ever be migrated across to use that solution.</p><p>Frustratingly, its mindshare means it&#x27;s erroneously seen as some kind of &quot;gold standard&quot; by inexperienced developers and non-technical clients, and there seems to be a common misconception that it&#x27;s the only solution that lets users update the content themselves (when in fact that&#x27;s the whole point of ANY CMS). Using Bedrock and a theme system like Sage that supports a proper templating system helps solve some of the problems with Wordpress, but not all.</p><p>I have tried a few solutions that come very close to what I want:</p><ul><li><a href="https://bolt.cm/">Bolt</a> seems from what I&#x27;ve seen so far to be effectively a &quot;better Wordpress&quot; in that the interface and functionality is broadly familiar to anyone already used to Wordpress, but it uses Twig, is built in Symfony, and has a proper command-line runner. I haven&#x27;t tried it since version 4 was released a few days back, so I will probably give it a spin before long.</li><li><a href="https://getgrav.org/">Grav</a> looks like a great solution for brochure sites. I&#x27;ve long thought that these sites, which often run on shared hosting, don&#x27;t really need a database-backed solution, and a flat-file solution is probably a better bet in most cases. Grav is simple to set up and configure, has a decent admin interface, and uses Twig for the views, making it easy to theme.</li><li><a href="https://statamic.com/">Statamic</a> is my current favourite and ticks almost all of the boxes mentioned above. It&#x27;s built on Laravel, and can be added to an existing Laravel site if required. It also allows you access to the full power of the underlying framework if you need it, and ships with a decent front-end boilerplate that includes Tailwind. The only downside compared to Wordpress is that it&#x27;s a paid-for solution, but the price is entirely reasonable, and if it&#x27;s for a client build you&#x27;ll not only save on all the premium plugins you don&#x27;t need, but you&#x27;ll probably save time on the site build.</li></ul><p>Payment shouldn&#x27;t be an issue if you&#x27;re doing client work, unless the cost is huge. You&#x27;re getting paid for building something, and if buying an off-the-shelf product saves you time, it&#x27;s well worth it. Back when Laravel Nova was first released, a lot of people were complaining that it wasn&#x27;t free, but that was neither here nor there - the cost is only equivalent to a few hours of an experienced developer&#x27;s time, and it would take a lot longer to build out the same functionality, and the same is true of any half-decent CMS. In the early days of the web, one company I used to work for sold <a href="http://www.wordserver.co.uk/">a CMS that was considered cheap by the standards of the time</a> at £495, plus £96 a year, for the entry level version - Statamic is significantly cheaper than that.</p><p>It&#x27;s always a good idea to be aware of the various CMS options around. Wordpress isn&#x27;t a great solution and there are plenty of options that are technically better, easier to use, more secure, and work out cheaper when you consider the total cost of ownership. I&#x27;ll probably be favouring Statamic for the foreseeable future when building content-based websites, but that doesn&#x27;t mean I won&#x27;t look elsewhere from time to time.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Flow typed AJAX responses with React Hooks]]></title>
            <link>https://matthewdaly.co.uk/blog/2020/06/13/flow-typed-ajax-responses-with-react-hooks/</link>
            <guid>https://matthewdaly.co.uk/blog/2020/06/13/flow-typed-ajax-responses-with-react-hooks/</guid>
            <pubDate>Sat, 13 Jun 2020 12:50:41 GMT</pubDate>
            <content:encoded><![CDATA[<p>I&#x27;m a big fan of type systems in general. Using Psalm to find missing type declarations and incorrect calls in PHP has helped me out tremendously. However, I&#x27;m not a big fan of Typescript. The idea of creating a whole new language, primarily just to add types to Javascript, strikes me as a fundamentally bad idea given how many languages that compile to Javascript have fallen by the wayside. Flow seems like a much better approach since it adds types to the language rather than creating a new language, and I&#x27;ve been using it on my React components for a good while now. However, there are a few edge cases that can be difficult to figure out, and one of those is any generic AJAX component that may be reused for different requests.</p><p>A while back I wrote the following custom hook, loosely inspired by axios-hooks (but using the Fetch API) to make a query to a GraphQL endpoint:</p><pre><code class="language-javascript" metastring="title=useFetch.js" title="useFetch.js">import { useCallback, useState, useEffect } from &quot;react&quot;;

function useFetch(url, query) {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(false)

  const fetchData = useCallback(() =&gt; {
    setLoading(true);
    fetch(url, {
      method: &#x27;POST&#x27;,
      headers: {
        &#x27;Content-Type&#x27;: &#x27;application/json&#x27;,
        &#x27;Accept&#x27;: &#x27;application/json&#x27;,
      },
      body: JSON.stringify({query: query})
    }).then(r =&gt; r.json())
      .then((data) =&gt; {
        setData(data.data);
        setLoading(false);
        setError(false);
      });
  }, [url, query]);

  useEffect(() =&gt; {
    fetchData();
  }, [url, query, fetchData]);

  return [{
    data: data,
    loading: loading,
    error: error
  }, fetchData];
};

export default useFetch;
</code></pre><p>When called, the hook receives two parameters, the URL to hit, and the query to make, and returns an array that contains a function for reloading, and an object containing the following values:</p><ul><li><code>loading</code> - a boolean that specifies if the hook is loading right now</li><li><code>error</code> - a boolean that specifies if an error has occurred</li><li><code>data</code> - the response data from the endpoint, or null</li></ul><p>Using this hook, it was then possible to make an AJAX request when a component was loaded to populate the data, as in this example:</p><pre><code class="language-javascript" metastring="title=App.js" title="App.js">import React from &#x27;react&#x27;;
import useFetch from &#x27;./Hooks/useFetch&#x27;;
import marked from &#x27;marked&#x27;;
import &#x27;./App.css&#x27;;

function App() {
  const url = `/graphql`;
  const query = `query {
    posts {
      title
      slug
      content
      tags {
        name
      }
    }
  }`;

  const [{data, loading, error}] = useFetch(url, query);

  if (loading) {
    return (&lt;h1&gt;Loading...&lt;/h1&gt;);
  }

  if (error) {
    return (&lt;h1&gt;Error!&lt;/h1&gt;);
  }

  const posts = data ? data.posts.map((item) =&gt; (
    &lt;div key={item.slug}&gt;
      &lt;h2&gt;{item.title}&lt;/h2&gt;
      &lt;div dangerouslySetInnerHTML={{__html: marked(item.content)}} /&gt;
    &lt;/div&gt;
  )) : [];
  return (
    &lt;div className=&quot;App&quot;&gt;
      {posts}
    &lt;/div&gt;
  );
}

export default App;
</code></pre><p>This hook is simple, and easy to reuse. However, it&#x27;s difficult to type the value of <code>data</code> correctly, since it will be different for different endpoints, and given that it may be reused for almost any endpoint, you can&#x27;t cover <em>all</em> the acceptable response types. We need to be able to specify the response that is acceptable in that particular context.</p><h2>Generics to the rescue</h2><p>Flow provides a solution for this in the shape of <a href="https://flow.org/en/docs/types/generics/">generic types</a>. By passing in a polymorphic type using <code>&lt;T&gt;</code> in the function declaration, we can then refer to that type when specifying what <code>data</code> should look like:</p><pre><code class="language-flow" metastring="title=useFetch.js {4-11}" title="useFetch.js">//@flow
import { useCallback, useState, useEffect } from &quot;react&quot;;

function useFetch&lt;T&gt;(url: string, query: string): [{
  data: ?T,
  loading: boolean,
  error: boolean
}, () =&gt; void] {
  const [data, setData]: [?T, ((?T =&gt; ?T) | ?T) =&gt; void] = useState(null);
  const [loading, setLoading]: [boolean, ((boolean =&gt; boolean) | boolean) =&gt; void] = useState(false);
  const [error, setError]: [boolean, ((boolean =&gt; boolean) | boolean) =&gt; void] = useState(false)

  const fetchData = useCallback(() =&gt; {
    setLoading(true);
    fetch(url, {
      method: &#x27;POST&#x27;,
      headers: {
        &#x27;Content-Type&#x27;: &#x27;application/json&#x27;,
        &#x27;Accept&#x27;: &#x27;application/json&#x27;,
      },
      body: JSON.stringify({query: query})
    }).then(r =&gt; r.json())
      .then((data) =&gt; {
        setData(data.data);
        setLoading(false);
        setError(false);
      });
  }, [url, query]);

  useEffect(() =&gt; {
    fetchData();
  }, [url, query, fetchData]);

  return [{
    data: data,
    loading: loading,
    error: error
  }, fetchData];
};

export default useFetch;
</code></pre><p>Then, when calling the hook, we can define a type that represents the expected shape of the data (here called <code>&lt;Data&gt;</code>), and specify that type when calling the hook, as in this example:</p><pre><code class="language-flow" metastring="title=App.js" title="App.js">//@flow
import React from &#x27;react&#x27;;
import useFetch from &#x27;./Hooks/useFetch&#x27;;
import marked from &#x27;marked&#x27;;
import &#x27;./App.css&#x27;;

type Data = {
  posts: Array&lt;{
    title: string,
    slug: string,
    content: string,
    name: Array&lt;string&gt;
  }&gt;
};

function App() {
  const url = `/graphql`;
  const query = `query {
    posts {
      title
      slug
      content
      tags {
        name
      }
    }
  }`;

  const [{data, loading, error}] = useFetch&lt;Data&gt;(url, query);

  if (loading) {
    return (&lt;h1&gt;Loading...&lt;/h1&gt;);
  }

  if (error) {
    return (&lt;h1&gt;Error!&lt;/h1&gt;);
  }

  const posts = data ? data.posts.map((item) =&gt; (
    &lt;div key={item.slug}&gt;
      &lt;h2&gt;{item.title}&lt;/h2&gt;
      &lt;div dangerouslySetInnerHTML={{__html: marked(item.content)}} /&gt;
    &lt;/div&gt;
  )) : [];
  return (
    &lt;div className=&quot;App&quot;&gt;
      {posts}
    &lt;/div&gt;
  );
}

export default App;
</code></pre><p>That way, we can specify a completely different shape for our response data every time we call a different endpoint, without creating a different hook for every different endpoint, and still enjoy properly typed responses from our hook.</p><p>Generics can be useful for many other purposes, such as specifying the contents of collections. For instance, if you had a <code>Collection</code> object, you could use a generic type to specify that any one instance must consist of instances of a given type. Flow would then flag it as an error if you assigned an item of the wrong type to that collection, thus making some unit tests redundant.</p>]]></content:encoded>
        </item>
    </channel>
</rss>